/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace OSGeo.OGR {

using System;
using System.Runtime.InteropServices;

public class Envelope : IDisposable {
  private HandleRef swigCPtr;
  protected object swigCMemOwner;

  internal Envelope(IntPtr cPtr, object cMemoryOwner) {
    swigCMemOwner = cMemoryOwner;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Envelope obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  internal static HandleRef getCPtrAndDisown(Envelope obj, object cMemoryOwner) {
    obj.swigCMemOwner = cMemoryOwner;
    return getCPtr(obj);
  }

  ~Envelope() {
    Dispose();
  }

  public virtual void Dispose() {
  lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwner == null) {
        swigCMemOwner = new object();
        ogrPINVOKE.delete_Envelope(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public double MinX {
    set {
      ogrPINVOKE.Envelope_MinX_set(swigCPtr, value);
      if (ogrPINVOKE.SWIGPendingException.Pending) throw ogrPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = ogrPINVOKE.Envelope_MinX_get(swigCPtr);
      if (ogrPINVOKE.SWIGPendingException.Pending) throw ogrPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double MaxX {
    set {
      ogrPINVOKE.Envelope_MaxX_set(swigCPtr, value);
      if (ogrPINVOKE.SWIGPendingException.Pending) throw ogrPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = ogrPINVOKE.Envelope_MaxX_get(swigCPtr);
      if (ogrPINVOKE.SWIGPendingException.Pending) throw ogrPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double MinY {
    set {
      ogrPINVOKE.Envelope_MinY_set(swigCPtr, value);
      if (ogrPINVOKE.SWIGPendingException.Pending) throw ogrPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = ogrPINVOKE.Envelope_MinY_get(swigCPtr);
      if (ogrPINVOKE.SWIGPendingException.Pending) throw ogrPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double MaxY {
    set {
      ogrPINVOKE.Envelope_MaxY_set(swigCPtr, value);
      if (ogrPINVOKE.SWIGPendingException.Pending) throw ogrPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = ogrPINVOKE.Envelope_MaxY_get(swigCPtr);
      if (ogrPINVOKE.SWIGPendingException.Pending) throw ogrPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Envelope() : this(ogrPINVOKE.new_Envelope(), null) {
    if (ogrPINVOKE.SWIGPendingException.Pending) throw ogrPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
