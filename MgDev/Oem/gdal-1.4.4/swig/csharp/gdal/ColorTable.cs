/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace OSGeo.GDAL {

using System;
using System.Runtime.InteropServices;

public class ColorTable : IDisposable {
  private HandleRef swigCPtr;
  protected object swigCMemOwner;

  internal ColorTable(IntPtr cPtr, object cMemoryOwner) {
    swigCMemOwner = cMemoryOwner;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(ColorTable obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  internal static HandleRef getCPtrAndDisown(ColorTable obj, object cMemoryOwner) {
    obj.swigCMemOwner = cMemoryOwner;
    return getCPtr(obj);
  }

  ~ColorTable() {
    Dispose();
  }

  public virtual void Dispose() {
  lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwner == null) {
        swigCMemOwner = new object();
        gdalPINVOKE.delete_ColorTable(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public ColorTable(int arg0) : this(gdalPINVOKE.new_ColorTable(arg0), null) {
    if (gdalPINVOKE.SWIGPendingException.Pending) throw gdalPINVOKE.SWIGPendingException.Retrieve();
  }

  public ColorTable Clone() {
    IntPtr cPtr = gdalPINVOKE.ColorTable_Clone(swigCPtr);
    ColorTable ret = (cPtr == IntPtr.Zero) ? null : new ColorTable(cPtr, false? null : this);
    if (gdalPINVOKE.SWIGPendingException.Pending) throw gdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetPaletteInterpretation() {
    int ret = gdalPINVOKE.ColorTable_GetPaletteInterpretation(swigCPtr);
    if (gdalPINVOKE.SWIGPendingException.Pending) throw gdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetCount() {
    int ret = gdalPINVOKE.ColorTable_GetCount(swigCPtr);
    if (gdalPINVOKE.SWIGPendingException.Pending) throw gdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ColorEntry GetColorEntry(int arg0) {
    IntPtr cPtr = gdalPINVOKE.ColorTable_GetColorEntry(swigCPtr, arg0);
    ColorEntry ret = (cPtr == IntPtr.Zero) ? null : new ColorEntry(cPtr, false? null : this);
    if (gdalPINVOKE.SWIGPendingException.Pending) throw gdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetColorEntryAsRGB(int arg0, ColorEntry arg1) {
    int ret = gdalPINVOKE.ColorTable_GetColorEntryAsRGB(swigCPtr, arg0, ColorEntry.getCPtr(arg1));
    if (gdalPINVOKE.SWIGPendingException.Pending) throw gdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetColorEntry(int arg0, ColorEntry arg1) {
    gdalPINVOKE.ColorTable_SetColorEntry(swigCPtr, arg0, ColorEntry.getCPtr(arg1));
    if (gdalPINVOKE.SWIGPendingException.Pending) throw gdalPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
