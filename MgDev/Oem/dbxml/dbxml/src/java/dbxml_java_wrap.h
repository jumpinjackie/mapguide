/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_dbxml_java_WRAP_H_
#define SWIG_dbxml_java_WRAP_H_

class SwigDirector_XmlInputStream : public XmlInputStream, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_XmlInputStream(JNIEnv *jenv);
    virtual ~SwigDirector_XmlInputStream();
    virtual unsigned int curPos() const;
    virtual unsigned int readBytes(char *toFill, unsigned int const maxToRead);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_XmlResolver : public XmlResolver, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_XmlResolver(JNIEnv *jenv);
    virtual ~SwigDirector_XmlResolver();
    virtual bool resolveDocument(XmlTransaction *txn, XmlManager &mgr, std::string const &uri, XmlValue &reslt) const;
    virtual bool resolveCollection(XmlTransaction *txn, XmlManager &mgr, std::string const &uri, XmlResults &reslt) const;
    virtual XmlInputStream *resolveSchema(XmlTransaction *txn, XmlManager &mgr, std::string const &schemaLocation, std::string const &nameSpace) const;
    virtual XmlInputStream *resolveEntity(XmlTransaction *txn, XmlManager &mgr, std::string const &systemId, std::string const &publicId) const;
    virtual bool resolveModuleLocation(XmlTransaction *txn, XmlManager &mgr, std::string const &nameSpace, XmlResults &reslt) const;
    virtual XmlInputStream *resolveModule(XmlTransaction *txn, XmlManager &mgr, std::string const &moduleLocation, std::string const &nameSpace) const;
    virtual XmlExternalFunction *resolveExternalFunction(XmlTransaction *txn, XmlManager &mgr, std::string const &uri, std::string const &name, size_t numberOfArgs) const;
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};

class SwigDirector_XmlExternalFunctionBase : public XmlExternalFunction, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_XmlExternalFunctionBase(JNIEnv *jenv);
    virtual ~SwigDirector_XmlExternalFunctionBase();
    virtual XmlResults execute(XmlTransaction &txn, XmlManager &mgr, XmlArguments const &args) const;
    virtual void close();
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_XmlDebugListener : public XmlDebugListener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_XmlDebugListener(JNIEnv *jenv);
    virtual ~SwigDirector_XmlDebugListener();
    virtual void start(XmlStackFrame const *stack);
    virtual void end(XmlStackFrame const *stack);
    virtual void enter(XmlStackFrame const *stack);
    virtual void exit(XmlStackFrame const *stack);
    virtual void error(XmlException const &error, XmlStackFrame const *stack);
public:
    bool swig_overrides(int n) {
      return (n < 5 ? swig_override[n] : false);
    }
protected:
    bool swig_override[5];
};

class SwigDirector_XmlCompression : public XmlCompression, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_XmlCompression(JNIEnv *jenv);
    virtual ~SwigDirector_XmlCompression();
    virtual bool compress(XmlTransaction &txn, XmlData const &source, XmlData &dest);
    virtual bool decompress(XmlTransaction &txn, XmlData const &source, XmlData &dest);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};


#endif
