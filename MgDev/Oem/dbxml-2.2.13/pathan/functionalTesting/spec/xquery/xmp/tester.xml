<?xml version="1.0" encoding="utf-8"?>
<test purpose="xquery_use_cases">
  <policies>
    <policy name="xmp"/>
    <default>
      <program>../../../../samples/evaluator/eval</program>
    </default>
  </policies>
  <base comment="DTDs need to be ported over to schema" type="pass">
    <arg>(&quot;&lt;bib&gt;&quot;, for $b in doc(&quot;bib.xml&quot;)/bib/book[publisher = &quot;Addison-Wesley&quot; and @year &gt; 1991] return (&quot;&lt;book&gt;&quot;, $b/@year, $b/title, &quot;&lt;/book&gt;&quot;), &quot;&lt;/bib&gt;&quot; )</arg>
    <output>&lt;bib&gt;
&lt;book&gt;
{}year=&quot;1994&quot;
&lt;title&gt;TCP/IP Illustrated&lt;/title&gt;
&lt;/book&gt;
&lt;book&gt;
{}year=&quot;1992&quot;
&lt;title&gt;Advanced Programming in the Unix environment&lt;/title&gt;
&lt;/book&gt;
&lt;/bib&gt;
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;results&gt;&quot;, for $b in doc(&quot;bib.xml&quot;)/bib/book, $t in $b/title, $a in $b/author return (&quot;&lt;result&gt;&quot;, $t, $a, &quot;&lt;/result&gt;&quot;), &quot;&lt;/results&gt;&quot;)</arg>
    <output>&lt;results&gt;
&lt;result&gt;
&lt;title&gt;TCP/IP Illustrated&lt;/title&gt;
&lt;author&gt;&lt;last&gt;Stevens&lt;/last&gt;&lt;first&gt;W.&lt;/first&gt;&lt;/author&gt;
&lt;/result&gt;
&lt;result&gt;
&lt;title&gt;Advanced Programming in the Unix environment&lt;/title&gt;
&lt;author&gt;&lt;last&gt;Stevens&lt;/last&gt;&lt;first&gt;W.&lt;/first&gt;&lt;/author&gt;
&lt;/result&gt;
&lt;result&gt;
&lt;title&gt;Data on the Web&lt;/title&gt;
&lt;author&gt;&lt;last&gt;Abiteboul&lt;/last&gt;&lt;first&gt;Serge&lt;/first&gt;&lt;/author&gt;
&lt;/result&gt;
&lt;result&gt;
&lt;title&gt;Data on the Web&lt;/title&gt;
&lt;author&gt;&lt;last&gt;Buneman&lt;/last&gt;&lt;first&gt;Peter&lt;/first&gt;&lt;/author&gt;
&lt;/result&gt;
&lt;result&gt;
&lt;title&gt;Data on the Web&lt;/title&gt;
&lt;author&gt;&lt;last&gt;Suciu&lt;/last&gt;&lt;first&gt;Dan&lt;/first&gt;&lt;/author&gt;
&lt;/result&gt;
&lt;/results&gt;
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;results&gt;&quot;, for $b in doc(&quot;bib.xml&quot;)/bib/book return (&quot;&lt;result&gt;&quot;, $b/title, $b/author, &quot;&lt;/result&gt;&quot;), &quot;&lt;/results&gt;&quot; )</arg>
    <output>&lt;results&gt;
&lt;result&gt;
&lt;title&gt;TCP/IP Illustrated&lt;/title&gt;
&lt;author&gt;&lt;last&gt;Stevens&lt;/last&gt;&lt;first&gt;W.&lt;/first&gt;&lt;/author&gt;
&lt;/result&gt;
&lt;result&gt;
&lt;title&gt;Advanced Programming in the Unix environment&lt;/title&gt;
&lt;author&gt;&lt;last&gt;Stevens&lt;/last&gt;&lt;first&gt;W.&lt;/first&gt;&lt;/author&gt;
&lt;/result&gt;
&lt;result&gt;
&lt;title&gt;Data on the Web&lt;/title&gt;
&lt;author&gt;&lt;last&gt;Abiteboul&lt;/last&gt;&lt;first&gt;Serge&lt;/first&gt;&lt;/author&gt;
&lt;author&gt;&lt;last&gt;Buneman&lt;/last&gt;&lt;first&gt;Peter&lt;/first&gt;&lt;/author&gt;
&lt;author&gt;&lt;last&gt;Suciu&lt;/last&gt;&lt;first&gt;Dan&lt;/first&gt;&lt;/author&gt;
&lt;/result&gt;
&lt;result&gt;
&lt;title&gt;The Economics of Technology and Content for Digital TV&lt;/title&gt;
&lt;/result&gt;
&lt;/results&gt;
</output>
  </base>
  <base comment="distinct-values now returns atomic values, which will not properly compare to nodes in deep-equal" type="fail">
    <arg>(&quot;&lt;results&gt;&quot;, for $a in distinct-values(doc(&quot;bib.xml&quot;)//author) return (&quot;&lt;result&gt;&quot;, $a, for $b in doc(&quot;bib.xml&quot;)/bib/book[some $ba in author satisfies deep-equal($ba, $a)] return $b/title, &quot;&lt;/result&gt;&quot;), &quot;&lt;/results&gt;&quot; )</arg>
    <output>&lt;results&gt;
&lt;result&gt;
&lt;author&gt;&lt;last&gt;Stevens&lt;/last&gt;&lt;first&gt;W.&lt;/first&gt;&lt;/author&gt;
&lt;title&gt;TCP/IP Illustrated&lt;/title&gt;
&lt;title&gt;Advanced Programming in the Unix environment&lt;/title&gt;
&lt;/result&gt;
&lt;result&gt;
&lt;author&gt;&lt;last&gt;Abiteboul&lt;/last&gt;&lt;first&gt;Serge&lt;/first&gt;&lt;/author&gt;
&lt;title&gt;Data on the Web&lt;/title&gt;
&lt;/result&gt;
&lt;result&gt;
&lt;author&gt;&lt;last&gt;Buneman&lt;/last&gt;&lt;first&gt;Peter&lt;/first&gt;&lt;/author&gt;
&lt;title&gt;Data on the Web&lt;/title&gt;
&lt;/result&gt;
&lt;result&gt;
&lt;author&gt;&lt;last&gt;Suciu&lt;/last&gt;&lt;first&gt;Dan&lt;/first&gt;&lt;/author&gt;
&lt;title&gt;Data on the Web&lt;/title&gt;
&lt;/result&gt;
&lt;/results&gt;
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;books-with-prices&gt;&quot;, (for $b in doc(&quot;bib.xml&quot;)//book, $a in doc(&quot;reviews.xml&quot;)//entry return if ($b/title = $a/title) then (&quot;&lt;book-with-prices&gt;&quot;, $b/title, &quot;&lt;price-amazon&gt;&quot;, $a/price/text(), &quot;&lt;/price-amazon&gt;&quot;, &quot;&lt;price-bn&gt;&quot;, $b/price/text(), &quot;&lt;/price-bn&gt;&quot;, &quot;&lt;/book-with-prices&gt;&quot;) else ()), &quot;&lt;/books-with-prices&gt;&quot;)</arg>
    <output>&lt;books-with-prices&gt;
&lt;book-with-prices&gt;
&lt;title&gt;TCP/IP Illustrated&lt;/title&gt;
&lt;price-amazon&gt;
65.95
&lt;/price-amazon&gt;
&lt;price-bn&gt;
 65.95
&lt;/price-bn&gt;
&lt;/book-with-prices&gt;
&lt;book-with-prices&gt;
&lt;title&gt;Advanced Programming in the Unix environment&lt;/title&gt;
&lt;price-amazon&gt;
65.95
&lt;/price-amazon&gt;
&lt;price-bn&gt;
65.95
&lt;/price-bn&gt;
&lt;/book-with-prices&gt;
&lt;book-with-prices&gt;
&lt;title&gt;Data on the Web&lt;/title&gt;
&lt;price-amazon&gt;
34.95
&lt;/price-amazon&gt;
&lt;price-bn&gt;
39.95
&lt;/price-bn&gt;
&lt;/book-with-prices&gt;
&lt;/books-with-prices&gt;
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;bib&gt;&quot;, for $b in doc(&quot;bib.xml&quot;)//book[count(author) &gt; 0] return (&quot;&lt;book&gt;&quot;, $b/title, for $a in $b/author[position()&lt;=2] return $a, if (count($b/author) &gt; 2) then &quot;&lt;et-al/&gt;&quot; else (), &quot;&lt;/book&gt;&quot;), &quot;&lt;/bib&gt;&quot;)</arg>
    <output>&lt;bib&gt;
&lt;book&gt;
&lt;title&gt;TCP/IP Illustrated&lt;/title&gt;
&lt;author&gt;&lt;last&gt;Stevens&lt;/last&gt;&lt;first&gt;W.&lt;/first&gt;&lt;/author&gt;
&lt;/book&gt;
&lt;book&gt;
&lt;title&gt;Advanced Programming in the Unix environment&lt;/title&gt;
&lt;author&gt;&lt;last&gt;Stevens&lt;/last&gt;&lt;first&gt;W.&lt;/first&gt;&lt;/author&gt;
&lt;/book&gt;
&lt;book&gt;
&lt;title&gt;Data on the Web&lt;/title&gt;
&lt;author&gt;&lt;last&gt;Abiteboul&lt;/last&gt;&lt;first&gt;Serge&lt;/first&gt;&lt;/author&gt;
&lt;author&gt;&lt;last&gt;Buneman&lt;/last&gt;&lt;first&gt;Peter&lt;/first&gt;&lt;/author&gt;
&lt;et-al/&gt;
&lt;/book&gt;
&lt;/bib&gt;
</output>
  </base>
  <base comment="DTDs need to be ported over to schema" type="pass">
    <arg>(&quot;&lt;bib&gt;&quot;, for $b in doc(&quot;bib.xml&quot;)//book[publisher = &quot;Addison-Wesley&quot; and @year &gt; 1991] return (&quot;&lt;book&gt;&quot;, $b/@year, $b/title, &quot;&lt;/book&gt;&quot;), &quot;&lt;/bib&gt;&quot; )</arg>
    <output>&lt;bib&gt;
&lt;book&gt;
{}year=&quot;1994&quot;
&lt;title&gt;TCP/IP Illustrated&lt;/title&gt;
&lt;/book&gt;
&lt;book&gt;
{}year=&quot;1992&quot;
&lt;title&gt;Advanced Programming in the Unix environment&lt;/title&gt;
&lt;/book&gt;
&lt;/bib&gt;
</output>
  </base>
  <base type="pass">
    <arg>for $b in doc(&quot;bib.xml&quot;)//book[exists(*[contains(string(.), &quot;Suciu&quot;) and ends-with(local-name(.), &quot;or&quot;)])] return (&quot;&lt;book&gt;&quot;, $b/title, $b/*[contains(string(.), &quot;Suciu&quot;) and ends-with(local-name(.), &quot;or&quot;)], &quot;&lt;/book&gt;&quot;)</arg>
    <output>&lt;book&gt;
&lt;title&gt;Data on the Web&lt;/title&gt;
&lt;author&gt;&lt;last&gt;Suciu&lt;/last&gt;&lt;first&gt;Dan&lt;/first&gt;&lt;/author&gt;
&lt;/book&gt;
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;results&gt;&quot;, for $t in doc(&quot;books.xml&quot;)//(chapter | section)/title[contains(text(), &quot;XML&quot;)] return $t, &quot;&lt;/results&gt;&quot; )</arg>
    <output>&lt;results&gt;
&lt;title&gt;XML&lt;/title&gt;
&lt;title&gt;XML and Semistructured Data&lt;/title&gt;
&lt;/results&gt;
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;results&gt;&quot;, for $doc in doc(&quot;prices.xml&quot;), $t in distinct-values($doc//book/title), $p in min(for $x in $doc//book[title = $t]/price return xs:decimal($x)) return (&quot;&lt;minprice&gt;&quot;, &quot;&lt;title&gt;&quot;, $t, &quot;&lt;/title&gt;&quot;, &quot;&lt;price&gt;&quot;, $p, &quot;&lt;/price&gt;&quot;, &quot;&lt;/minprice&gt;&quot;), &quot;&lt;/results&gt;&quot;)</arg>
    <output>&lt;results&gt;
&lt;minprice&gt;
&lt;title&gt;
Advanced Programming in the Unix environment
&lt;/title&gt;
&lt;price&gt;
65.95
&lt;/price&gt;
&lt;/minprice&gt;
&lt;minprice&gt;
&lt;title&gt;
TCP/IP Illustrated
&lt;/title&gt;
&lt;price&gt;
65.95
&lt;/price&gt;
&lt;/minprice&gt;
&lt;minprice&gt;
&lt;title&gt;
Data on the Web
&lt;/title&gt;
&lt;price&gt;
34.95
&lt;/price&gt;
&lt;/minprice&gt;
&lt;/results&gt;
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;bib&gt;&quot;, for $b in doc(&quot;bib.xml&quot;)//book[author] return (&quot;&lt;book&gt;&quot;, $b/title, $b/author, &quot;&lt;/book&gt;&quot;), for $b in doc(&quot;bib.xml&quot;)//book[editor] return (&quot;&lt;reference&gt;&quot;, $b/title, $b/editor/affiliation, &quot;&lt;/reference&gt;&quot;), &quot;&lt;/bib&gt;&quot; )</arg>
    <output>&lt;bib&gt;
&lt;book&gt;
&lt;title&gt;TCP/IP Illustrated&lt;/title&gt;
&lt;author&gt;&lt;last&gt;Stevens&lt;/last&gt;&lt;first&gt;W.&lt;/first&gt;&lt;/author&gt;
&lt;/book&gt;
&lt;book&gt;
&lt;title&gt;Advanced Programming in the Unix environment&lt;/title&gt;
&lt;author&gt;&lt;last&gt;Stevens&lt;/last&gt;&lt;first&gt;W.&lt;/first&gt;&lt;/author&gt;
&lt;/book&gt;
&lt;book&gt;
&lt;title&gt;Data on the Web&lt;/title&gt;
&lt;author&gt;&lt;last&gt;Abiteboul&lt;/last&gt;&lt;first&gt;Serge&lt;/first&gt;&lt;/author&gt;
&lt;author&gt;&lt;last&gt;Buneman&lt;/last&gt;&lt;first&gt;Peter&lt;/first&gt;&lt;/author&gt;
&lt;author&gt;&lt;last&gt;Suciu&lt;/last&gt;&lt;first&gt;Dan&lt;/first&gt;&lt;/author&gt;
&lt;/book&gt;
&lt;reference&gt;
&lt;title&gt;The Economics of Technology and Content for Digital TV&lt;/title&gt;
&lt;affiliation&gt;CITI&lt;/affiliation&gt;
&lt;/reference&gt;
&lt;/bib&gt;
</output>
  </base>
</test>