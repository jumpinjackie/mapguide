<?xml version="1.0" encoding="utf-8"?>
<test purpose="r">
  <policies>
    <policy name=""/>
    <default>
      <program>../../../../samples/evaluator/eval</program>
    </default>
  </policies>
  <base type="pass">
    <arg>("[result]", for $i in doc("items.xml")//item_tuple[start_date &lt; xs:date("1999-02-01") and end_date &gt; xs:date("1999-02-01") and contains(description, "Bicycle")] return ("[item_tuple]", $i/itemno, $i/description, "[/item_tuple]"), "[/result]")</arg>
    <output>[result]
[item_tuple]
&lt;itemno&gt;1003&lt;/itemno&gt;
&lt;description&gt;Old Bicycle&lt;/description&gt;
[/item_tuple]
[item_tuple]
&lt;itemno&gt;1007&lt;/itemno&gt;
&lt;description&gt;Racing Bicycle&lt;/description&gt;
[/item_tuple]
[/result]
</output>
  </base>
  <base type="pass">
    <arg>("[result]", for $i in doc("items.xml")//item_tuple[contains(description, "Bicycle")] return ("[item_tuple]", $i/itemno, $i/description, "[high_bid]", max(for $z in doc("bids.xml")//bid_tuple[itemno = $i/itemno] return xs:decimal($z/bid)), "[/high_bid]","[/item_tuple]"), "[/result]" ) </arg>
    <output>[result]
[item_tuple]
&lt;itemno&gt;1001&lt;/itemno&gt;
&lt;description&gt;Red Bicycle&lt;/description&gt;
[high_bid]
55
[/high_bid]
[/item_tuple]
[item_tuple]
&lt;itemno&gt;1003&lt;/itemno&gt;
&lt;description&gt;Old Bicycle&lt;/description&gt;
[high_bid]
20
[/high_bid]
[/item_tuple]
[item_tuple]
&lt;itemno&gt;1007&lt;/itemno&gt;
&lt;description&gt;Racing Bicycle&lt;/description&gt;
[high_bid]
225
[/high_bid]
[/item_tuple]
[item_tuple]
&lt;itemno&gt;1008&lt;/itemno&gt;
&lt;description&gt;Broken Bicycle&lt;/description&gt;
[high_bid]
[/high_bid]
[/item_tuple]
[/result]
</output>
  </base>
  <base type="pass">
    <arg>("[result]", (for $u in doc("users.xml")//user_tuple, $i in doc("items.xml")//item_tuple return if ($u/rating &gt; "C" and $i/reserve_price &gt; 1000 and $i/offered_by = $u/userid) then ("[warning]", $u/name, $u/rating, $i/description, $i/reserve_price, "[/warning]") else ()), "[/result]")</arg>
    <output>[result]
[warning]
&lt;name&gt;Dee Linquent&lt;/name&gt;
&lt;rating&gt;D&lt;/rating&gt;
&lt;description&gt;Helicopter&lt;/description&gt;
&lt;reserve_price&gt;50000&lt;/reserve_price&gt;
[/warning]
[/result]
</output>
  </base>
  <base type="pass">
    <arg>("[result]", for $i in doc("items.xml")//item_tuple return if (empty(doc("bids.xml")//bid_tuple[itemno = $i/itemno])) then ("[no_bid_item]", $i/itemno, $i/description, "[/no_bid_item]") else (), "[/result]" )</arg>
    <output>[result]
[no_bid_item]
&lt;itemno&gt;1005&lt;/itemno&gt;
&lt;description&gt;Tennis Racket&lt;/description&gt;
[/no_bid_item]
[no_bid_item]
&lt;itemno&gt;1006&lt;/itemno&gt;
&lt;description&gt;Helicopter&lt;/description&gt;
[/no_bid_item]
[no_bid_item]
&lt;itemno&gt;1008&lt;/itemno&gt;
&lt;description&gt;Broken Bicycle&lt;/description&gt;
[/no_bid_item]
[/result]
</output>
  </base>
  <base type="pass">
    <arg>("[result]", (for $seller in doc("users.xml")//user_tuple, $buyer in doc("users.xml")//user_tuple, $item in doc("items.xml")//item_tuple, $highbid in doc("bids.xml")//bid_tuple return if ($seller/name = "Tom Jones" and $seller/userid = $item/offered_by and contains($item/description, "Bicycle") and $item/itemno = $highbid/itemno and $highbid/userid = $buyer/userid and $highbid/bid = max(for $x in doc("bids.xml")//bid_tuple[itemno = $item/itemno]/bid return xs:decimal($x))) then ("[jones_bike]", $item/itemno, $item/description, "[high_bid]", $highbid/bid, "[/high_bid]", "[high_bidder]", $buyer/name, "[/high_bidder]", "[/jones_bike]") else ()), "[/result]" )</arg>
    <output>[result]
[jones_bike]
&lt;itemno&gt;1001&lt;/itemno&gt;
&lt;description&gt;Red Bicycle&lt;/description&gt;
[high_bid]
&lt;bid&gt;55&lt;/bid&gt;
[/high_bid]
[high_bidder]
&lt;name&gt;Mary Doe&lt;/name&gt;
[/high_bidder]
[/jones_bike]
[/result]
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;result&gt;&quot;, for $item in doc(&quot;items.xml&quot;)//item_tuple, $b in doc(&quot;bids.xml&quot;)//bid_tuple[itemno = $item/itemno], $z in max(for $x in $b/bid return xs:decimal($x)) return if ($item/reserve_price * 2 &lt; $z) then (&quot;&lt;successful_item&gt;&quot;, $item/itemno, $item/description, $item/reserve_price, &quot;&lt;high_bid&gt;&quot;, $z, &quot;&lt;/high_bid&gt;&quot;,&quot;&lt;/successful_item&gt;&quot;) else (), &quot;&lt;/result&gt;&quot; ) </arg>
    <output>&lt;result&gt;
&lt;successful_item&gt;
&lt;itemno&gt;1002&lt;/itemno&gt;
&lt;description&gt;Motorcycle&lt;/description&gt;
&lt;reserve_price&gt;500&lt;/reserve_price&gt;
&lt;high_bid&gt;
1200
&lt;/high_bid&gt;
&lt;/successful_item&gt;
&lt;successful_item&gt;
&lt;itemno&gt;1004&lt;/itemno&gt;
&lt;description&gt;Tricycle&lt;/description&gt;
&lt;reserve_price&gt;15&lt;/reserve_price&gt;
&lt;high_bid&gt;
40
&lt;/high_bid&gt;
&lt;/successful_item&gt;
&lt;/result&gt;
</output>
  </base>
  <base type="pass">
    <arg>((&quot;&lt;item_count&gt;&quot;, count(doc(&quot;items.xml&quot;)//item_tuple [end_date &gt;= xs:date(&quot;1999-03-01&quot;) and end_date &lt;= xs:date(&quot;1999-03-31&quot;)]), &quot;&lt;/item_count&gt;&quot;))</arg>
    <output>&lt;item_count&gt;
3
&lt;/item_count&gt;
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;result&gt;&quot;, (for $m in distinct-values(for $e in doc(&quot;items.xml&quot;)//item_tuple/end_date return month-from-date($e)) return (&quot;&lt;monthly_result&gt;&quot;, &quot;&lt;month&gt;&quot;, $m, &quot;&lt;/month&gt;&quot;, &quot;&lt;item_count&gt;&quot;, count(doc(&quot;items.xml&quot;)//item_tuple[year-from-date(end_date) = 1999 and month-from-date(end_date) = $m]), &quot;&lt;/item_count&gt;&quot;, &quot;&lt;/monthly_result&gt;&quot;)), &quot;&lt;/result&gt;&quot;)</arg>
    <output>&lt;result&gt;
&lt;monthly_result&gt;
&lt;month&gt;
1
&lt;/month&gt;
&lt;item_count&gt;
1
&lt;/item_count&gt;
&lt;/monthly_result&gt;
&lt;monthly_result&gt;
&lt;month&gt;
3
&lt;/month&gt;
&lt;item_count&gt;
3
&lt;/item_count&gt;
&lt;/monthly_result&gt;
&lt;monthly_result&gt;
&lt;month&gt;
2
&lt;/month&gt;
&lt;item_count&gt;
2
&lt;/item_count&gt;
&lt;/monthly_result&gt;
&lt;monthly_result&gt;
&lt;month&gt;
4
&lt;/month&gt;
&lt;item_count&gt;
1
&lt;/item_count&gt;
&lt;/monthly_result&gt;
&lt;monthly_result&gt;
&lt;month&gt;
5
&lt;/month&gt;
&lt;item_count&gt;
1
&lt;/item_count&gt;
&lt;/monthly_result&gt;
&lt;/result&gt;
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;result&gt;&quot;, for $highbid in doc(&quot;bids.xml&quot;)//bid_tuple, $user in doc(&quot;users.xml&quot;)//user_tuple return if ($user/userid = $highbid/userid and $highbid/bid = max(for $x in doc(&quot;bids.xml&quot;)//bid_tuple[itemno=$highbid/itemno]/bid return xs:decimal($x))) then (&quot;&lt;high_bid&gt;&quot;, $highbid/itemno, $highbid/bid, &quot;&lt;bidder&gt;&quot;, $user/name/text(), &quot;&lt;/bidder&gt;&quot;,&quot;&lt;/high_bid&gt;&quot;) else (), &quot;&lt;/result&gt;&quot; )</arg>
    <output>&lt;result&gt;
&lt;high_bid&gt;
&lt;itemno&gt;1001&lt;/itemno&gt;
&lt;bid&gt;55&lt;/bid&gt;
&lt;bidder&gt;
Mary Doe
&lt;/bidder&gt;
&lt;/high_bid&gt;
&lt;high_bid&gt;
&lt;itemno&gt;1002&lt;/itemno&gt;
&lt;bid&gt;1200&lt;/bid&gt;
&lt;bidder&gt;
Mary Doe
&lt;/bidder&gt;
&lt;/high_bid&gt;
&lt;high_bid&gt;
&lt;itemno&gt;1003&lt;/itemno&gt;
&lt;bid&gt;20&lt;/bid&gt;
&lt;bidder&gt;
Jack Sprat
&lt;/bidder&gt;
&lt;/high_bid&gt;
&lt;high_bid&gt;
&lt;itemno&gt;1004&lt;/itemno&gt;
&lt;bid&gt;40&lt;/bid&gt;
&lt;bidder&gt;
Tom Jones
&lt;/bidder&gt;
&lt;/high_bid&gt;
&lt;high_bid&gt;
&lt;itemno&gt;1007&lt;/itemno&gt;
&lt;bid&gt;225&lt;/bid&gt;
&lt;bidder&gt;
Roger Smith
&lt;/bidder&gt;
&lt;/high_bid&gt;
&lt;/result&gt;
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;result&gt;&quot;, for $item in doc(&quot;items.xml&quot;)//item_tuple, $b in doc(&quot;bids.xml&quot;)//bid_tuple[itemno = $item/itemno][bid = max(for $x in doc(&quot;bids.xml&quot;)//bid_tuple/bid return xs:decimal($x))] return (&quot;&lt;expensive_item&gt;&quot;, $item/itemno, $item/description, $b/bid, &quot;&lt;/expensive_item&gt;&quot;), &quot;&lt;/result&gt;&quot; )</arg>
    <output>&lt;result&gt;
&lt;expensive_item&gt;
&lt;itemno&gt;1002&lt;/itemno&gt;
&lt;description&gt;Motorcycle&lt;/description&gt;
&lt;bid&gt;1200&lt;/bid&gt;
&lt;/expensive_item&gt;
&lt;/result&gt;
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;result&gt;&quot;, (for $uid in distinct-values(doc(&quot;bids.xml&quot;)//userid), $u in doc(&quot;users.xml&quot;)//user_tuple[userid = $uid] return (&quot;&lt;bidder&gt;&quot;, $u/userid, $u/name, &quot;&lt;bidcount&gt;&quot;, count(doc(&quot;bids.xml&quot;)//bid_tuple[userid = $uid]), &quot;&lt;/bidcount&gt;&quot;, &quot;&lt;avgbid&gt;&quot;, avg(for $x in (doc(&quot;bids.xml&quot;)//bid_tuple[userid = $uid])/bid return xs:decimal($x)), &quot;&lt;/avgbid&gt;&quot;, &quot;&lt;/bidder&gt;&quot;)), &quot;&lt;/result&gt;&quot; )</arg>
    <output>&lt;result&gt;
&lt;bidder&gt;
&lt;userid&gt;U02&lt;/userid&gt;
&lt;name&gt;Mary Doe&lt;/name&gt;
&lt;bidcount&gt;
5
&lt;/bidcount&gt;
&lt;avgbid&gt;
387
&lt;/avgbid&gt;
&lt;/bidder&gt;
&lt;bidder&gt;
&lt;userid&gt;U04&lt;/userid&gt;
&lt;name&gt;Roger Smith&lt;/name&gt;
&lt;bidcount&gt;
5
&lt;/bidcount&gt;
&lt;avgbid&gt;
266
&lt;/avgbid&gt;
&lt;/bidder&gt;
&lt;bidder&gt;
&lt;userid&gt;U01&lt;/userid&gt;
&lt;name&gt;Tom Jones&lt;/name&gt;
&lt;bidcount&gt;
2
&lt;/bidcount&gt;
&lt;avgbid&gt;
220
&lt;/avgbid&gt;
&lt;/bidder&gt;
&lt;bidder&gt;
&lt;userid&gt;U03&lt;/userid&gt;
&lt;name&gt;Dee Linquent&lt;/name&gt;
&lt;bidcount&gt;
2
&lt;/bidcount&gt;
&lt;avgbid&gt;
487.5
&lt;/avgbid&gt;
&lt;/bidder&gt;
&lt;bidder&gt;
&lt;userid&gt;U05&lt;/userid&gt;
&lt;name&gt;Jack Sprat&lt;/name&gt;
&lt;bidcount&gt;
2
&lt;/bidcount&gt;
&lt;avgbid&gt;
110
&lt;/avgbid&gt;
&lt;/bidder&gt;
&lt;/result&gt;
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;result&gt;&quot;, for $i in distinct-values(doc(&quot;bids.xml&quot;)//itemno) return if (count(doc(&quot;bids.xml&quot;)//bid_tuple[itemno = $i]) &gt;= 3) then (&quot;&lt;popular_item&gt;&quot;, $i, &quot;&lt;avgbid&gt;&quot;, avg(for $x in (doc(&quot;bids.xml&quot;)//bid_tuple[itemno = $i])/bid return xs:decimal($x)), &quot;&lt;/avgbid&gt;&quot;,&quot;&lt;/popular_item&gt;&quot;) else (), &quot;&lt;/result&gt;&quot; )</arg>
    <output>&lt;result&gt;
&lt;popular_item&gt;
1001
&lt;avgbid&gt;
45
&lt;/avgbid&gt;
&lt;/popular_item&gt;
&lt;popular_item&gt;
1002
&lt;avgbid&gt;
800
&lt;/avgbid&gt;
&lt;/popular_item&gt;
&lt;popular_item&gt;
1007
&lt;avgbid&gt;
200
&lt;/avgbid&gt;
&lt;/popular_item&gt;
&lt;/result&gt;
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;result&gt;&quot;, for $u in doc(&quot;users.xml&quot;)//user_tuple return if (count(doc(&quot;bids.xml&quot;)//bid_tuple[userid=$u/userid and bid&gt;=100]) &gt; 1) then (&quot;&lt;big_spender&gt;&quot;, $u/name/text(), &quot;&lt;/big_spender&gt;&quot;) else (), &quot;&lt;/result&gt;&quot;)</arg>
    <output>&lt;result&gt;
&lt;big_spender&gt;
Mary Doe
&lt;/big_spender&gt;
&lt;big_spender&gt;
Dee Linquent
&lt;/big_spender&gt;
&lt;big_spender&gt;
Roger Smith
&lt;/big_spender&gt;
&lt;/result&gt;
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;result&gt;&quot;, for $u in doc(&quot;users.xml&quot;)//user_tuple return (&quot;&lt;user&gt;&quot;, $u/userid, $u/name, if (empty(doc(&quot;bids.xml&quot;)//bid_tuple[userid = $u/userid])) then &quot;&lt;status&gt;inactive&lt;/status&gt;&quot; else &quot;&lt;status&gt;active&lt;/status&gt;&quot;, &quot;&lt;/user&gt;&quot;), &quot;&lt;/result&gt;&quot;)</arg>
    <output>&lt;result&gt;
&lt;user&gt;
&lt;userid&gt;U01&lt;/userid&gt;
&lt;name&gt;Tom Jones&lt;/name&gt;
&lt;status&gt;active&lt;/status&gt;
&lt;/user&gt;
&lt;user&gt;
&lt;userid&gt;U02&lt;/userid&gt;
&lt;name&gt;Mary Doe&lt;/name&gt;
&lt;status&gt;active&lt;/status&gt;
&lt;/user&gt;
&lt;user&gt;
&lt;userid&gt;U03&lt;/userid&gt;
&lt;name&gt;Dee Linquent&lt;/name&gt;
&lt;status&gt;active&lt;/status&gt;
&lt;/user&gt;
&lt;user&gt;
&lt;userid&gt;U04&lt;/userid&gt;
&lt;name&gt;Roger Smith&lt;/name&gt;
&lt;status&gt;active&lt;/status&gt;
&lt;/user&gt;
&lt;user&gt;
&lt;userid&gt;U05&lt;/userid&gt;
&lt;name&gt;Jack Sprat&lt;/name&gt;
&lt;status&gt;active&lt;/status&gt;
&lt;/user&gt;
&lt;user&gt;
&lt;userid&gt;U06&lt;/userid&gt;
&lt;name&gt;Rip Van Winkle&lt;/name&gt;
&lt;status&gt;inactive&lt;/status&gt;
&lt;/user&gt;
&lt;/result&gt;
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;frequent_bidder&gt;&quot;, for $u in doc(&quot;users.xml&quot;)//user_tuple return if (every $item in doc(&quot;items.xml&quot;)//item_tuple satisfies some $b in doc(&quot;bids.xml&quot;)//bid_tuple satisfies ($item/itemno = $b/itemno and $u/userid = $b/userid)) then $u/name else (), &quot;&lt;/frequent_bidder&gt;&quot;)</arg>
    <output>&lt;frequent_bidder&gt;
&lt;/frequent_bidder&gt;
</output>
  </base>
  <base type="pass">
    <arg>(&quot;&lt;result&gt;&quot;, for $u in doc(&quot;users.xml&quot;)//user_tuple return (&quot;&lt;user&gt;&quot;, $u/name, (for $b in distinct-values(doc(&quot;bids.xml&quot;)//bid_tuple [userid = $u/userid]/itemno), $i in doc(&quot;items.xml&quot;)//item_tuple[itemno = $b] return (&quot;&lt;bid_on_item&gt;&quot;,$i/description/text(),&quot;&lt;/bid_on_item&gt;&quot;)), &quot;&lt;/user&gt;&quot;), &quot;&lt;/result&gt;&quot;)</arg>
    <output>&lt;result&gt;
&lt;user&gt;
&lt;name&gt;Tom Jones&lt;/name&gt;
&lt;bid_on_item&gt;
Motorcycle
&lt;/bid_on_item&gt;
&lt;bid_on_item&gt;
Tricycle
&lt;/bid_on_item&gt;
&lt;/user&gt;
&lt;user&gt;
&lt;name&gt;Mary Doe&lt;/name&gt;
&lt;bid_on_item&gt;
Red Bicycle
&lt;/bid_on_item&gt;
&lt;bid_on_item&gt;
Motorcycle
&lt;/bid_on_item&gt;
&lt;/user&gt;
&lt;user&gt;
&lt;name&gt;Dee Linquent&lt;/name&gt;
&lt;bid_on_item&gt;
Motorcycle
&lt;/bid_on_item&gt;
&lt;bid_on_item&gt;
Racing Bicycle
&lt;/bid_on_item&gt;
&lt;/user&gt;
&lt;user&gt;
&lt;name&gt;Roger Smith&lt;/name&gt;
&lt;bid_on_item&gt;
Red Bicycle
&lt;/bid_on_item&gt;
&lt;bid_on_item&gt;
Motorcycle
&lt;/bid_on_item&gt;
&lt;bid_on_item&gt;
Old Bicycle
&lt;/bid_on_item&gt;
&lt;bid_on_item&gt;
Racing Bicycle
&lt;/bid_on_item&gt;
&lt;/user&gt;
&lt;user&gt;
&lt;name&gt;Jack Sprat&lt;/name&gt;
&lt;bid_on_item&gt;
Old Bicycle
&lt;/bid_on_item&gt;
&lt;bid_on_item&gt;
Racing Bicycle
&lt;/bid_on_item&gt;
&lt;/user&gt;
&lt;user&gt;
&lt;name&gt;Rip Van Winkle&lt;/name&gt;
&lt;/user&gt;
&lt;/result&gt;
</output>
  </base>
</test>