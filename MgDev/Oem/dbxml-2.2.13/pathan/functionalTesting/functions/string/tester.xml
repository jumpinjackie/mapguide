<?xml version="1.0" encoding="utf-8"?>
<test purpose="strings">
  <policies>
    <policy name="string">
      <addArg>test.xml</addArg>
    </policy>
    <default>
      <program>../../../samples/evaluator/eval</program>
    </default>
  </policies>
  <base type="pass">
    <arg>compare(&quot;abc&quot;, &quot;abc&quot;)</arg>
    <output>0
</output>
  </base>
  <base type="pass">
    <arg>compare(&quot;a&quot;, &quot;b&quot;)</arg>
    <output>-1
</output>
  </base>
  <base type="pass">
    <arg>compare(&quot;c&quot;, &quot;a&quot;)</arg>
    <output>1
</output>
  </base>
  <base type="pass">
    <arg>compare(&quot;B&quot;, &quot;a&quot;)</arg>
    <output>-1
</output>
  </base>
  <base type="pass">
    <arg>compare(&quot;abc&quot;, &quot;abc&quot;, &quot;http://www.w3.org/2005/04/xpath-functions/collation/codepoint&quot;)</arg>
    <output>0
</output>
  </base>
  <base type="pass">
    <arg>compare(&quot;a&quot;, &quot;b&quot;, &quot;http://www.w3.org/2005/04/xpath-functions/collation/codepoint&quot;)</arg>
    <output>-1
</output>
  </base>
  <base type="pass">
    <arg>compare(&quot;c&quot;, &quot;a&quot;, &quot;http://www.w3.org/2005/04/xpath-functions/collation/codepoint&quot;)</arg>
    <output>1
</output>
  </base>
  <base type="pass">
    <arg>compare(&quot;B&quot;, &quot;a&quot;, &quot;http://www.w3.org/2005/04/xpath-functions/collation/codepoint&quot;)</arg>
    <output>-1
</output>
  </base>
  <base type="pass">
    <arg>concat(&quot;abc&quot;, &quot;def&quot;)</arg>
    <output>abcdef
</output>
  </base>
  <base type="pass">
    <arg>concat(&quot;abc&quot;,())</arg>
    <output>abc
</output>
  </base>
  <base type="pass">
    <arg>concat(&quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;, &quot;jkl&quot;, &quot;mno&quot;)</arg>
    <output>abcdefghijklmno
</output>
  </base>
  <base type="pass">
    <arg>concat((), &quot;abc&quot;, (), &quot;def&quot;)</arg>
    <output>abcdef
</output>
  </base>
  <base type="pass">
    <arg>concat((),())</arg>
    <output/>
  </base>
  <base type="pass">
    <arg>string-join((&quot;hello&quot;, &quot;world&quot;, &quot;!&quot;), &quot; &quot;)  </arg>
    <output>hello world !
</output>
  </base>
  <base type="pass">
    <arg>string-join((&quot;19&quot;, &quot;59&quot;, &quot;13&quot;), &quot;:&quot;) </arg>
    <output>19:59:13
</output>
  </base>
  <base type="pass">
    <arg>string-join((&quot;abra&quot;, &quot;cadabra&quot;), &quot;&quot;)  </arg>
    <output>abracadabra
</output>
  </base>
  <base type="pass">
  <arg>string-join((),&quot;a&quot;) </arg>
  <output/>
  </base>
  <base type="pass">
    <arg>starts-with(&quot;goldenrod&quot;, &quot;gold&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>starts-with(&quot;goldenrod&quot;, &quot;&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>starts-with(&quot;&quot;, &quot;a&quot;)</arg>
    <output>false
</output>
  </base>
  <base type="pass">
    <arg>starts-with(&quot;goldenrod&quot;, &quot;goldenrod&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>starts-with(&quot;&quot;, &quot;&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>starts-with((), &quot;&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>starts-with(&quot;&quot;, ())</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>starts-with(&quot;&quot;, &quot;&quot;, &quot;http://www.w3.org/2005/04/xpath-functions/collation/codepoint&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>ends-with(&quot;goldenrod&quot;, &quot;rod&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>ends-with(&quot;goldenrod&quot;, &quot;&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>ends-with(&quot;&quot;, &quot;a&quot;)</arg>
    <output>false
</output>
  </base>
  <base type="pass">
    <arg>ends-with(&quot;goldenrod&quot;, &quot;goldenrod&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>ends-with(&quot;&quot;, &quot;&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>ends-with((), &quot;&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>ends-with(&quot;&quot;, ())</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>ends-with(&quot;&quot;, &quot;&quot;, &quot;http://www.w3.org/2005/04/xpath-functions/collation/codepoint&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>contains(&quot;abcde&quot;, &quot;&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>contains(&quot;&quot;, &quot;a&quot;)</arg>
    <output>false
</output>
  </base>
  <base type="pass">
    <arg>contains(&quot;abcde&quot;, &quot;abcde&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>contains(&quot;abcde&quot;, &quot;ab&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>contains(&quot;abcde&quot;, &quot;c&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>contains(&quot;abcde&quot;, &quot;de&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>contains((), &quot;&quot;)</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>contains(&quot;&quot;, ())</arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>contains(&quot;&quot;, &quot;&quot;, &quot;http://www.w3.org/2005/04/xpath-functions/collation/codepoint&quot;) </arg>
    <output>true
</output>
  </base>
  <base type="pass">
    <arg>substring(&quot;motor car&quot;, 5)</arg>
    <output>r car
</output>
  </base>
  <base type="pass">
    <arg>substring(&quot;metadata&quot;, 4, 3)</arg>
    <output>ada
</output>
  </base>
  <base type="pass">
    <arg>substring(&quot;12345&quot;, 1.5, 2.6)</arg>
    <output>234
</output>
  </base>
  <base type="pass">
    <arg>substring(&quot;12345&quot;, 1.5)</arg>
    <output>2345
</output>
  </base>
  <base type="pass">
    <arg>substring(&quot;12345&quot;, 0, 3)</arg>
    <output>123
</output>
  </base>
  <base type="pass">
    <arg>substring(&quot;12345&quot;, -15)</arg>
    <output>12345
</output>
  </base>
  <base type="pass">
    <arg>substring(&quot;12345&quot;, 6)</arg>
    <output>
</output>
  </base>
  <base type="pass">
    <arg>substring(&quot;12345&quot;, 4, 20)</arg>
    <output>45
</output>
  </base>
  <base type="pass">
    <arg>substring((), 1, 1)</arg>
    <output/>
  </base>
  <base type="pass">
    <arg>substring-before(&quot;abcdabcd&quot;, &quot;d&quot;)</arg>
    <output>abc
</output>
  </base>
  <base type="pass">
    <arg>substring-before(&quot;abcd&quot;, &quot;&quot;)</arg>
    <output>abcd
</output>
  </base>
  <base type="pass">
    <arg>substring-after(&quot;abcdabcd&quot;, &quot;d&quot;)</arg>
    <output>abcd
</output>
  </base>
  <base type="pass">
    <arg>substring-after(&quot;abcd&quot;, &quot;&quot;)</arg>
    <output>abcd
</output>
  </base>
  <base type="pass">
    <arg>substring(&quot;abcd&quot;, 0.5, 2)</arg>
    <output>ab
</output>
  </base>
  <base type="pass">
    <arg>string-length(&quot;&quot;)</arg>
    <output>0
</output>
  </base>
  <base type="pass">
    <arg>string-length(&quot;this is 26 characters long&quot;)</arg>
    <output>26
</output>
  </base>
  <base type="pass">
    <arg>string-length(())</arg>
    <output>0</output>
  </base>
  <base type="pass">
    <arg>string-length()</arg>
    <output>21</output>
  </base>
  <base type="pass">
    <arg>replace(&quot;abracadabra&quot;, &quot;a.*?a&quot;, &quot;*&quot;)</arg>
    <output>*c*bra
</output>
  </base>
  <base type="pass">
    <arg>replace(&quot;abracadabra&quot;, &quot;a&quot;, &quot;&quot;)</arg>
    <output>brcdbr
</output>
  </base>
  <base type="pass">
    <arg>replace(&quot;abracadabra&quot;, &quot;a(.)&quot;, &quot;a$1$1&quot;)</arg>
    <output>abbraccaddabbra
</output>
  </base>
  <base type="pass">
    <arg>replace(&quot;Abracadabra&quot;, &quot;a.*a&quot;, &quot;*&quot;, &quot;i&quot;)</arg>
    <output>*
</output>
  </base>
  <base type="pass">
    <arg>replace(&quot;hello?&quot;, &quot;\?&quot;, &quot;!&quot;)</arg>
    <output>hello!
</output>
  </base>
  <base type="pass">
    <arg>replace(&quot;abracadabra&quot;, &quot;bra&quot;, &quot;abc&quot;, &quot;poo&quot;)</arg>
    <output>Invalid regular expression flags
</output>
  </base>
  <base type="pass">
    <arg>replace(&quot;abracadabra&quot;, &quot;&quot;, &quot;poo&quot;)</arg>
    <output>Replace pattern cannot match zero length string
</output>
  </base>
  <base type="pass">
    <arg>tokenize(&quot;The cat sat on the mat&quot;, &quot;\s+&quot;)</arg>
    <output>The
cat
sat
on
the
mat
</output>
  </base>
  <base type="pass">
    <arg>tokenize(&quot;1, 15, 24, 50&quot;, &quot;,\s*&quot;)</arg>
    <output>1
15
24
50
</output>
  </base>
  <base type="pass">
    <arg>tokenize(&quot;1,15,,24,50,&quot;, &quot;,&quot;)</arg>
    <output>1
15

24
50

</output>
  </base>
  <base type="pass">
    <arg>tokenize(&quot;aBaabaaaBaaaa&quot;, &quot;b&quot;, &quot;i&quot;)</arg>
    <output>a
aa
aaa
aaaa
</output>
  </base>
  <base type="pass">
    <arg>tokenize(&quot;,,&quot;, &quot;,&quot;)</arg>
    <output/>
  </base>
  <base type="pass">
    <arg>tokenize((), &quot;,&quot;)</arg>
    <output/>
  </base>
  <base type="pass">
    <arg>tokenize(&quot;asldfjk&quot;, &quot;&quot;)</arg>
    <output>a
s
l
d
f
j
k
</output>
  </base>
  <base type="pass">
    <arg>escape-uri('gopher://spinaltap.micro.umn.edu/00/Weather/California/Los%20Angeles#ocean', true())</arg>
    <output>gopher%3A%2F%2Fspinaltap.micro.umn.edu%2F00%2FWeather%2FCalifornia%2FLos%20Angeles#ocean
</output>
  </base>
  <base type="pass">
    <arg>escape-uri(&quot;gopher://spinaltap.micro.umn.edu/00/Weather/California/Los%20Angeles#ocean&quot;, false())</arg>
    <output>gopher://spinaltap.micro.umn.edu/00/Weather/California/Los%20Angeles#ocean
</output>
  </base>
  <base type="pass">
    <arg>escape-uri(&quot;&quot;, true())</arg>
    <output/>
  </base>
  <base type="pass">
    <arg>escape-uri(&quot;'&quot;, true())</arg>
    <output>'
</output>
  </base>
  <base comment="- Lexer error - should not be allowed &quot;\&quot;&quot;" type="fail">
    <arg>escape-uri(&quot;\&quot;&quot;, true())  </arg>
    <output>%22
</output>
  </base>
  <base type="pass">
    <arg>escape-uri(&quot;abcdefghijklmnopqrstuvwyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_.!~*'()&quot;, true())</arg>
    <output>abcdefghijklmnopqrstuvwyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_.!~*'()
</output>
  </base>
  <base type="pass">
    <arg>escape-uri(&quot;%a%A--%AB%05%A0%8B%ab%a0%8b&quot;, true())</arg>
    <output>%a%A--%AB%05%A0%8B%ab%a0%8b
</output>
  </base>
  <base type="pass">
    <arg>escape-uri(&quot;abcdefghijklmnopqrstuvwyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_.!~*'();/?:@&amp;=+$,#[]&quot;, false())</arg>
    <output>abcdefghijklmnopqrstuvwyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_.!~*'();/?:@&amp;=+$,#[]
</output>
  </base>
  <base type="pass">
    <arg>escape-uri(&quot;&quot;, false())</arg>
    <output/>
  </base>
  <base type="pass">
    <arg>string-to-codepoints(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;)</arg>
    <output>65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
</output>
  </base>
  <base type="pass">
    <arg>string-to-codepoints(' !#$%&amp;*+,-.0123456789:;&lt;=&gt;?@')</arg>
    <output>32
33
35
36
37
38
42
43
44
45
46
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
</output>
  </base>
  <base type="pass">
    <arg>codepoints-to-string((32,33,34,35,36,37,38,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64))</arg>
    <output> !&quot;#$%&amp;*+,-./0123456789:;&lt;=&gt;?@
</output>
  </base>
  <base type="pass">
    <arg>codepoints-to-string((65,97))</arg>
    <output>Aa
</output>
  </base>
  <base type="pass">
    <arg>codepoints-to-string((-1))</arg>
    <output>codepoint not legal.
</output>
  </base>

  <base type="pass">
    <arg>normalize-space()</arg>
    <output>Eclipse is fun.</output>
  </base>
  <base type="pass">
    <arg>normalize-space(&quot; hello   world &quot;)</arg>
    <output>hello world</output>
  </base>
  <base type="pass">
    <arg>normalize-space(&quot;already normalized&quot;)</arg>
    <output>already normalized</output>
  </base>
  <base comment="Lexer error - cannot handle unicode" type="fail">
    <arg>normalize-unicode(&quot;Sen~or&quot;, &quot;NFC&quot;)</arg>
    <output>Señor</output>
  </base>
  <base comment="Lexer error - cannot handle unicode" type="fail">
    <arg>normalize-unicode(&quot;Señor&quot;, &quot;NFD&quot;)</arg>
    <output>Sen~or</output>
  </base>
  <base type="pass">
    <arg>normalize-unicode(&quot;lalala&quot;, &quot;fully-normalized&quot;)</arg>
    <output>Unsupported normalization form</output>
  </base>
  <base type="pass">
    <arg>string((&quot;a&quot;, &quot;b&quot;, &quot;c&quot;))</arg>
    <output>SequenceType matching failed: the sequence contains more than one item [err:XPTY0004]
</output>
  </base>
  <base type="pass">
    <arg>string-join((&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), (&quot;x&quot;, &quot;y&quot;, &quot;z&quot;))</arg>
    <output>SequenceType matching failed: the sequence contains more than one item [err:XPTY0004]
</output>
  </base>
</test>