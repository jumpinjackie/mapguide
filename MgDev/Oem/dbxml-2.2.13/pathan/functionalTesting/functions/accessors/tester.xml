<?xml version="1.0" encoding="utf-8"?>
<test purpose="functions">
  <policies>
    <policy name="accessors">
      <addArg>test.xml</addArg>
    </policy>
    <default>
      <program>../../../samples/evaluator/eval</program>
    </default>
  </policies>
  <base type="pass">
    <arg>node-name(.)</arg>
    <output>:testcase
</output>
  </base>
  <base type="pass">
    <arg>node-name(/)</arg>
    <output/>
  </base>
  <base type="pass">
    <arg>node-name(/testcase/zvonimir[1])</arg>
    <output>:zvonimir
</output>
  </base>
  <base type="pass">
    <arg>node-name(/testcase/namespace-stuff/*[1])</arg>
    <output>http://sluggy.com:fred
</output>
  </base>
  <base type="pass">
    <arg>node-name(/testcase/yves[1]/@country)</arg>
    <output>:country
</output>
  </base>
  <base type="pass">
    <arg>node-name(/testcase/namespace-stuff/fred/@*[1])</arg>
    <output>http://sluggy.com:sthe
</output>
  </base>
  <base type="pass">
    <arg>node-name(/testcase/namespace::*[2])</arg>
    <output>:hee
</output>
  </base>
  <base type="pass">
    <arg>node-name(/testcase/prefix:default-namespace/namespace::*[1])</arg>
    <output>:xml
</output>
  </base>
  <base type="pass">
    <arg>node-name(/testcase/zvonimir[4]/text())</arg>
    <output/>
  </base>
  <base type="pass">
    <arg>node-name(/testcase/zvonimir[4]/processing-instruction())</arg>
    <output>:with
</output>
  </base>
  <base type="pass">
    <arg>node-name(/testcase/zvonimir[2]/comment())</arg>
    <output/>
  </base>
  <base type="pass">
    <arg>string(.)</arg>
    <output> 
  Some Text
  Some Text
  Some Text
  Some /different/ Text
  Some Text
  Some Text
  Some Text
  Some Text
  Some Text
  Some Text
  Some Text
  
  
  
  
  
  
    
    
    
    
    
  
  
  
    
      
        
      
      
    
    
      
      
        
      
    
    
      
      
      
    
  

</output>
  </base>
  <base type="pass">
    <arg>string(/testcase/*[1])</arg>
    <output>Some Text
</output>
  </base>
  <base type="pass">
    <arg>string(/testcase/yves[1]/@country)</arg>
    <output>germany
</output>
  </base>
  <base type="pass">
    <arg>string(/testcase/zvonimir[2]/comment())</arg>
    <output>commented
</output>
  </base>
  <base type="pass">
    <arg>string(/testcase/namespace-stuff/namespace::*[2])</arg>
    <output>http://sluggy.com
</output>
  </base>
  <base type="pass">
    <arg>string(/testcase/zvonimir[4]/text())</arg>
    <output>Some /different/ Text
</output>
  </base>
  <base type="pass">
    <arg>string(/testcase/zvonimir[4]/processing-instruction())</arg>
    <output>processing instructions
</output>
  </base>
  <base type="pass">
    <arg>string(1+1)</arg>
    <output>2
</output>
  </base>
  <base type="pass">
    <arg>string(false())</arg>
    <output>false
</output>
  </base>
  <base type="pass">
    <arg>string(3.0)</arg>
    <output>3
</output>
  </base>
  <base type="pass">
    <arg>data(.)</arg>
    <output> 
  Some Text
  Some Text
  Some Text
  Some /different/ Text
  Some Text
  Some Text
  Some Text
  Some Text
  Some Text
  Some Text
  Some Text
  
  
  
  
  
  
    
    
    
    
    
  
  
  
    
      
        
      
      
    
    
      
      
        
      
    
    
      
      
      
    
  

</output>
  </base>
  <base type="pass">
    <arg>data(/)</arg>
    <output>Some Text
  Some Text
  Some Text
  Some /different/ Text
  Some Text
  Some Text
  Some Text
  Some Text
  Some Text
  Some Text
  Some Text
</output>
  </base>
  <base type="pass">
    <arg>data(/testcase/*[1])</arg>
    <output>Some Text
</output>
  </base>
  <base type="pass">
    <arg>data(/testcase/yves[1]/@country)</arg>
    <output>germany
</output>
  </base>
  <base type="pass">
    <arg>data(/testcase/zvonimir[2]/comment())</arg>
    <output>commented</output>
  </base>
  <base type="pass">
    <arg>data(/testcase/namespace::*[2])</arg>
    <output>http://theborg.org</output>
  </base>
  <base type="pass">
    <arg>data(/testcase/namespace::*)</arg>
    <output>http://www.w3.org/XML/1998/namespace
http://theborg.org
lala
http://www.w3.org/2001/XMLSchema-instance</output>
  </base>
  <base type="pass">
    <arg>data(/testcase/zvonimir[4]/text())</arg>
    <output>Some /different/ Text
</output>
  </base>
  <base type="pass">
    <arg>data((1,/testcase/zvonimir[4]/processing-instruction(),&quot;hello&quot;))</arg>
    <output>1
processing instructions
hello</output>
  </base>
  <base comment="type info in xerces is broken, tries to convert the attribute to an anyURI" type="fail">
    <arg>data(/testcase/namespace-stuff/fred/@*[1])</arg>
    <output>blues today
</output>
  </base>
  <base type="pass">
    <arg>base-uri(.) </arg>
    <output>file://$PWD$/test.xml
</output>
  </base>
  <base type="pass">
    <arg>base-uri(/) </arg>
    <output>file://$PWD$/test.xml
</output>
  </base>
  <base type="pass">
    <arg>base-uri(/testcase) </arg>
    <output>file://$PWD$/test.xml
</output>
  </base>
  <base type="pass">
    <arg>base-uri(/testcase/yves[1]/@country)</arg>
    <output>file://$PWD$/test.xml
</output>
  </base>
  <base type="pass">
    <arg>base-uri(/testcase/zvonimir[2]/comment())</arg>
    <output>file://$PWD$/test.xml
</output>
  </base>
  <base type="pass">
    <arg>base-uri(/testcase/namespace::*[1])</arg>
    <output/>
  </base>
  <base type="pass">
    <arg>base-uri(/testcase/zvonimir[4]/text())</arg>
    <output>file://$PWD$/test.xml
</output>
  </base>
  <base type="pass">
    <arg>base-uri(/testcase/zvonimir[4]/processing-instruction())</arg>
    <output>file://$PWD$/test.xml</output>
  </base>
  <base type="pass">
    <arg>document-uri(/testcase)</arg>
    <output/>
  </base>
  <base type="pass">
    <arg>document-uri(/)</arg>
    <output>file://$PWD$/test.xml</output>
  </base>
</test>