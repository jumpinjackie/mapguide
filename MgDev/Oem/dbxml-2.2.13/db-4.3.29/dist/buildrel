# $Id: buildrel,v 1.65 2004/11/09 01:26:29 bostic Exp $
#
# Build the distribution package.
#
# A set of commands intended to be cut and pasted into a csh window.

# Development tree, release home.
setenv D `pwd`

# Update the release number.
cd $D/dist
cvs -q update RELEASE
vi RELEASE
setenv VERSION `sh -c '. RELEASE; echo $DB_VERSION'`
echo "Version: $VERSION"

# Make sure the source tree is up-to-date
cd $D && cvs -q update

# Build auto-generated files.
cd $D/dist && sh s_all

# Commit all of the changes.
cd $D && cvs -q commit

# Copy a development tree into a release tree.
setenv R /var/tmp/db-$VERSION
rm -rf $R && mkdir -p $R
cd $D && cvs -q status | \
    grep "Repository revision" | \
    sed -e 's;.*CVSROOT/db/;;' \
        -e 's;.*CVSROOT/;;' \
	-e 's;,v$;;' | pax -rw $R/

# Build the documentation, copy it into place.
cd db_docs && cvs -q update
cd db_docs && sh build $D clean && sh build $D |& sed '/.html$/d'
cd je/docs_src && sh build db ../../db
rm -rf $R/docs && cp -r $D/docs $R/docs

# Remove source directories we don't distribute.
cd $R && rm -rf docs_src docs/api_java
cd $R && rm -rf test/TODO test/upgrade test_perf test_purify
cd $R && rm -rf test_server test_thread test_vxworks test_xa
cd $R && rm -rf java/src/com/sleepycat/xa

# Fix symbolic links and permissions.
cd $R/dist && sh s_perm
cd $R/dist && sh s_symlink

# Build a version and smoke test.
cd $R && rm -rf build_run && mkdir build_run
cd $R/build_run && ~bostic/bin/dbconf && make >& mklog
cd $R/build_run && make ex_access && ./ex_access

# Check the install
cd $R/build_run && make prefix=`pwd`/BDB install

# Build a small-footprint version and smoke test.
cd $R && rm -rf build_run && mkdir build_run
cd $R/build_run && ../dist/configure --enable-smallbuild && make >& mklog
cd $R/build_run && make ex_access && ./ex_access

# Remove the build directory
cd $R && rm -rf build_run

# ACQUIRE ROOT PRIVILEGES
cd $R && find . -type d | xargs chmod 775
cd $R && find . -type f | xargs chmod 444
cd $R && chmod 664 build_win32/*.dsp
cd $R/dist && sh s_perm
chown -R 100 $R
chgrp -R 100 $R
# DISCARD ROOT PRIVILEGES

# Check for file names differing only in case.
cd $R && find . | sort -f | uniq -ic | sed '/1 /d'

# Create the crypto tar archive release.
setenv T "$R/../db-$VERSION.tar.gz"
cd $R/.. && tar cf - db-$VERSION | gzip --best > $T
chmod 444 $T

# Check the path length.
gzcat $T | tar tf - |\
awk '{ if (length() > 99) print "Path length: " length() " bytes: " $0;}'

# Create the non-crypto tree.
setenv RNC "$R/../db-$VERSION.NC"
rm -rf $RNC $R/../__TMP && mkdir $R/../__TMP
cd $R/../__TMP && gzcat $T | tar xpf - && mv -i db-$VERSION $RNC
cd $R && rm -rf $R/../__TMP
cd $RNC/dist && sh s_crypto

# ACQUIRE ROOT PRIVILEGES
cd $RNC && find . -type d | xargs chmod 775
cd $RNC && find . -type f | xargs chmod 444
cd $RNC && chmod 664 build_win32/*.dsp
cd $RNC/dist && sh s_perm
chown -R 100 $RNC
chgrp -R 100 $RNC
# DISCARD ROOT PRIVILEGES

# Create the non-crypto tar archive release.
setenv T "$R/../db-$VERSION.NC.tar.gz"
cd $RNC/.. && tar cf - db-$VERSION.NC | gzip --best > $T
chmod 444 $T

# Check the path length.
gzcat $T | tar tf - |\
awk '{ if (length() > 99) print "Path length: " length() " bytes: " $0;}'

# Remove tags files.  They're large and we don't want to store symbolic links
# in the zip archive for portability reasons.
# ACQUIRE ROOT PRIVILEGES
cd $R && rm -f `find . -name 'tags'`
cd $RNC && rm -f `find . -name 'tags'`
# DISCARD ROOT PRIVILEGES

# Create the crypto zip archive release.
setenv T "$R/../db-$VERSION.zip"
cd $R/.. && zip -r - db-$VERSION > $T
chmod 444 $T

# Create the non-crypto zip archive release.
setenv T "$R/../db-$VERSION.NC.zip"
cd $RNC/.. && zip -r - db-$VERSION.NC > $T
chmod 444 $T
