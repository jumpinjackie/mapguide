/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "1"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
#define SWIG_QUOTE_STRING(x) #x
#define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
#define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
#define SWIG_TYPE_TABLE_NAME
#endif

#include <string.h>

#ifndef SWIGINLINE
#if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#  define SWIGINLINE inline
#else
#  define SWIGINLINE
#endif
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/
#ifndef SWIGRUNTIME
#define SWIGRUNTIME static
#endif
#ifndef SWIGRUNTIMEINLINE
#define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Register a type mapping with the type-checking
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeRegisterTL(swig_type_info **tl, swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *tl;
  while (tc) {
    /* check simple type equivalence */
    int typeequiv = (strcmp(tc->name, ti->name) == 0);   
    /* check full type equivalence, resolving typedefs */
    if (!typeequiv) {
      /* only if tc is not a typedef (no '|' on it) */
      if (tc->str && ti->str && !strstr(tc->str,"|")) {
	typeequiv = SWIG_TypeEquiv(ti->str,tc->str);
      }
    }
    if (typeequiv) {
      /* Already exists in the table.  Just add additional types to the list */
      if (ti->clientdata) tc->clientdata = ti->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *tl;
  *tl = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;

  return ret;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
  Search for a swig_type_info structure
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryTL(swig_type_info *tl, const char *name) {
  swig_type_info *ty = tl;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientDataTL(swig_type_info *tl, swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata) return;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientDataTL(tl,tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register int d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
  This function will propagate the clientdata field of type to any new
  swig_type_info structures that have been added into the list of
  equivalent types.  It is like calling SWIG_TypeClientData(type,
  clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientDataTL(swig_type_info *tl, swig_type_info *type) {
  swig_type_info *equiv = type->next;
  swig_type_info *tc;
  if (!type->clientdata) return;
  while (equiv) {
    if (!equiv->converter) {
      tc = tl;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0) && !tc->clientdata)
          SWIG_TypeClientDataTL(tl,tc, type->clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/


#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if !defined(STATIC_LINKED)
#    define SWIGEXPORT(a) __declspec(dllexport) a
#  else
#    define SWIGEXPORT(a) a
#  endif
#else
#  define SWIGEXPORT(a) a
#endif

#ifdef __cplusplus
extern "C" {
#endif


/*************************************************************************/


/* The static type info list */

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;
  

/* Register a type mapping with the type-checking */
static swig_type_info *
SWIG_TypeRegister(swig_type_info *ti) {
  return SWIG_TypeRegisterTL(swig_type_list_handle, ti);
}

/* Search for a swig_type_info structure */
static swig_type_info *
SWIG_TypeQuery(const char *name) {
  return SWIG_TypeQueryTL(*swig_type_list_handle, name);
}

/* Set the clientdata field for a type */
static void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientDataTL(*swig_type_list_handle, ti, clientdata);
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
static void
SWIG_PropagateClientData(swig_type_info *type) {
  SWIG_PropagateClientDataTL(*swig_type_list_handle, type);
}

#ifdef __cplusplus
}
#endif

/*
 * $Header: /a/CVSROOT/xml/src/tcl/dbxml_tcl_wrap.cpp,v 1.175 2005/12/08 22:38:25 gmf Exp $
 * 
 * swigtcl8.swg
 */

#include <tcl.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Constant table */

#define SWIG_TCL_INT     1
#define SWIG_TCL_FLOAT   2
#define SWIG_TCL_STRING  3
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Swig fail macro */

#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  char              **base_names;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

#define SWIG_NewPointerObj(ptr, type, flags) \
  SWIG_Tcl_NewPointerObj(ptr, type, flags)
#define SWIG_ConvertPtr(oc, ptr, ty, flags) \
  SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) \
  SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty, flags)
#define SWIG_MakePtr(c, ptr, ty, flags) \
  SWIG_Tcl_MakePtr(c, ptr, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type, flags) \
  SWIG_Tcl_NewPackedObj(ptr, sz, type, flags)
#define SWIG_GetArgs SWIG_Tcl_GetArgs
#define SWIG_PointerTypeFromString(c) \
  SWIG_Tcl_PointerTypeFromString(c)
#define SWIG_Acquire(ptr) \
  SWIG_Tcl_Acquire(ptr)
#define SWIG_Disown(ptr) \
  SWIG_Tcl_Disown(ptr)
#define SWIG_Thisown(ptr) \
  SWIG_Tcl_Thisown(ptr)
#define SWIG_InstallConstants(interp, constants) \
  SWIG_Tcl_InstallConstants(interp, constants)
#define SWIG_GetConstant(key) \
  SWIG_Tcl_GetConstant(key)
#define SWIG_NewInstanceObj(thisvalue, type, flags) \
  SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)
#define SWIG_ObjectConstructor SWIG_Tcl_ObjectConstructor
#define SWIG_MethodCommand SWIG_Tcl_MethodCommand
#define SWIG_ObjectDelete SWIG_Tcl_ObjectDelete

static void 
SWIG_Tcl_LookupTypePointer(Tcl_Interp *interp) {
  char buf[512];
  char *data;
  
  /* first check if pointer already created */
  data = (char *) Tcl_GetVar(interp, "swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &swig_type_list_handle, sizeof(swig_type_info **));
  } else {
    /* create a new pointer */
    data = SWIG_PackData(buf, &swig_type_list_handle, sizeof(swig_type_info **));
    *data = 0;
    Tcl_SetVar(interp, "swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, 0);
  }
}

/* Object support */
static Tcl_HashTable  swigobjectTable;
static int            swigobjectTableinit = 0;

/* Acquire ownership of a pointer */
static void
SWIG_Tcl_Acquire(void *ptr) {
  Tcl_HashEntry *entryPtr;
  int newobj;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  entryPtr = Tcl_CreateHashEntry(&swigobjectTable, (char *) ptr, &newobj);
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
static int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr;
  if (!swigobjectTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigobjectTable, (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

static int
SWIG_Tcl_Thisown(void *ptr) {
  if (!swigobjectTableinit) return 0;
  if (Tcl_FindHashEntry(&swigobjectTable, (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
static int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return TCL_OK;
    /* Hmmm. It could be an object name. */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      c = Tcl_GetStringFromObj(result, NULL);
      continue;
    }
    Tcl_ResetResult(interp);
    if (flags & SWIG_POINTER_EXCEPTION) 
      Tcl_SetResult(interp, (char *) "Type error. Expected a pointer", TCL_STATIC);
    return TCL_ERROR;
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if ((!tc) && (flags & SWIG_POINTER_EXCEPTION)) {
      Tcl_SetResult(interp, (char *) "Type error. Expected ", TCL_STATIC);
      Tcl_AppendElement(interp, (char *) ty->name);
      return TCL_ERROR;
    } else if (!tc) {
      Tcl_ResetResult(interp);
      return TCL_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    *ptr = SWIG_TypeCast(tc,(void *) *ptr);
  }
  return TCL_OK;
}

/* Convert a pointer value */
static SWIGINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
static char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
static int
SWIG_Tcl_ConvertPacked(Tcl_Interp *interp, Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return TCL_OK;

type_error:

  if (flags) {
    if (ty) {
      Tcl_SetResult(interp, (char *) "Type error. Expected ", TCL_STATIC);
      Tcl_AppendElement(interp, (char *) ty->name);
      return TCL_ERROR;
    } else {
      Tcl_SetResult(interp, (char *) "Expected packed data.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  return TCL_ERROR;
}


/* Take a pointer and convert it to a string */
static void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
static SWIGINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[512];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

static Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type, int flags) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  flags = 0;
  return Tcl_NewStringObj(result,-1);
}

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

/* Install Constants */
static void
SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
  int i;
  Tcl_Obj *obj;
  Tcl_HashEntry *entryPtr;
  int            newobj;

  if (!swigconstTableinit) {
    Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
    swigconstTableinit = 1;
  }
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_TCL_INT:
      obj = Tcl_NewIntObj(constants[i].lvalue);
      break;
    case SWIG_TCL_FLOAT:
      obj = Tcl_NewDoubleObj(constants[i].dvalue);
      break;
    case SWIG_TCL_STRING:
      obj = Tcl_NewStringObj((char *) constants[i].pvalue,-1);
      break;
    case SWIG_TCL_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_TCL_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype),0);
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      Tcl_ObjSetVar2(interp,Tcl_NewStringObj(constants[i].name,-1), NULL, obj, TCL_GLOBAL_ONLY);
      entryPtr = Tcl_CreateHashEntry(&swigconstTable, constants[i].name, &newobj);
      Tcl_SetHashValue(entryPtr, (ClientData) obj);
    }
  }
}

static Tcl_Obj *
SWIG_Tcl_GetConstant(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  printf("Searching %s\n", key);
  return 0;
}

/* Get arguments */
static int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong # args. ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_GetConstant(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, SWIG_POINTER_EXCEPTION) == TCL_ERROR) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

static void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
static int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQuery(cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    meth = cls->methods;
    /* Check for methods */
    while (meth && meth->name) {
      if (strcmp(meth->name,method) == 0) {
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (*meth->method)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
      }
      meth++;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
  }

  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      if (!strstr(strchr(cr,':'), meth->name))
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* Function to create objects */
static int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj          *newObj = 0;
    void             *thisvalue = 0;
    swig_instance   *newinst = 0;
    swig_class      *classptr = (swig_class *) clientData;
    swig_wrapper     cons = 0;
    char             *name = 0;
    int               firstarg = 0;
    int               thisarg = 0;
    int               destroy = 1;

    if (!classptr) {
      Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
      return TCL_ERROR;
    }
    cons = classptr->constructor;
    if (objc > 1) {
      char *s = Tcl_GetStringFromObj(objv[1],NULL);
      if (strcmp(s,"-this") == 0) {
        thisarg = 2;
        cons = 0;
      } else if (strcmp(s,"-args") == 0) {
        firstarg = 1;
      } else if (objc == 2) {
        firstarg = 1;
        name = s;
      } else if (objc >= 3) {
        char *s1;
        name = s;
        s1 = Tcl_GetStringFromObj(objv[2],NULL);
        if (strcmp(s1,"-this") == 0) {
          thisarg = 3;
          cons = 0;
        } else {
          firstarg = 1;
        }
      }
    }
    if (cons) {
      int result;
      result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
      if (result != TCL_OK) {
        return result;
      }
      newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else if (thisarg > 0) {
      if (thisarg < objc) {
        destroy = 0;
        newObj = Tcl_DuplicateObj(objv[thisarg]);
        if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
      } else {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
    } else {
      Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
      return TCL_ERROR;
    }
    if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), SWIG_POINTER_EXCEPTION) == TCL_ERROR) {
      Tcl_DecrRefCount(newObj);
      return TCL_ERROR;
    }
    newinst = (swig_instance *) malloc(sizeof(swig_instance));
    newinst->thisptr = newObj;
    Tcl_IncrRefCount(newObj);
    newinst->thisvalue = thisvalue;
    newinst->classptr = classptr;
    newinst->destroy = destroy;
    if (destroy) {
      SWIG_Acquire(thisvalue);
    }
    newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
    return TCL_OK;
}


/* This function takes the current result and turns it into an object command */
static Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if ((type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* Contract support */

#define SWIG_contract_assert(expr, msg)  if (!(expr)) { Tcl_SetResult(interp, (char *) msg, TCL_STATIC ); goto fail; } else

#ifdef __cplusplus
}
#endif






/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_XmlResults swig_types[0] 
#define  SWIGTYPE_size_t swig_types[1] 
#define  SWIGTYPE_p_XmlManager swig_types[2] 
#define  SWIGTYPE_p_XmlQueryContext swig_types[3] 
#define  SWIGTYPE_p_XmlUpdateContext swig_types[4] 
#define  SWIGTYPE_p_XmlIndexSpecification swig_types[5] 
#define  SWIGTYPE_p_XmlValue swig_types[6] 
#define  SWIGTYPE_p_XmlStatistics swig_types[7] 
#define  SWIGTYPE_p_unsigned_int swig_types[8] 
#define  SWIGTYPE_p_XmlInputStream swig_types[9] 
#define  SWIGTYPE_p_XmlMetaData swig_types[10] 
#define  SWIGTYPE_p_XmlQueryExpression swig_types[11] 
#define  SWIGTYPE_p_XmlIndexLookup swig_types[12] 
#define  SWIGTYPE_p_DbTxn swig_types[13] 
#define  SWIGTYPE_ptrdiff_t swig_types[14] 
#define  SWIGTYPE_p_XmlContainer swig_types[15] 
#define  SWIGTYPE_p_DbEnv swig_types[16] 
#define  SWIGTYPE_p_XmlModify swig_types[17] 
#define  SWIGTYPE_p_XmlDocument swig_types[18] 
#define  SWIGTYPE_p_XmlTransaction swig_types[19] 
#define  SWIGTYPE_p_XmlData swig_types[20] 
#define  SWIGTYPE_p_int swig_types[21] 
#define  SWIGTYPE_p_XmlMetaDataIterator swig_types[22] 
#define  SWIGTYPE_p_XmlIndexDeclaration swig_types[23] 
static swig_type_info *swig_types[25];

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Dbxml_tcl_Init
#define SWIG_name    "dbxml_tcl"
#define SWIG_prefix  ""
#define SWIG_version "0.0"


#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT(int) SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif



#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


#define SWIG_exception(a,b)   { Tcl_SetResult(interp,b,TCL_VOLATILE); SWIG_fail; }


#include <stdexcept>


#include "db_cxx.h"
#include "dbxml/DbXml.hpp"
#include <errno.h>
#include <fstream>

using namespace DbXml;

class XmlIndexDeclaration {
public:
	XmlIndexDeclaration() {}
	XmlIndexDeclaration(const std::string &uri, const std::string &name, const std::string &index) : uri(uri), name(name), index(index) {}
#ifndef SWIGJAVA	
	const std::string &get_uri() const { return uri; }
	const std::string &get_name() const { return name; }
	const std::string &get_index() const { return index; }
#endif
	std::string uri, name, index;
};

class XmlMetaData {
public:
	XmlMetaData() {}
	XmlMetaData(const std::string &uri, const std::string &name, const
		    XmlValue &value) : uri(uri), name(name), value(value) {}
	
	const std::string &get_uri() const { return uri; }
	const std::string &get_name() const { return name; }
	const XmlValue &get_value() const { return value; }
	std::string uri, name;
	XmlValue value;
};



#include <string>


extern "C" void *_NameToPtr(const char *);
#define NAME_TO_ENV(name) (DB_ENV *)_NameToPtr((name))
#define NAME_TO_TXN(name) (DB_TXN *)_NameToPtr((name))

static XmlInputStream *XmlManager_createStdInInputStream(XmlManager const *self){
		return self->createStdInInputStream();
	}
static XmlInputStream *XmlManager_createLocalFileInputStream(XmlManager const *self,std::string const &filename){
		return self->createLocalFileInputStream(filename);
	}
static XmlInputStream *XmlManager_createMemBufInputStream__SWIG_0(XmlManager const *self,char const *bytes,unsigned int const count,char const *id,bool const adopt=false){
		return self->createMemBufInputStream(bytes,
						     count,
						     id, adopt);
	}
static XmlInputStream *XmlManager_createMemBufInputStream__SWIG_2(XmlManager const *self,char const *bytes,unsigned int const count,bool const copyBuffer){
		return self->createMemBufInputStream(bytes,
						     count,
						     copyBuffer);
	}
static XmlInputStream *XmlManager_createURLInputStream__SWIG_0(XmlManager const *self,std::string const &baseId,std::string const &systemId,std::string const &publicId){
		return self->createURLInputStream(baseId, systemId, publicId);
	}
static XmlInputStream *XmlManager_createURLInputStream__SWIG_1(XmlManager const *self,std::string const &baseId,std::string const &systemId){
		return self->createURLInputStream(baseId, systemId);
	}
static XmlContainer *XmlManager_createContainer__SWIG_0(XmlManager *self,std::string const &name){
		return new XmlContainer(self->createContainer(name));
	}
static XmlContainer *XmlManager_createContainer__SWIG_1(XmlManager *self,XmlTransaction &txn,std::string const &name){
		return new XmlContainer(self->createContainer(txn, name));
	}
static XmlContainer *XmlManager_openContainer__SWIG_0(XmlManager *self,XmlTransaction &txn,std::string const &name){
		return new XmlContainer(self->openContainer(txn, name));
	}
static XmlContainer *XmlManager_openContainer__SWIG_1(XmlManager *self,std::string const &name){
		return new XmlContainer(self->openContainer(name));
	}
static XmlContainer *XmlManager_createContainer__SWIG_2(XmlManager *self,std::string const &name,u_int32_t flags,enum XmlContainer::ContainerType type=XmlContainer::NodeContainer,int mode=0){
		return new XmlContainer(
			self->createContainer(name, flags, type, mode));
	 }
static XmlContainer *XmlManager_createContainer__SWIG_5(XmlManager *self,XmlTransaction &txn,std::string const &name,u_int32_t flags,enum XmlContainer::ContainerType type=XmlContainer::NodeContainer,int mode=0){
		return new XmlContainer(self->createContainer(txn, name, flags,
							      type, mode));
        }
static XmlContainer *XmlManager_openContainer__SWIG_2(XmlManager *self,std::string const &name,u_int32_t flags){
		return new XmlContainer(self->openContainer(name, flags));
        }
static XmlContainer *XmlManager_openContainer__SWIG_3(XmlManager *self,XmlTransaction &txn,std::string const &name,u_int32_t flags){
		return new XmlContainer(self->openContainer(txn, name, flags));
        }
static XmlContainer *XmlManager_openContainer__SWIG_4(XmlManager *self,std::string const &name,u_int32_t flags,enum XmlContainer::ContainerType type,int mode=0){
	    return new XmlContainer(self->openContainer(name,
						    flags, type, mode));
        }
static XmlContainer *XmlManager_openContainer__SWIG_6(XmlManager *self,XmlTransaction &txn,std::string const &name,u_int32_t flags,enum XmlContainer::ContainerType type,int mode=0){
	    return new XmlContainer(self->openContainer(txn, name,
						    flags, type, mode));
        }
static void XmlManager_dumpContainer(XmlManager *self,std::string const &name,char const *filename){
		std::ofstream out(filename);
		self->dumpContainer(name, &out);
		out.close();
	}
static void XmlManager_loadContainer(XmlManager *self,std::string const &name,char const *filename,XmlUpdateContext &uc){
		std::ifstream in(filename);
		unsigned long lineno = 0;
		self->loadContainer(name, &in, &lineno, uc);
		in.close();
	}
static void XmlManager_verifyContainer__SWIG_0(XmlManager *self,std::string const &name,char const *filename,u_int32_t flags=0){
		std::ofstream out;
		if (flags & DB_SALVAGE)
			out.open(filename);
		self->verifyContainer(name, &out, flags);
		if (flags & DB_SALVAGE)
			out.close();
	}
static XmlDocument *XmlManager_createDocument(XmlManager *self){
		return new XmlDocument(self->createDocument());
	}
static XmlQueryContext *XmlManager_createQueryContext__SWIG_0(XmlManager *self,enum XmlQueryContext::ReturnType rt,enum XmlQueryContext::EvaluationType et){
		return new XmlQueryContext(self->createQueryContext(rt, et));
	}
static XmlQueryContext *XmlManager_createQueryContext__SWIG_1(XmlManager *self){
		return new XmlQueryContext(self->createQueryContext(
			XmlQueryContext::LiveValues, XmlQueryContext::Eager));
	}
static XmlQueryContext *XmlManager_createQueryContext__SWIG_2(XmlManager *self,enum XmlQueryContext::ReturnType rt){
		return new XmlQueryContext(self->createQueryContext(rt, XmlQueryContext::Eager));
	}
static XmlUpdateContext *XmlManager_createUpdateContext(XmlManager *self){
		return new XmlUpdateContext(self->createUpdateContext());
	}
static XmlQueryExpression *XmlManager_prepare__SWIG_0(XmlManager *self,std::string const &query,XmlQueryContext &context){
		return new XmlQueryExpression(self->prepare(query, context));
	}
static XmlQueryExpression *XmlManager_prepare__SWIG_1(XmlManager *self,XmlTransaction &txn,std::string const &query,XmlQueryContext &context){
		return new XmlQueryExpression(self->prepare(
						      txn,query, context));
	}
static XmlResults *XmlManager_query__SWIG_0(XmlManager *self,std::string const &query,XmlQueryContext &context,u_int32_t flags){
		return new XmlResults(self->query(query, context, flags));
	}
static XmlResults *XmlManager_query__SWIG_1(XmlManager *self,XmlTransaction &txn,std::string const &query,XmlQueryContext &context,u_int32_t flags){
		return new XmlResults(self->query(txn, query, context, flags));
	}
static XmlResults *XmlManager_query__SWIG_2(XmlManager *self,std::string const &query,XmlQueryContext &context){
		return new XmlResults(self->query(query, context, 0));
	}
static XmlResults *XmlManager_query__SWIG_3(XmlManager *self,XmlTransaction &txn,std::string const &query,XmlQueryContext &context){
		return new XmlResults(self->query(txn, query, context, 0));
	}
static XmlResults *XmlManager_createResults(XmlManager *self){
		return new XmlResults(self->createResults());
	}
static XmlModify *XmlManager_createModify(XmlManager *self){
		return new XmlModify(self->createModify());
	}
static XmlTransaction *XmlManager_createTransaction__SWIG_0(XmlManager *self,DbTxn *toAdopt){
		return new XmlTransaction(self->createTransaction(toAdopt));
        }
static XmlTransaction *XmlManager_createTransaction__SWIG_1(XmlManager *self,u_int32_t flags){
		return new XmlTransaction(self->createTransaction(flags));
	}
static XmlTransaction *XmlManager_createTransaction__SWIG_2(XmlManager *self){
		return new XmlTransaction(self->createTransaction((u_int32_t)0));
        }
static XmlIndexLookup *XmlManager_createIndexLookup__SWIG_0(XmlManager *self,XmlContainer &cont,std::string const &uri,std::string const &name,std::string const &index,XmlValue const &value=XmlValue(),enum XmlIndexLookup::Operation op=XmlIndexLookup::NONE){
		return new XmlIndexLookup(self->createIndexLookup(cont, uri,name,
								  index, value,
								  op));
	}
static XmlResults *XmlIndexLookup_execute__SWIG_0(XmlIndexLookup const *self,XmlQueryContext &context,u_int32_t flags=0){
		return new XmlResults(self->execute(context, flags));
	}
static XmlResults *XmlIndexLookup_execute__SWIG_2(XmlIndexLookup const *self,XmlTransaction &txn,XmlQueryContext &context,u_int32_t flags=0){
		return new XmlResults(self->execute(txn, context, flags));
	}
static XmlIndexSpecification *XmlContainer_getIndexSpecification__SWIG_0(XmlContainer const *self){
		return new XmlIndexSpecification(self->getIndexSpecification());
	}
static XmlIndexSpecification *XmlContainer_getIndexSpecification__SWIG_1(XmlContainer const *self,XmlTransaction &txn){
		 return new XmlIndexSpecification(
			 self->getIndexSpecification(txn));
        }
static XmlIndexSpecification *XmlContainer_getIndexSpecification__SWIG_2(XmlContainer const *self,XmlTransaction &txn,u_int32_t flags){
		 return new XmlIndexSpecification(
			 self->getIndexSpecification(txn, flags));
	 }
static XmlDocument *XmlContainer_getDocument__SWIG_0(XmlContainer *self,std::string const &name){
		return new XmlDocument(self->getDocument(name, 0));
	}
static XmlDocument *XmlContainer_getDocument__SWIG_1(XmlContainer *self,XmlTransaction &txn,std::string const &name){
		return new XmlDocument(self->getDocument(txn, name, 0));
	}
static XmlDocument *XmlContainer_getDocument__SWIG_2(XmlContainer *self,std::string const &name,u_int32_t flags){
		return new XmlDocument(self->getDocument(name, flags));
	}
static XmlDocument *XmlContainer_getDocument__SWIG_3(XmlContainer *self,XmlTransaction &txn,std::string const &name,u_int32_t flags){
		return new XmlDocument(self->getDocument(txn, name, flags));
	}
static XmlResults *XmlContainer_getAllDocuments__SWIG_0(XmlContainer *self,u_int32_t flags){
		   return new XmlResults(self->getAllDocuments(flags));
	}
static XmlResults *XmlContainer_getAllDocuments__SWIG_1(XmlContainer *self,XmlTransaction &txn,u_int32_t flags){
		   return new XmlResults(self->getAllDocuments(txn, flags));
	}
static XmlResults *XmlContainer_lookupIndex__SWIG_0(XmlContainer *self,XmlQueryContext &context,std::string const &uri,std::string const &name,std::string const &index,XmlValue const &value=XmlValue(),u_int32_t flags=0){
		return new XmlResults(
			self->lookupIndex(context, uri, name, index,
					  value, flags));
	}
static XmlResults *XmlContainer_lookupIndex__SWIG_3(XmlContainer *self,XmlQueryContext &context,std::string const &uri,std::string const &name,std::string const &parent_uri,std::string const &parent_name,std::string const &index,XmlValue const &value=XmlValue(),u_int32_t flags=0){
		return new XmlResults(self->lookupIndex(context, uri, name,
							parent_uri, parent_name,
							index, value, flags));
	}
static XmlResults *XmlContainer_lookupIndex__SWIG_6(XmlContainer *self,XmlTransaction &txn,XmlQueryContext &context,std::string const &uri,std::string const &name,std::string const &index,XmlValue const &value=XmlValue(),u_int32_t flags=0){
                return new XmlResults(self->lookupIndex(txn, context, uri, name,
							index, value, flags));
        }
static XmlResults *XmlContainer_lookupIndex__SWIG_9(XmlContainer *self,XmlTransaction &txn,XmlQueryContext &context,std::string const &uri,std::string const &name,std::string const &parent_uri,std::string const &parent_name,std::string const &index,XmlValue const &value=XmlValue(),u_int32_t flags=0){
	        return new XmlResults(self->lookupIndex(txn, context, uri, name,
							parent_uri, parent_name,
							index, value, flags));
	}
static XmlStatistics *XmlContainer_lookupStatistics__SWIG_0(XmlContainer *self,std::string const &uri,std::string const &name,std::string const &index,XmlValue const &value=XmlValue()){
		return new XmlStatistics(self->lookupStatistics(uri, name, index,
								value));
	}
static XmlStatistics *XmlContainer_lookupStatistics__SWIG_2(XmlContainer *self,std::string const &uri,std::string const &name,std::string const &parent_uri,std::string const &parent_name,std::string const &index,XmlValue const &value=XmlValue()){
		return new XmlStatistics(self->lookupStatistics(uri, name,
								parent_uri,
								parent_name,
								index, value));
	}
static XmlStatistics *XmlContainer_lookupStatistics__SWIG_4(XmlContainer *self,XmlTransaction &txn,std::string const &uri,std::string const &name,std::string const &index,XmlValue const &value=XmlValue()){
		return new XmlStatistics(self->lookupStatistics(txn, uri, name,
								index, value));
	}
static XmlStatistics *XmlContainer_lookupStatistics__SWIG_6(XmlContainer *self,XmlTransaction &txn,std::string const &uri,std::string const &name,std::string const &parent_uri,std::string const &parent_name,std::string const &index,XmlValue const &value=XmlValue()){
		return new XmlStatistics(self->lookupStatistics(txn, uri, name,
								parent_uri,
								parent_name,
								index, value));
	}
static std::string XmlDocument_getContentAsString(XmlDocument const *self){
		std::string s;
		return self->getContent(s);
	}
static XmlData const *XmlDocument_getContent(XmlDocument const *self){
		return new XmlData(self->getContent());
	}
static XmlData const *XmlDocument_getMetaData__SWIG_2(XmlDocument *self,std::string const &uri,std::string const &name){
		XmlData data;
		bool ret = self->getMetaData(uri, name, data);
		if (ret)
			return new XmlData(data);
		return 0;
	}
static XmlMetaDataIterator *XmlDocument_getMetaDataIterator(XmlDocument const *self){
		return new XmlMetaDataIterator(self->getMetaDataIterator());
	}
static XmlMetaData *XmlMetaDataIterator_next(XmlMetaDataIterator *self){
		XmlMetaData *idecl = new XmlMetaData;
		if (self->next(idecl->uri, idecl->name, idecl->value))
			return idecl;
		else
			delete idecl;
		return NULL;
	}
static XmlValue *XmlQueryContext_getVariableValue(XmlQueryContext const *self,std::string const &name){
		XmlValue *value = new XmlValue;
		try {
			if (self->getVariableValue(name, *value))
				return value;
			else {
				delete value;
				return NULL;
			}
		}
		catch(...) {
			delete value;
			throw;
		}
	}
static XmlResults *XmlQueryContext_getVariableValues(XmlQueryContext const *self,std::string const &name){
		XmlResults *res = new XmlResults();
		try {
			if (self->getVariableValue(name, *res))
				return res;
			else {
				delete res;
				return NULL;
			}
		}
		catch(...) {
			delete res;
			throw;
		}
	}
static std::string const XmlQueryContext_get(XmlQueryContext const *self,char const *name){
		XmlValue value;
		return self->getVariableValue(name, value) ? value.asString() : "";
	}
static void XmlQueryContext_set(XmlQueryContext *self,std::string const &name,std::string const &value){
		XmlValue xval(value);
		self->setVariableValue(name, xval);
	}
static void XmlQueryContext_setDebugVariable(XmlQueryContext *self,std::string const &var){
		self->setVariableValue("dbxml:debug", var);
	}
static XmlData *XmlValue_asBinary(XmlValue const *self){
		XmlData data = self->asBinary();
		return new XmlData(data);
	}
static XmlDocument *XmlValue_asDocument(XmlValue const *self){
		return new XmlDocument(self->asDocument());
	}
static XmlValue *XmlValue_getParentNode(XmlValue const *self){
		return new XmlValue(self->getParentNode());
	}
static XmlValue *XmlValue_getFirstChild(XmlValue const *self){
		return new XmlValue(self->getFirstChild());
	}
static XmlValue *XmlValue_getLastChild(XmlValue const *self){
		return new XmlValue(self->getLastChild());
	}
static XmlValue *XmlValue_getPreviousSibling(XmlValue const *self){
		return new XmlValue(self->getPreviousSibling());
	}
static XmlValue *XmlValue_getNextSibling(XmlValue const *self){
		return new XmlValue(self->getNextSibling());
	}
static XmlResults *XmlValue_getAttributes(XmlValue const *self){
		return new XmlResults(self->getAttributes());
	}
static XmlValue *XmlValue_getOwnerElement(XmlValue const *self){
		return new XmlValue(self->getOwnerElement());
	}
static void XmlValue_setValue(XmlValue &to,XmlValue const &from){
		to = from;
	}
static XmlIndexDeclaration *XmlIndexSpecification_find(XmlIndexSpecification *self,std::string const &uri,std::string const &name){
		XmlIndexDeclaration *idecl =
			new XmlIndexDeclaration(uri, name, "");
		if (self->find(idecl->uri, idecl->name, idecl->index))
			return idecl;
		else {
			delete idecl;
			return NULL;
		}
	}
static XmlIndexDeclaration *XmlIndexSpecification_next(XmlIndexSpecification *self){
		XmlIndexDeclaration *idecl = new XmlIndexDeclaration;
		if (self->next(idecl->uri, idecl->name, idecl->index))
			return idecl;
		else {
			delete idecl;
			return NULL;
		}
	}
static XmlResults *XmlQueryExpression_execute__SWIG_0(XmlQueryExpression const *self,XmlQueryContext &context,u_int32_t flags=0){
		return new XmlResults(self->execute(context, flags));
	}
static XmlResults *XmlQueryExpression_execute__SWIG_2(XmlQueryExpression const *self,XmlValue const &contextItem,XmlQueryContext &context,u_int32_t flags=0){
		return new XmlResults(
			self->execute(contextItem, context, flags));
	}
static XmlResults *XmlQueryExpression_execute__SWIG_4(XmlQueryExpression const *self,XmlTransaction &txn,XmlQueryContext &context,u_int32_t flags=0){
		return new XmlResults(self->execute(txn, context, flags));
	}
static XmlResults *XmlQueryExpression_execute__SWIG_6(XmlQueryExpression const *self,XmlTransaction &txn,XmlValue const &contextItem,XmlQueryContext &context,u_int32_t flags=0){
		return new XmlResults(self->execute(txn, contextItem,
						    context, flags));
	}
static void XmlInputStream_freeMemory(XmlInputStream *self){
		delete self;
	}
static XmlTransaction *XmlTransaction_createChild__SWIG_0(XmlTransaction *self,u_int32_t flags=0){
		return new XmlTransaction(self->createChild(flags));
	}
static void XmlTransaction_commit__SWIG_1(XmlTransaction *self){
	  self->commit(0);
	}
#ifdef __cplusplus
extern "C" {
#endif
static int
_wrap_dbxml_version(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int *arg1 = (int *) 0 ;
    int *arg2 = (int *) 0 ;
    int *arg3 = (int *) 0 ;
    char *result;
    
    arg1 = NULL; 
    arg2 = NULL; 
    arg3 = NULL; 
    if (SWIG_GetArgs(interp, objc, objv,":dbxml_version ") == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (char *)dbxml_version(arg1,arg2,arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewStringObj(result,-1));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_setLogLevel(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    enum LogLevel arg1 ;
    bool arg2 ;
    int tempb2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"io:setLogLevel level enabled ",&arg1,NULL) == TCL_ERROR) SWIG_fail;
    if (Tcl_GetIntFromObj(interp,objv[2],&tempb2) == TCL_ERROR) SWIG_fail;
    arg2 = tempb2 ? true : false;
    {
        try {
            setLogLevel((enum LogLevel )arg1,arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_setLogCategory(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    enum LogCategory arg1 ;
    bool arg2 ;
    int tempb2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"io:setLogCategory category enabled ",&arg1,NULL) == TCL_ERROR) SWIG_fail;
    if (Tcl_GetIntFromObj(interp,objv[2],&tempb2) == TCL_ERROR) SWIG_fail;
    arg2 = tempb2 ? true : false;
    {
        try {
            setLogCategory((enum LogCategory )arg1,arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlManager__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_XmlManager ") == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (XmlManager *)new XmlManager();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlManager,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlManager__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    u_int32_t arg1 ;
    XmlManager *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:new_XmlManager flags ",&arg1) == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (XmlManager *)new XmlManager(arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlManager,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlManager__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    DbEnv *arg1 = (DbEnv *) 0 ;
    u_int32_t arg2 ;
    XmlManager *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oi:new_XmlManager dbEnv flags ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    {
        char *arg = Tcl_GetStringFromObj(objv[1], NULL);
        DB_ENV *envp = NAME_TO_ENV(arg);
        arg1 = envp ? DbEnv::wrap_DB_ENV(envp) : NULL;
    }
    {
        try {
            result = (XmlManager *)new XmlManager(arg1,arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlManager,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlManager(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_XmlManager__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            long tmp;
            if (Tcl_GetLongFromObj(NULL,argv[0],&tmp) == TCL_ERROR) _v = 0;
            else _v = 1;
        }
        if (_v) {
            return _wrap_new_XmlManager__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            /* This would be a typecheck for a DbEnv *; just succeed */
            _v = 1; 
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_new_XmlManager__SWIG_2(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_XmlManager'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_XmlManager(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlManager self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_setDefaultContainerFlags(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    u_int32_t arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oi:XmlManager_setDefaultContainerFlags self flags ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->setDefaultContainerFlags(arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_getDefaultContainerFlags(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    u_int32_t result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlManager_getDefaultContainerFlags self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (u_int32_t)(arg1)->getDefaultContainerFlags();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_setDefaultPageSize(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    u_int32_t arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oi:XmlManager_setDefaultPageSize self pageSize ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->setDefaultPageSize(arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_getDefaultPageSize(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    u_int32_t result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlManager_getDefaultPageSize self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (u_int32_t)(arg1)->getDefaultPageSize();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_setDefaultSequenceIncrement(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    u_int32_t arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oi:XmlManager_setDefaultSequenceIncrement self incr ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->setDefaultSequenceIncrement(arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_getDefaultSequenceIncrement(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    u_int32_t result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlManager_getDefaultSequenceIncrement self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (u_int32_t)(arg1)->getDefaultSequenceIncrement();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_setDefaultContainerType(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    enum XmlContainer::ContainerType arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oi:XmlManager_setDefaultContainerType self type ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->setDefaultContainerType((enum XmlContainer::ContainerType )arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_getDefaultContainerType(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    enum XmlContainer::ContainerType result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlManager_getDefaultContainerType self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (enum XmlContainer::ContainerType)(arg1)->getDefaultContainerType();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_getDbEnv(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    DbEnv *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlManager_getDbEnv self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (DbEnv *)(arg1)->getDbEnv();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DbEnv,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_getHome(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlManager_getHome self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                std::string const &_result_ref = ((XmlManager const *)arg1)->getHome();
                result = (std::string *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)result->c_str(),result->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_existsContainer(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlManager_existsContainer self name ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (int)(arg1)->existsContainer((std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_removeContainer__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlManager_removeContainer self name ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            (arg1)->removeContainer((std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_removeContainer__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlManager_removeContainer self txn name ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            (arg1)->removeContainer(*arg2,(std::string const &)*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_removeContainer(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                return _wrap_XmlManager_removeContainer__SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    return _wrap_XmlManager_removeContainer__SWIG_1(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlManager_removeContainer'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlManager_renameContainer__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlManager_renameContainer self oldName newName ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            (arg1)->renameContainer((std::string const &)*arg2,(std::string const &)*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_renameContainer__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string temp3 ;
    std::string temp4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlManager_renameContainer self txn oldName newName ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        try {
            (arg1)->renameContainer(*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_renameContainer(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    return _wrap_XmlManager_renameContainer__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlManager_renameContainer__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlManager_renameContainer'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlManager_upgradeContainer(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    XmlUpdateContext *arg3 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlManager_upgradeContainer self name uc ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->upgradeContainer((std::string const &)*arg2,*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_reindexContainer__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    XmlUpdateContext *arg3 = 0 ;
    u_int32_t arg4 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooi:XmlManager_reindexContainer self name uc flags ",NULL,NULL,NULL,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->reindexContainer((std::string const &)*arg2,*arg3,arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_reindexContainer__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    XmlUpdateContext *arg3 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlManager_reindexContainer self name uc ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->reindexContainer((std::string const &)*arg2,*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_reindexContainer__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlUpdateContext *arg4 = 0 ;
    u_int32_t arg5 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooi:XmlManager_reindexContainer self txn name uc flags ",NULL,NULL,NULL,NULL,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->reindexContainer(*arg2,(std::string const &)*arg3,*arg4,arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_reindexContainer__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlUpdateContext *arg4 = 0 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlManager_reindexContainer self txn name uc ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->reindexContainer(*arg2,(std::string const &)*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_reindexContainer(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_XmlManager_reindexContainer__SWIG_1(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlManager_reindexContainer__SWIG_3(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlManager_reindexContainer__SWIG_0(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlManager_reindexContainer__SWIG_2(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlManager_reindexContainer'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createStdInInputStream(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlInputStream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlManager_createStdInInputStream self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlInputStream *)XmlManager_createStdInInputStream((XmlManager const *)arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlInputStream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createLocalFileInputStream(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    XmlInputStream *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlManager_createLocalFileInputStream self filename ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (XmlInputStream *)XmlManager_createLocalFileInputStream((XmlManager const *)arg1,(std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlInputStream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createMemBufInputStream__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    char *arg2 = (char *) 0 ;
    unsigned int arg3 ;
    char *arg4 = (char *) 0 ;
    bool arg5 ;
    XmlInputStream *result;
    int tempb5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"osiso:XmlManager_createMemBufInputStream self bytes count id adopt ",NULL,&arg2,&arg3,&arg4,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if (Tcl_GetIntFromObj(interp,objv[5],&tempb5) == TCL_ERROR) SWIG_fail;
    arg5 = tempb5 ? true : false;
    {
        try {
            result = (XmlInputStream *)XmlManager_createMemBufInputStream__SWIG_0((XmlManager const *)arg1,(char const *)arg2,arg3,(char const *)arg4,arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlInputStream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createMemBufInputStream__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    char *arg2 = (char *) 0 ;
    unsigned int arg3 ;
    char *arg4 = (char *) 0 ;
    XmlInputStream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"osis:XmlManager_createMemBufInputStream self bytes count id ",NULL,&arg2,&arg3,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlInputStream *)XmlManager_createMemBufInputStream__SWIG_0((XmlManager const *)arg1,(char const *)arg2,arg3,(char const *)arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlInputStream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createMemBufInputStream__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    char *arg2 = (char *) 0 ;
    unsigned int arg3 ;
    bool arg4 ;
    XmlInputStream *result;
    int tempb4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"osio:XmlManager_createMemBufInputStream self bytes count copyBuffer ",NULL,&arg2,&arg3,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if (Tcl_GetIntFromObj(interp,objv[4],&tempb4) == TCL_ERROR) SWIG_fail;
    arg4 = tempb4 ? true : false;
    {
        try {
            result = (XmlInputStream *)XmlManager_createMemBufInputStream__SWIG_2((XmlManager const *)arg1,(char const *)arg2,arg3,arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlInputStream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createMemBufInputStream(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlManager_createMemBufInputStream__SWIG_2(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlManager_createMemBufInputStream__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlManager_createMemBufInputStream__SWIG_0(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlManager_createMemBufInputStream'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createURLInputStream__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    XmlInputStream *result;
    std::string temp2 ;
    std::string temp3 ;
    std::string temp4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlManager_createURLInputStream self baseId systemId publicId ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        try {
            result = (XmlInputStream *)XmlManager_createURLInputStream__SWIG_0((XmlManager const *)arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlInputStream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createURLInputStream__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlInputStream *result;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlManager_createURLInputStream self baseId systemId ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            result = (XmlInputStream *)XmlManager_createURLInputStream__SWIG_1((XmlManager const *)arg1,(std::string const &)*arg2,(std::string const &)*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlInputStream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createURLInputStream(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    return _wrap_XmlManager_createURLInputStream__SWIG_1(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlManager_createURLInputStream__SWIG_0(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlManager_createURLInputStream'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createContainer__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    XmlContainer *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlManager_createContainer self name ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (XmlContainer *)XmlManager_createContainer__SWIG_0(arg1,(std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createContainer__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlContainer *result;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlManager_createContainer self txn name ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            result = (XmlContainer *)XmlManager_createContainer__SWIG_1(arg1,*arg2,(std::string const &)*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_openContainer__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlContainer *result;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlManager_openContainer self txn name ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            result = (XmlContainer *)XmlManager_openContainer__SWIG_0(arg1,*arg2,(std::string const &)*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_openContainer__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    XmlContainer *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlManager_openContainer self name ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (XmlContainer *)XmlManager_openContainer__SWIG_1(arg1,(std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createContainer__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    u_int32_t arg3 ;
    enum XmlContainer::ContainerType arg4 ;
    int arg5 ;
    XmlContainer *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooiii:XmlManager_createContainer self name flags type mode ",NULL,NULL,&arg3,&arg4,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (XmlContainer *)XmlManager_createContainer__SWIG_2(arg1,(std::string const &)*arg2,arg3,(enum XmlContainer::ContainerType )arg4,arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createContainer__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    u_int32_t arg3 ;
    enum XmlContainer::ContainerType arg4 ;
    XmlContainer *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooii:XmlManager_createContainer self name flags type ",NULL,NULL,&arg3,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (XmlContainer *)XmlManager_createContainer__SWIG_2(arg1,(std::string const &)*arg2,arg3,(enum XmlContainer::ContainerType )arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createContainer__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    u_int32_t arg3 ;
    XmlContainer *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooi:XmlManager_createContainer self name flags ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (XmlContainer *)XmlManager_createContainer__SWIG_2(arg1,(std::string const &)*arg2,arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createContainer__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    u_int32_t arg4 ;
    enum XmlContainer::ContainerType arg5 ;
    int arg6 ;
    XmlContainer *result;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooiii:XmlManager_createContainer self txn name flags type mode ",NULL,NULL,NULL,&arg4,&arg5,&arg6) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            result = (XmlContainer *)XmlManager_createContainer__SWIG_5(arg1,*arg2,(std::string const &)*arg3,arg4,(enum XmlContainer::ContainerType )arg5,arg6);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createContainer__SWIG_6(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    u_int32_t arg4 ;
    enum XmlContainer::ContainerType arg5 ;
    XmlContainer *result;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooii:XmlManager_createContainer self txn name flags type ",NULL,NULL,NULL,&arg4,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            result = (XmlContainer *)XmlManager_createContainer__SWIG_5(arg1,*arg2,(std::string const &)*arg3,arg4,(enum XmlContainer::ContainerType )arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createContainer__SWIG_7(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    u_int32_t arg4 ;
    XmlContainer *result;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooi:XmlManager_createContainer self txn name flags ",NULL,NULL,NULL,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            result = (XmlContainer *)XmlManager_createContainer__SWIG_5(arg1,*arg2,(std::string const &)*arg3,arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createContainer(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                return _wrap_XmlManager_createContainer__SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    return _wrap_XmlManager_createContainer__SWIG_1(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_XmlManager_createContainer__SWIG_4(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlManager_createContainer__SWIG_7(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlManager_createContainer__SWIG_3(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlManager_createContainer__SWIG_6(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlManager_createContainer__SWIG_2(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            {
                                long tmp;
                                if (Tcl_GetLongFromObj(NULL,argv[5],&tmp) == TCL_ERROR) _v = 0;
                                else _v = 1;
                            }
                            if (_v) {
                                return _wrap_XmlManager_createContainer__SWIG_5(clientData, interp, objc, objv);
                            }
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlManager_createContainer'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlManager_openContainer__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    u_int32_t arg3 ;
    XmlContainer *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooi:XmlManager_openContainer self name flags ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (XmlContainer *)XmlManager_openContainer__SWIG_2(arg1,(std::string const &)*arg2,arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_openContainer__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    u_int32_t arg4 ;
    XmlContainer *result;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooi:XmlManager_openContainer self txn name flags ",NULL,NULL,NULL,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            result = (XmlContainer *)XmlManager_openContainer__SWIG_3(arg1,*arg2,(std::string const &)*arg3,arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_openContainer__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    u_int32_t arg3 ;
    enum XmlContainer::ContainerType arg4 ;
    int arg5 ;
    XmlContainer *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooiii:XmlManager_openContainer self name flags type mode ",NULL,NULL,&arg3,&arg4,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (XmlContainer *)XmlManager_openContainer__SWIG_4(arg1,(std::string const &)*arg2,arg3,(enum XmlContainer::ContainerType )arg4,arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_openContainer__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    u_int32_t arg3 ;
    enum XmlContainer::ContainerType arg4 ;
    XmlContainer *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooii:XmlManager_openContainer self name flags type ",NULL,NULL,&arg3,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (XmlContainer *)XmlManager_openContainer__SWIG_4(arg1,(std::string const &)*arg2,arg3,(enum XmlContainer::ContainerType )arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_openContainer__SWIG_6(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    u_int32_t arg4 ;
    enum XmlContainer::ContainerType arg5 ;
    int arg6 ;
    XmlContainer *result;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooiii:XmlManager_openContainer self txn name flags type mode ",NULL,NULL,NULL,&arg4,&arg5,&arg6) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            result = (XmlContainer *)XmlManager_openContainer__SWIG_6(arg1,*arg2,(std::string const &)*arg3,arg4,(enum XmlContainer::ContainerType )arg5,arg6);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_openContainer__SWIG_7(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    u_int32_t arg4 ;
    enum XmlContainer::ContainerType arg5 ;
    XmlContainer *result;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooii:XmlManager_openContainer self txn name flags type ",NULL,NULL,NULL,&arg4,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            result = (XmlContainer *)XmlManager_openContainer__SWIG_6(arg1,*arg2,(std::string const &)*arg3,arg4,(enum XmlContainer::ContainerType )arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_openContainer(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                return _wrap_XmlManager_openContainer__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    return _wrap_XmlManager_openContainer__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_XmlManager_openContainer__SWIG_2(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlManager_openContainer__SWIG_3(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlManager_openContainer__SWIG_5(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlManager_openContainer__SWIG_7(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlManager_openContainer__SWIG_4(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            {
                                long tmp;
                                if (Tcl_GetLongFromObj(NULL,argv[5],&tmp) == TCL_ERROR) _v = 0;
                                else _v = 1;
                            }
                            if (_v) {
                                return _wrap_XmlManager_openContainer__SWIG_6(clientData, interp, objc, objv);
                            }
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlManager_openContainer'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlManager_dumpContainer(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    char *arg3 = (char *) 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oos:XmlManager_dumpContainer self name filename ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            XmlManager_dumpContainer(arg1,(std::string const &)*arg2,(char const *)arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_loadContainer(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    char *arg3 = (char *) 0 ;
    XmlUpdateContext *arg4 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooso:XmlManager_loadContainer self name filename uc ",NULL,NULL,&arg3,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            XmlManager_loadContainer(arg1,(std::string const &)*arg2,(char const *)arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_verifyContainer__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    char *arg3 = (char *) 0 ;
    u_int32_t arg4 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oosi:XmlManager_verifyContainer self name filename flags ",NULL,NULL,&arg3,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            XmlManager_verifyContainer__SWIG_0(arg1,(std::string const &)*arg2,(char const *)arg3,arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_verifyContainer__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    char *arg3 = (char *) 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oos:XmlManager_verifyContainer self name filename ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            XmlManager_verifyContainer__SWIG_0(arg1,(std::string const &)*arg2,(char const *)arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_verifyContainer(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    return _wrap_XmlManager_verifyContainer__SWIG_1(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlManager_verifyContainer__SWIG_0(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlManager_verifyContainer'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createDocument(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlDocument *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlManager_createDocument self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlDocument *)XmlManager_createDocument(arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlDocument,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createQueryContext__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    enum XmlQueryContext::ReturnType arg2 ;
    enum XmlQueryContext::EvaluationType arg3 ;
    XmlQueryContext *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oii:XmlManager_createQueryContext self rt et ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlQueryContext *)XmlManager_createQueryContext__SWIG_0(arg1,(enum XmlQueryContext::ReturnType )arg2,(enum XmlQueryContext::EvaluationType )arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlQueryContext,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createQueryContext__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlQueryContext *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlManager_createQueryContext self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlQueryContext *)XmlManager_createQueryContext__SWIG_1(arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlQueryContext,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createQueryContext__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    enum XmlQueryContext::ReturnType arg2 ;
    XmlQueryContext *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oi:XmlManager_createQueryContext self rt ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlQueryContext *)XmlManager_createQueryContext__SWIG_2(arg1,(enum XmlQueryContext::ReturnType )arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlQueryContext,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createQueryContext(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_XmlManager_createQueryContext__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_XmlManager_createQueryContext__SWIG_2(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_XmlManager_createQueryContext__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlManager_createQueryContext'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createUpdateContext(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlUpdateContext *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlManager_createUpdateContext self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlUpdateContext *)XmlManager_createUpdateContext(arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlUpdateContext,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_prepare__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    XmlQueryExpression *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlManager_prepare self query context ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlQueryExpression *)XmlManager_prepare__SWIG_0(arg1,(std::string const &)*arg2,*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlQueryExpression,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_prepare__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlQueryContext *arg4 = 0 ;
    XmlQueryExpression *result;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlManager_prepare self txn query context ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlQueryExpression *)XmlManager_prepare__SWIG_1(arg1,*arg2,(std::string const &)*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlQueryExpression,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_prepare(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_XmlManager_prepare__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlManager_prepare__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlManager_prepare'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlManager_query__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    u_int32_t arg4 ;
    XmlResults *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooi:XmlManager_query self query context flags ",NULL,NULL,NULL,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlManager_query__SWIG_0(arg1,(std::string const &)*arg2,*arg3,arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_query__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlQueryContext *arg4 = 0 ;
    u_int32_t arg5 ;
    XmlResults *result;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooi:XmlManager_query self txn query context flags ",NULL,NULL,NULL,NULL,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlManager_query__SWIG_1(arg1,*arg2,(std::string const &)*arg3,*arg4,arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_query__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    std::string *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    XmlResults *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlManager_query self query context ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlManager_query__SWIG_2(arg1,(std::string const &)*arg2,*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_query__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlQueryContext *arg4 = 0 ;
    XmlResults *result;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlManager_query self txn query context ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlManager_query__SWIG_3(arg1,*arg2,(std::string const &)*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_query(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_XmlManager_query__SWIG_2(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlManager_query__SWIG_3(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlManager_query__SWIG_0(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlManager_query__SWIG_1(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlManager_query'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createResults(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlManager_createResults self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlManager_createResults(arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createModify(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlModify *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlManager_createModify self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlModify *)XmlManager_createModify(arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlModify,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createTransaction__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    DbTxn *arg2 = (DbTxn *) 0 ;
    XmlTransaction *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlManager_createTransaction self toAdopt ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        char *arg = Tcl_GetStringFromObj(objv[2], NULL);
        DB_TXN *txnp = NAME_TO_TXN(arg);
        arg2 = txnp ? DbTxn::wrap_DB_TXN(txnp) : 0;
    }
    {
        try {
            result = (XmlTransaction *)XmlManager_createTransaction__SWIG_0(arg1,arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlTransaction,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createTransaction__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    u_int32_t arg2 ;
    XmlTransaction *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oi:XmlManager_createTransaction self flags ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlTransaction *)XmlManager_createTransaction__SWIG_1(arg1,arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlTransaction,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createTransaction__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlTransaction *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlManager_createTransaction self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlTransaction *)XmlManager_createTransaction__SWIG_2(arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlTransaction,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createTransaction(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_XmlManager_createTransaction__SWIG_2(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_XmlManager_createTransaction__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                /* This would be a typecheck for a DbTxn *; just succeed */
                _v = 1; 
            }
            if (_v) {
                return _wrap_XmlManager_createTransaction__SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlManager_createTransaction'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createIndexLookup__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlContainer *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    XmlValue *arg6 = 0 ;
    enum XmlIndexLookup::Operation arg7 ;
    XmlIndexLookup *result;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooooi:XmlManager_createIndexLookup self cont uri name index value op ",NULL,NULL,NULL,NULL,NULL,NULL,&arg7) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    if ((SWIG_ConvertPtr(objv[6], (void **) &arg6, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlIndexLookup *)XmlManager_createIndexLookup__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(XmlValue const &)*arg6,(enum XmlIndexLookup::Operation )arg7);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlIndexLookup,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createIndexLookup__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlContainer *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    XmlValue *arg6 = 0 ;
    XmlIndexLookup *result;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooooo:XmlManager_createIndexLookup self cont uri name index value ",NULL,NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    if ((SWIG_ConvertPtr(objv[6], (void **) &arg6, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlIndexLookup *)XmlManager_createIndexLookup__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(XmlValue const &)*arg6);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlIndexLookup,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createIndexLookup__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlManager *arg1 = (XmlManager *) 0 ;
    XmlContainer *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    XmlIndexLookup *result;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooo:XmlManager_createIndexLookup self cont uri name index ",NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlManager,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        try {
            result = (XmlIndexLookup *)XmlManager_createIndexLookup__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlIndexLookup,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlManager_createIndexLookup(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlManager_createIndexLookup__SWIG_2(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                void *ptr;
                                if (SWIG_ConvertPtr(argv[5], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                                    _v = 0;
                                } else {
                                    _v = 1;
                                }
                            }
                            if (_v) {
                                return _wrap_XmlManager_createIndexLookup__SWIG_1(clientData, interp, objc, objv);
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlManager, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                void *ptr;
                                if (SWIG_ConvertPtr(argv[5], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                                    _v = 0;
                                } else {
                                    _v = 1;
                                }
                            }
                            if (_v) {
                                {
                                    long tmp;
                                    if (Tcl_GetLongFromObj(NULL,argv[6],&tmp) == TCL_ERROR) _v = 0;
                                    else _v = 1;
                                }
                                if (_v) {
                                    return _wrap_XmlManager_createIndexLookup__SWIG_0(clientData, interp, objc, objv);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlManager_createIndexLookup'", TCL_STATIC);
    return TCL_ERROR;
}


static void swig_delete_XmlManager(void *obj) {
XmlManager *arg1 = (XmlManager *) obj;
delete arg1;
}
static swig_method swig_XmlManager_methods[] = {
    {"setDefaultContainerFlags", _wrap_XmlManager_setDefaultContainerFlags}, 
    {"getDefaultContainerFlags", _wrap_XmlManager_getDefaultContainerFlags}, 
    {"setDefaultPageSize", _wrap_XmlManager_setDefaultPageSize}, 
    {"getDefaultPageSize", _wrap_XmlManager_getDefaultPageSize}, 
    {"setDefaultSequenceIncrement", _wrap_XmlManager_setDefaultSequenceIncrement}, 
    {"getDefaultSequenceIncrement", _wrap_XmlManager_getDefaultSequenceIncrement}, 
    {"setDefaultContainerType", _wrap_XmlManager_setDefaultContainerType}, 
    {"getDefaultContainerType", _wrap_XmlManager_getDefaultContainerType}, 
    {"getDbEnv", _wrap_XmlManager_getDbEnv}, 
    {"getHome", _wrap_XmlManager_getHome}, 
    {"existsContainer", _wrap_XmlManager_existsContainer}, 
    {"removeContainer", _wrap_XmlManager_removeContainer}, 
    {"renameContainer", _wrap_XmlManager_renameContainer}, 
    {"upgradeContainer", _wrap_XmlManager_upgradeContainer}, 
    {"reindexContainer", _wrap_XmlManager_reindexContainer}, 
    {"createStdInInputStream", _wrap_XmlManager_createStdInInputStream}, 
    {"createLocalFileInputStream", _wrap_XmlManager_createLocalFileInputStream}, 
    {"createMemBufInputStream", _wrap_XmlManager_createMemBufInputStream}, 
    {"createURLInputStream", _wrap_XmlManager_createURLInputStream}, 
    {"createContainer", _wrap_XmlManager_createContainer}, 
    {"openContainer", _wrap_XmlManager_openContainer}, 
    {"dumpContainer", _wrap_XmlManager_dumpContainer}, 
    {"loadContainer", _wrap_XmlManager_loadContainer}, 
    {"verifyContainer", _wrap_XmlManager_verifyContainer}, 
    {"createDocument", _wrap_XmlManager_createDocument}, 
    {"createQueryContext", _wrap_XmlManager_createQueryContext}, 
    {"createUpdateContext", _wrap_XmlManager_createUpdateContext}, 
    {"prepare", _wrap_XmlManager_prepare}, 
    {"query", _wrap_XmlManager_query}, 
    {"createResults", _wrap_XmlManager_createResults}, 
    {"createModify", _wrap_XmlManager_createModify}, 
    {"createTransaction", _wrap_XmlManager_createTransaction}, 
    {"createIndexLookup", _wrap_XmlManager_createIndexLookup}, 
    {0,0}
};
static swig_attribute swig_XmlManager_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlManager_bases[] = {0};
static char *swig_XmlManager_base_names[] = {0};
swig_class _wrap_class_XmlManager = { "XmlManager", &SWIGTYPE_p_XmlManager,_wrap_new_XmlManager, swig_delete_XmlManager, swig_XmlManager_methods, swig_XmlManager_attributes, swig_XmlManager_bases,swig_XmlManager_base_names };
static int
_wrap_new_XmlIndexLookup__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_XmlIndexLookup ") == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (XmlIndexLookup *)new XmlIndexLookup();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlIndexLookup,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlIndexLookup__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = 0 ;
    XmlIndexLookup *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_XmlIndexLookup o ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlIndexLookup *)new XmlIndexLookup((XmlIndexLookup const &)*arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlIndexLookup,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlIndexLookup(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_XmlIndexLookup__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexLookup, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_XmlIndexLookup__SWIG_1(clientData, interp, objc, objv);
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_XmlIndexLookup'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_XmlIndexLookup(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlIndexLookup self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_isNull(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexLookup_isNull self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)((XmlIndexLookup const *)arg1)->isNull();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_getIndex(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    std::string *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexLookup_getIndex self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                std::string const &_result_ref = ((XmlIndexLookup const *)arg1)->getIndex();
                result = (std::string *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)result->c_str(),result->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_setIndex(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlIndexLookup_setIndex self index ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            (arg1)->setIndex((std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_getNodeURI(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    std::string *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexLookup_getNodeURI self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                std::string const &_result_ref = ((XmlIndexLookup const *)arg1)->getNodeURI();
                result = (std::string *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)result->c_str(),result->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_getNodeName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    std::string *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexLookup_getNodeName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                std::string const &_result_ref = ((XmlIndexLookup const *)arg1)->getNodeName();
                result = (std::string *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)result->c_str(),result->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_setNode(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlIndexLookup_setNode self uri name ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            (arg1)->setNode((std::string const &)*arg2,(std::string const &)*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_getParentURI(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    std::string *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexLookup_getParentURI self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                std::string const &_result_ref = ((XmlIndexLookup const *)arg1)->getParentURI();
                result = (std::string *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)result->c_str(),result->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_getParentName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    std::string *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexLookup_getParentName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                std::string const &_result_ref = ((XmlIndexLookup const *)arg1)->getParentName();
                result = (std::string *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)result->c_str(),result->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_setParent(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlIndexLookup_setParent self uri name ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            (arg1)->setParent((std::string const &)*arg2,(std::string const &)*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_getLowBoundValue(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    XmlValue *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexLookup_getLowBoundValue self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                XmlValue const &_result_ref = ((XmlIndexLookup const *)arg1)->getLowBoundValue();
                result = (XmlValue *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_getLowBoundOperation(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    enum XmlIndexLookup::Operation result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexLookup_getLowBoundOperation self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (enum XmlIndexLookup::Operation)((XmlIndexLookup const *)arg1)->getLowBoundOperation();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_setLowBound(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    XmlValue *arg2 = 0 ;
    enum XmlIndexLookup::Operation arg3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooi:XmlIndexLookup_setLowBound self value op ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->setLowBound((XmlValue const &)*arg2,(enum XmlIndexLookup::Operation )arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_getHighBoundValue(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    XmlValue *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexLookup_getHighBoundValue self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                XmlValue const &_result_ref = ((XmlIndexLookup const *)arg1)->getHighBoundValue();
                result = (XmlValue *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_getHighBoundOperation(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    enum XmlIndexLookup::Operation result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexLookup_getHighBoundOperation self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (enum XmlIndexLookup::Operation)((XmlIndexLookup const *)arg1)->getHighBoundOperation();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_setHighBound(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    XmlValue *arg2 = 0 ;
    enum XmlIndexLookup::Operation arg3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooi:XmlIndexLookup_setHighBound self value op ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->setHighBound((XmlValue const &)*arg2,(enum XmlIndexLookup::Operation )arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_getContainer(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    XmlContainer *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexLookup_getContainer self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                XmlContainer const &_result_ref = ((XmlIndexLookup const *)arg1)->getContainer();
                result = (XmlContainer *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_setContainer(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    XmlContainer *arg2 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlIndexLookup_setContainer self container ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->setContainer(*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_execute__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    XmlQueryContext *arg2 = 0 ;
    u_int32_t arg3 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooi:XmlIndexLookup_execute self context flags ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlIndexLookup_execute__SWIG_0((XmlIndexLookup const *)arg1,*arg2,arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_execute__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    XmlQueryContext *arg2 = 0 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlIndexLookup_execute self context ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlIndexLookup_execute__SWIG_0((XmlIndexLookup const *)arg1,*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_execute__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    u_int32_t arg4 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooi:XmlIndexLookup_execute self txn context flags ",NULL,NULL,NULL,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlIndexLookup_execute__SWIG_2((XmlIndexLookup const *)arg1,*arg2,*arg3,arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_execute__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexLookup *arg1 = (XmlIndexLookup *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlIndexLookup_execute self txn context ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexLookup,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlIndexLookup_execute__SWIG_2((XmlIndexLookup const *)arg1,*arg2,*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexLookup_execute(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexLookup, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_XmlIndexLookup_execute__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexLookup, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_XmlIndexLookup_execute__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexLookup, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_XmlIndexLookup_execute__SWIG_3(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexLookup, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlIndexLookup_execute__SWIG_2(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlIndexLookup_execute'", TCL_STATIC);
    return TCL_ERROR;
}


static void swig_delete_XmlIndexLookup(void *obj) {
XmlIndexLookup *arg1 = (XmlIndexLookup *) obj;
delete arg1;
}
static swig_method swig_XmlIndexLookup_methods[] = {
    {"isNull", _wrap_XmlIndexLookup_isNull}, 
    {"getIndex", _wrap_XmlIndexLookup_getIndex}, 
    {"setIndex", _wrap_XmlIndexLookup_setIndex}, 
    {"getNodeURI", _wrap_XmlIndexLookup_getNodeURI}, 
    {"getNodeName", _wrap_XmlIndexLookup_getNodeName}, 
    {"setNode", _wrap_XmlIndexLookup_setNode}, 
    {"getParentURI", _wrap_XmlIndexLookup_getParentURI}, 
    {"getParentName", _wrap_XmlIndexLookup_getParentName}, 
    {"setParent", _wrap_XmlIndexLookup_setParent}, 
    {"getLowBoundValue", _wrap_XmlIndexLookup_getLowBoundValue}, 
    {"getLowBoundOperation", _wrap_XmlIndexLookup_getLowBoundOperation}, 
    {"setLowBound", _wrap_XmlIndexLookup_setLowBound}, 
    {"getHighBoundValue", _wrap_XmlIndexLookup_getHighBoundValue}, 
    {"getHighBoundOperation", _wrap_XmlIndexLookup_getHighBoundOperation}, 
    {"setHighBound", _wrap_XmlIndexLookup_setHighBound}, 
    {"getContainer", _wrap_XmlIndexLookup_getContainer}, 
    {"setContainer", _wrap_XmlIndexLookup_setContainer}, 
    {"execute", _wrap_XmlIndexLookup_execute}, 
    {0,0}
};
static swig_attribute swig_XmlIndexLookup_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlIndexLookup_bases[] = {0};
static char *swig_XmlIndexLookup_base_names[] = {0};
swig_class _wrap_class_XmlIndexLookup = { "XmlIndexLookup", &SWIGTYPE_p_XmlIndexLookup,_wrap_new_XmlIndexLookup, swig_delete_XmlIndexLookup, swig_XmlIndexLookup_methods, swig_XmlIndexLookup_attributes, swig_XmlIndexLookup_bases,swig_XmlIndexLookup_base_names };
static int
_wrap_new_XmlContainer__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_XmlContainer ") == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (XmlContainer *)new XmlContainer();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlContainer__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = 0 ;
    XmlContainer *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_XmlContainer o ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlContainer *)new XmlContainer((XmlContainer const &)*arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlContainer,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlContainer(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_XmlContainer__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_XmlContainer__SWIG_1(clientData, interp, objc, objv);
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_XmlContainer'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_XmlContainer(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlContainer self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_sync(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlContainer_sync self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->sync();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_close(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlContainer_close self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->close();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_addAlias(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlContainer_addAlias self alias ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (bool)(arg1)->addAlias((std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_removeAlias(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlContainer_removeAlias self alias ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (bool)(arg1)->removeAlias((std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getManager(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlManager *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlContainer_getManager self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                XmlManager &_result_ref = (arg1)->getManager();
                result = (XmlManager *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlManager,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlContainer_getName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                std::string const &_result_ref = ((XmlContainer const *)arg1)->getName();
                result = (std::string *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)result->c_str(),result->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getContainerType(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    enum XmlContainer::ContainerType result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlContainer_getContainerType self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (enum XmlContainer::ContainerType)((XmlContainer const *)arg1)->getContainerType();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getIndexNodes(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlContainer_getIndexNodes self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)((XmlContainer const *)arg1)->getIndexNodes();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getPageSize(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    u_int32_t result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlContainer_getPageSize self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (u_int32_t)((XmlContainer const *)arg1)->getPageSize();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_setIndexSpecification__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlIndexSpecification *arg2 = 0 ;
    XmlUpdateContext *arg3 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlContainer_setIndexSpecification self index uc ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->setIndexSpecification((XmlIndexSpecification const &)*arg2,*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_addIndex__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    XmlUpdateContext *arg5 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    std::string temp4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooo:XmlContainer_addIndex self uri name index uc ",NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    if ((SWIG_ConvertPtr(objv[5], (void **) &arg5, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->addIndex((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,*arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_addIndex__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    enum XmlIndexSpecification::Type arg4 ;
    enum XmlValue::Type arg5 ;
    XmlUpdateContext *arg6 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooiio:XmlContainer_addIndex self uri name indexType syntaxType uc ",NULL,NULL,NULL,&arg4,&arg5,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    if ((SWIG_ConvertPtr(objv[6], (void **) &arg6, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->addIndex((std::string const &)*arg2,(std::string const &)*arg3,(enum XmlIndexSpecification::Type )arg4,(enum XmlValue::Type )arg5,*arg6);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_deleteIndex__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    XmlUpdateContext *arg5 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    std::string temp4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooo:XmlContainer_deleteIndex self uri name index uc ",NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    if ((SWIG_ConvertPtr(objv[5], (void **) &arg5, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->deleteIndex((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,*arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_replaceIndex__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    XmlUpdateContext *arg5 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    std::string temp4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooo:XmlContainer_replaceIndex self uri name index uc ",NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    if ((SWIG_ConvertPtr(objv[5], (void **) &arg5, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->replaceIndex((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,*arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_addDefaultIndex__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    XmlUpdateContext *arg3 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlContainer_addDefaultIndex self index uc ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->addDefaultIndex((std::string const &)*arg2,*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_deleteDefaultIndex__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    XmlUpdateContext *arg3 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlContainer_deleteDefaultIndex self index uc ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->deleteDefaultIndex((std::string const &)*arg2,*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_replaceDefaultIndex__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    XmlUpdateContext *arg3 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlContainer_replaceDefaultIndex self index uc ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->replaceDefaultIndex((std::string const &)*arg2,*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_setIndexSpecification__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlIndexSpecification *arg3 = 0 ;
    XmlUpdateContext *arg4 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlContainer_setIndexSpecification self txn index uc ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->setIndexSpecification(*arg2,(XmlIndexSpecification const &)*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_setIndexSpecification(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlIndexSpecification, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_XmlContainer_setIndexSpecification__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlIndexSpecification, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlContainer_setIndexSpecification__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlContainer_setIndexSpecification'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_addIndex__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    XmlUpdateContext *arg6 = 0 ;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooooo:XmlContainer_addIndex self txn uri name index uc ",NULL,NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    if ((SWIG_ConvertPtr(objv[6], (void **) &arg6, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->addIndex(*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,*arg6);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_addIndex__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    enum XmlIndexSpecification::Type arg5 ;
    enum XmlValue::Type arg6 ;
    XmlUpdateContext *arg7 = 0 ;
    std::string temp3 ;
    std::string temp4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooiio:XmlContainer_addIndex self txn uri name indexType syntaxType uc ",NULL,NULL,NULL,NULL,&arg5,&arg6,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    if ((SWIG_ConvertPtr(objv[7], (void **) &arg7, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->addIndex(*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(enum XmlIndexSpecification::Type )arg5,(enum XmlValue::Type )arg6,*arg7);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_addIndex(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            void *ptr;
                            if (SWIG_ConvertPtr(argv[4], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            return _wrap_XmlContainer_addIndex__SWIG_0(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                void *ptr;
                                if (SWIG_ConvertPtr(argv[5], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                                    _v = 0;
                                } else {
                                    _v = 1;
                                }
                            }
                            if (_v) {
                                return _wrap_XmlContainer_addIndex__SWIG_2(clientData, interp, objc, objv);
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            {
                                void *ptr;
                                if (SWIG_ConvertPtr(argv[5], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                                    _v = 0;
                                } else {
                                    _v = 1;
                                }
                            }
                            if (_v) {
                                return _wrap_XmlContainer_addIndex__SWIG_1(clientData, interp, objc, objv);
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            {
                                long tmp;
                                if (Tcl_GetLongFromObj(NULL,argv[5],&tmp) == TCL_ERROR) _v = 0;
                                else _v = 1;
                            }
                            if (_v) {
                                {
                                    void *ptr;
                                    if (SWIG_ConvertPtr(argv[6], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                                        _v = 0;
                                    } else {
                                        _v = 1;
                                    }
                                }
                                if (_v) {
                                    return _wrap_XmlContainer_addIndex__SWIG_3(clientData, interp, objc, objv);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlContainer_addIndex'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_deleteIndex__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    XmlUpdateContext *arg6 = 0 ;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooooo:XmlContainer_deleteIndex self txn uri name index uc ",NULL,NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    if ((SWIG_ConvertPtr(objv[6], (void **) &arg6, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->deleteIndex(*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,*arg6);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_deleteIndex(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            void *ptr;
                            if (SWIG_ConvertPtr(argv[4], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            return _wrap_XmlContainer_deleteIndex__SWIG_0(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                void *ptr;
                                if (SWIG_ConvertPtr(argv[5], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                                    _v = 0;
                                } else {
                                    _v = 1;
                                }
                            }
                            if (_v) {
                                return _wrap_XmlContainer_deleteIndex__SWIG_1(clientData, interp, objc, objv);
                            }
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlContainer_deleteIndex'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_replaceIndex__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    XmlUpdateContext *arg6 = 0 ;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooooo:XmlContainer_replaceIndex self txn uri name index uc ",NULL,NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    if ((SWIG_ConvertPtr(objv[6], (void **) &arg6, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->replaceIndex(*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,*arg6);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_replaceIndex(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            void *ptr;
                            if (SWIG_ConvertPtr(argv[4], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            return _wrap_XmlContainer_replaceIndex__SWIG_0(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                void *ptr;
                                if (SWIG_ConvertPtr(argv[5], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                                    _v = 0;
                                } else {
                                    _v = 1;
                                }
                            }
                            if (_v) {
                                return _wrap_XmlContainer_replaceIndex__SWIG_1(clientData, interp, objc, objv);
                            }
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlContainer_replaceIndex'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_addDefaultIndex__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlUpdateContext *arg4 = 0 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlContainer_addDefaultIndex self txn index uc ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->addDefaultIndex(*arg2,(std::string const &)*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_addDefaultIndex(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_XmlContainer_addDefaultIndex__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlContainer_addDefaultIndex__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlContainer_addDefaultIndex'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_deleteDefaultIndex__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlUpdateContext *arg4 = 0 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlContainer_deleteDefaultIndex self txn index uc ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->deleteDefaultIndex(*arg2,(std::string const &)*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_deleteDefaultIndex(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_XmlContainer_deleteDefaultIndex__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlContainer_deleteDefaultIndex__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlContainer_deleteDefaultIndex'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_replaceDefaultIndex__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlUpdateContext *arg4 = 0 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlContainer_replaceDefaultIndex self txn index uc ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->replaceDefaultIndex(*arg2,(std::string const &)*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_replaceDefaultIndex(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_XmlContainer_replaceDefaultIndex__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlContainer_replaceDefaultIndex__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlContainer_replaceDefaultIndex'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_putDocument__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlDocument *arg2 = 0 ;
    XmlUpdateContext *arg3 = 0 ;
    u_int32_t arg4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooi:XmlContainer_putDocument self document context flags ",NULL,NULL,NULL,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->putDocument(*arg2,*arg3,arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_putDocument__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlDocument *arg2 = 0 ;
    XmlUpdateContext *arg3 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlContainer_putDocument self document context ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->putDocument(*arg2,*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_putDocument__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlUpdateContext *arg4 = 0 ;
    u_int32_t arg5 ;
    std::string result;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooi:XmlContainer_putDocument self name contents context flags ",NULL,NULL,NULL,NULL,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (arg1)->putDocument((std::string const &)*arg2,(std::string const &)*arg3,*arg4,arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_putDocument__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlUpdateContext *arg4 = 0 ;
    std::string result;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlContainer_putDocument self name contents context ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (arg1)->putDocument((std::string const &)*arg2,(std::string const &)*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_deleteDocument__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlDocument *arg2 = 0 ;
    XmlUpdateContext *arg3 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlContainer_deleteDocument self document context ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->deleteDocument(*arg2,*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_deleteDocument__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    XmlUpdateContext *arg3 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlContainer_deleteDocument self name context ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->deleteDocument((std::string const &)*arg2,*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_updateDocument__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlDocument *arg2 = 0 ;
    XmlUpdateContext *arg3 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlContainer_updateDocument self document context ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->updateDocument(*arg2,*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_putDocument__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    XmlInputStream *arg3 = (XmlInputStream *) 0 ;
    XmlUpdateContext *arg4 = 0 ;
    u_int32_t arg5 ;
    std::string result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooi:XmlContainer_putDocument self name input context flags ",NULL,NULL,NULL,NULL,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlInputStream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (arg1)->putDocument((std::string const &)*arg2,arg3,*arg4,arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_putDocument__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    XmlInputStream *arg3 = (XmlInputStream *) 0 ;
    XmlUpdateContext *arg4 = 0 ;
    std::string result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlContainer_putDocument self name input context ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlInputStream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (arg1)->putDocument((std::string const &)*arg2,arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_putDocument__SWIG_6(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlInputStream *arg4 = (XmlInputStream *) 0 ;
    XmlUpdateContext *arg5 = 0 ;
    u_int32_t arg6 ;
    std::string result;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooooi:XmlContainer_putDocument self txn name input context flags ",NULL,NULL,NULL,NULL,NULL,&arg6) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlInputStream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[5], (void **) &arg5, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (arg1)->putDocument(*arg2,(std::string const &)*arg3,arg4,*arg5,arg6);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_putDocument__SWIG_7(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlInputStream *arg4 = (XmlInputStream *) 0 ;
    XmlUpdateContext *arg5 = 0 ;
    std::string result;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooo:XmlContainer_putDocument self txn name input context ",NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlInputStream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[5], (void **) &arg5, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (arg1)->putDocument(*arg2,(std::string const &)*arg3,arg4,*arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_putDocument__SWIG_8(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlDocument *arg3 = 0 ;
    XmlUpdateContext *arg4 = 0 ;
    u_int32_t arg5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooi:XmlContainer_putDocument self txn document context flags ",NULL,NULL,NULL,NULL,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->putDocument(*arg2,*arg3,*arg4,arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_putDocument__SWIG_9(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlDocument *arg3 = 0 ;
    XmlUpdateContext *arg4 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlContainer_putDocument self txn document context ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->putDocument(*arg2,*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_putDocument__SWIG_10(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    XmlUpdateContext *arg5 = 0 ;
    u_int32_t arg6 ;
    std::string result;
    std::string temp3 ;
    std::string temp4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooooi:XmlContainer_putDocument self txn name contents context flags ",NULL,NULL,NULL,NULL,NULL,&arg6) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    if ((SWIG_ConvertPtr(objv[5], (void **) &arg5, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (arg1)->putDocument(*arg2,(std::string const &)*arg3,(std::string const &)*arg4,*arg5,arg6);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_putDocument__SWIG_11(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    XmlUpdateContext *arg5 = 0 ;
    std::string result;
    std::string temp3 ;
    std::string temp4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooo:XmlContainer_putDocument self txn name contents context ",NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    if ((SWIG_ConvertPtr(objv[5], (void **) &arg5, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (arg1)->putDocument(*arg2,(std::string const &)*arg3,(std::string const &)*arg4,*arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_putDocument(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_XmlContainer_putDocument__SWIG_1(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlContainer_putDocument__SWIG_0(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlContainer_putDocument__SWIG_9(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlInputStream, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlContainer_putDocument__SWIG_5(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlContainer_putDocument__SWIG_3(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlContainer_putDocument__SWIG_8(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlInputStream, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        {
                            void *ptr;
                            if (SWIG_ConvertPtr(argv[4], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            return _wrap_XmlContainer_putDocument__SWIG_7(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            void *ptr;
                            if (SWIG_ConvertPtr(argv[4], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            return _wrap_XmlContainer_putDocument__SWIG_11(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlInputStream, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlContainer_putDocument__SWIG_4(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlContainer_putDocument__SWIG_2(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlInputStream, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        {
                            void *ptr;
                            if (SWIG_ConvertPtr(argv[4], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            {
                                long tmp;
                                if (Tcl_GetLongFromObj(NULL,argv[5],&tmp) == TCL_ERROR) _v = 0;
                                else _v = 1;
                            }
                            if (_v) {
                                return _wrap_XmlContainer_putDocument__SWIG_6(clientData, interp, objc, objv);
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            void *ptr;
                            if (SWIG_ConvertPtr(argv[4], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            {
                                long tmp;
                                if (Tcl_GetLongFromObj(NULL,argv[5],&tmp) == TCL_ERROR) _v = 0;
                                else _v = 1;
                            }
                            if (_v) {
                                return _wrap_XmlContainer_putDocument__SWIG_10(clientData, interp, objc, objv);
                            }
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlContainer_putDocument'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_deleteDocument__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlDocument *arg3 = 0 ;
    XmlUpdateContext *arg4 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlContainer_deleteDocument self txn document context ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->deleteDocument(*arg2,*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_deleteDocument__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlUpdateContext *arg4 = 0 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlContainer_deleteDocument self txn name context ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->deleteDocument(*arg2,(std::string const &)*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_deleteDocument(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_XmlContainer_deleteDocument__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_XmlContainer_deleteDocument__SWIG_1(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlContainer_deleteDocument__SWIG_2(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlContainer_deleteDocument__SWIG_3(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlContainer_deleteDocument'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_updateDocument__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlDocument *arg3 = 0 ;
    XmlUpdateContext *arg4 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlContainer_updateDocument self txn document context ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->updateDocument(*arg2,*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_updateDocument(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_XmlContainer_updateDocument__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlContainer_updateDocument__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlContainer_updateDocument'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getNumDocuments__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    size_t result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlContainer_getNumDocuments self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (arg1)->getNumDocuments();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getNumDocuments__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    size_t result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlContainer_getNumDocuments self txn ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (arg1)->getNumDocuments(*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getNumDocuments(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_XmlContainer_getNumDocuments__SWIG_0(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_XmlContainer_getNumDocuments__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlContainer_getNumDocuments'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getIndexSpecification__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlIndexSpecification *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlContainer_getIndexSpecification self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlIndexSpecification *)XmlContainer_getIndexSpecification__SWIG_0((XmlContainer const *)arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlIndexSpecification,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getIndexSpecification__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlIndexSpecification *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlContainer_getIndexSpecification self txn ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlIndexSpecification *)XmlContainer_getIndexSpecification__SWIG_1((XmlContainer const *)arg1,*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlIndexSpecification,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getIndexSpecification__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    u_int32_t arg3 ;
    XmlIndexSpecification *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooi:XmlContainer_getIndexSpecification self txn flags ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlIndexSpecification *)XmlContainer_getIndexSpecification__SWIG_2((XmlContainer const *)arg1,*arg2,arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlIndexSpecification,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getIndexSpecification(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_XmlContainer_getIndexSpecification__SWIG_0(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_XmlContainer_getIndexSpecification__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_XmlContainer_getIndexSpecification__SWIG_2(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlContainer_getIndexSpecification'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getDocument__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    XmlDocument *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlContainer_getDocument self name ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (XmlDocument *)XmlContainer_getDocument__SWIG_0(arg1,(std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlDocument,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getDocument__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlDocument *result;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlContainer_getDocument self txn name ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            result = (XmlDocument *)XmlContainer_getDocument__SWIG_1(arg1,*arg2,(std::string const &)*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlDocument,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getDocument__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    u_int32_t arg3 ;
    XmlDocument *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooi:XmlContainer_getDocument self name flags ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (XmlDocument *)XmlContainer_getDocument__SWIG_2(arg1,(std::string const &)*arg2,arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlDocument,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getDocument__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    u_int32_t arg4 ;
    XmlDocument *result;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooi:XmlContainer_getDocument self txn name flags ",NULL,NULL,NULL,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            result = (XmlDocument *)XmlContainer_getDocument__SWIG_3(arg1,*arg2,(std::string const &)*arg3,arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlDocument,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getDocument(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                return _wrap_XmlContainer_getDocument__SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    return _wrap_XmlContainer_getDocument__SWIG_1(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_XmlContainer_getDocument__SWIG_2(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlContainer_getDocument__SWIG_3(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlContainer_getDocument'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getAllDocuments__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    u_int32_t arg2 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oi:XmlContainer_getAllDocuments self flags ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlContainer_getAllDocuments__SWIG_0(arg1,arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getAllDocuments__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    u_int32_t arg3 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooi:XmlContainer_getAllDocuments self txn flags ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlContainer_getAllDocuments__SWIG_1(arg1,*arg2,arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_getAllDocuments(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_XmlContainer_getAllDocuments__SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_XmlContainer_getAllDocuments__SWIG_1(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlContainer_getAllDocuments'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupIndex__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlQueryContext *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    XmlValue *arg6 = 0 ;
    u_int32_t arg7 ;
    XmlResults *result;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooooi:XmlContainer_lookupIndex self context uri name index value flags ",NULL,NULL,NULL,NULL,NULL,NULL,&arg7) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    if ((SWIG_ConvertPtr(objv[6], (void **) &arg6, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlContainer_lookupIndex__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(XmlValue const &)*arg6,arg7);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupIndex__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlQueryContext *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    XmlValue *arg6 = 0 ;
    XmlResults *result;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooooo:XmlContainer_lookupIndex self context uri name index value ",NULL,NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    if ((SWIG_ConvertPtr(objv[6], (void **) &arg6, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlContainer_lookupIndex__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(XmlValue const &)*arg6);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupIndex__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlQueryContext *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    XmlResults *result;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooo:XmlContainer_lookupIndex self context uri name index ",NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        try {
            result = (XmlResults *)XmlContainer_lookupIndex__SWIG_0(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupIndex__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlQueryContext *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    std::string *arg7 = 0 ;
    XmlValue *arg8 = 0 ;
    u_int32_t arg9 ;
    XmlResults *result;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    std::string temp6 ;
    std::string temp7 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooooooi:XmlContainer_lookupIndex self context uri name parent_uri parent_name index value flags ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,&arg9) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        temp6 = std::string(Tcl_GetStringFromObj(objv[6],NULL));
        arg6 = &temp6;
    }
    {
        temp7 = std::string(Tcl_GetStringFromObj(objv[7],NULL));
        arg7 = &temp7;
    }
    if ((SWIG_ConvertPtr(objv[8], (void **) &arg8, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlContainer_lookupIndex__SWIG_3(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(XmlValue const &)*arg8,arg9);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupIndex__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlQueryContext *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    std::string *arg7 = 0 ;
    XmlValue *arg8 = 0 ;
    XmlResults *result;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    std::string temp6 ;
    std::string temp7 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooooooo:XmlContainer_lookupIndex self context uri name parent_uri parent_name index value ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        temp6 = std::string(Tcl_GetStringFromObj(objv[6],NULL));
        arg6 = &temp6;
    }
    {
        temp7 = std::string(Tcl_GetStringFromObj(objv[7],NULL));
        arg7 = &temp7;
    }
    if ((SWIG_ConvertPtr(objv[8], (void **) &arg8, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlContainer_lookupIndex__SWIG_3(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(XmlValue const &)*arg8);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupIndex__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlQueryContext *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    std::string *arg7 = 0 ;
    XmlResults *result;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    std::string temp6 ;
    std::string temp7 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooooo:XmlContainer_lookupIndex self context uri name parent_uri parent_name index ",NULL,NULL,NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        temp6 = std::string(Tcl_GetStringFromObj(objv[6],NULL));
        arg6 = &temp6;
    }
    {
        temp7 = std::string(Tcl_GetStringFromObj(objv[7],NULL));
        arg7 = &temp7;
    }
    {
        try {
            result = (XmlResults *)XmlContainer_lookupIndex__SWIG_3(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupIndex__SWIG_6(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    XmlValue *arg7 = 0 ;
    u_int32_t arg8 ;
    XmlResults *result;
    std::string temp4 ;
    std::string temp5 ;
    std::string temp6 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooooooi:XmlContainer_lookupIndex self txn context uri name index value flags ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,&arg8) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        temp6 = std::string(Tcl_GetStringFromObj(objv[6],NULL));
        arg6 = &temp6;
    }
    if ((SWIG_ConvertPtr(objv[7], (void **) &arg7, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlContainer_lookupIndex__SWIG_6(arg1,*arg2,*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(XmlValue const &)*arg7,arg8);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupIndex__SWIG_7(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    XmlValue *arg7 = 0 ;
    XmlResults *result;
    std::string temp4 ;
    std::string temp5 ;
    std::string temp6 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooooo:XmlContainer_lookupIndex self txn context uri name index value ",NULL,NULL,NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        temp6 = std::string(Tcl_GetStringFromObj(objv[6],NULL));
        arg6 = &temp6;
    }
    if ((SWIG_ConvertPtr(objv[7], (void **) &arg7, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlContainer_lookupIndex__SWIG_6(arg1,*arg2,*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(XmlValue const &)*arg7);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupIndex__SWIG_8(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    XmlResults *result;
    std::string temp4 ;
    std::string temp5 ;
    std::string temp6 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooooo:XmlContainer_lookupIndex self txn context uri name index ",NULL,NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        temp6 = std::string(Tcl_GetStringFromObj(objv[6],NULL));
        arg6 = &temp6;
    }
    {
        try {
            result = (XmlResults *)XmlContainer_lookupIndex__SWIG_6(arg1,*arg2,*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupIndex__SWIG_9(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    std::string *arg7 = 0 ;
    std::string *arg8 = 0 ;
    XmlValue *arg9 = 0 ;
    u_int32_t arg10 ;
    XmlResults *result;
    std::string temp4 ;
    std::string temp5 ;
    std::string temp6 ;
    std::string temp7 ;
    std::string temp8 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooooooooi:XmlContainer_lookupIndex self txn context uri name parent_uri parent_name index value flags ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,&arg10) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        temp6 = std::string(Tcl_GetStringFromObj(objv[6],NULL));
        arg6 = &temp6;
    }
    {
        temp7 = std::string(Tcl_GetStringFromObj(objv[7],NULL));
        arg7 = &temp7;
    }
    {
        temp8 = std::string(Tcl_GetStringFromObj(objv[8],NULL));
        arg8 = &temp8;
    }
    if ((SWIG_ConvertPtr(objv[9], (void **) &arg9, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlContainer_lookupIndex__SWIG_9(arg1,*arg2,*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8,(XmlValue const &)*arg9,arg10);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupIndex__SWIG_10(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    std::string *arg7 = 0 ;
    std::string *arg8 = 0 ;
    XmlValue *arg9 = 0 ;
    XmlResults *result;
    std::string temp4 ;
    std::string temp5 ;
    std::string temp6 ;
    std::string temp7 ;
    std::string temp8 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooooooo:XmlContainer_lookupIndex self txn context uri name parent_uri parent_name index value ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        temp6 = std::string(Tcl_GetStringFromObj(objv[6],NULL));
        arg6 = &temp6;
    }
    {
        temp7 = std::string(Tcl_GetStringFromObj(objv[7],NULL));
        arg7 = &temp7;
    }
    {
        temp8 = std::string(Tcl_GetStringFromObj(objv[8],NULL));
        arg8 = &temp8;
    }
    if ((SWIG_ConvertPtr(objv[9], (void **) &arg9, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlContainer_lookupIndex__SWIG_9(arg1,*arg2,*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8,(XmlValue const &)*arg9);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupIndex__SWIG_11(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    std::string *arg7 = 0 ;
    std::string *arg8 = 0 ;
    XmlResults *result;
    std::string temp4 ;
    std::string temp5 ;
    std::string temp6 ;
    std::string temp7 ;
    std::string temp8 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooooooo:XmlContainer_lookupIndex self txn context uri name parent_uri parent_name index ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        temp6 = std::string(Tcl_GetStringFromObj(objv[6],NULL));
        arg6 = &temp6;
    }
    {
        temp7 = std::string(Tcl_GetStringFromObj(objv[7],NULL));
        arg7 = &temp7;
    }
    {
        temp8 = std::string(Tcl_GetStringFromObj(objv[8],NULL));
        arg8 = &temp8;
    }
    {
        try {
            result = (XmlResults *)XmlContainer_lookupIndex__SWIG_9(arg1,*arg2,*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupIndex(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlContainer_lookupIndex__SWIG_2(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                void *ptr;
                                if (SWIG_ConvertPtr(argv[5], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                                    _v = 0;
                                } else {
                                    _v = 1;
                                }
                            }
                            if (_v) {
                                return _wrap_XmlContainer_lookupIndex__SWIG_1(clientData, interp, objc, objv);
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                _v = 1;
                            }
                            if (_v) {
                                return _wrap_XmlContainer_lookupIndex__SWIG_8(clientData, interp, objc, objv);
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                void *ptr;
                                if (SWIG_ConvertPtr(argv[5], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                                    _v = 0;
                                } else {
                                    _v = 1;
                                }
                            }
                            if (_v) {
                                {
                                    long tmp;
                                    if (Tcl_GetLongFromObj(NULL,argv[6],&tmp) == TCL_ERROR) _v = 0;
                                    else _v = 1;
                                }
                                if (_v) {
                                    return _wrap_XmlContainer_lookupIndex__SWIG_0(clientData, interp, objc, objv);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                _v = 1;
                            }
                            if (_v) {
                                {
                                    void *ptr;
                                    if (SWIG_ConvertPtr(argv[6], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                                        _v = 0;
                                    } else {
                                        _v = 1;
                                    }
                                }
                                if (_v) {
                                    return _wrap_XmlContainer_lookupIndex__SWIG_7(clientData, interp, objc, objv);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                _v = 1;
                            }
                            if (_v) {
                                {
                                    _v = 1;
                                }
                                if (_v) {
                                    return _wrap_XmlContainer_lookupIndex__SWIG_5(clientData, interp, objc, objv);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 8) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                _v = 1;
                            }
                            if (_v) {
                                {
                                    _v = 1;
                                }
                                if (_v) {
                                    {
                                        void *ptr;
                                        if (SWIG_ConvertPtr(argv[7], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                                            _v = 0;
                                        } else {
                                            _v = 1;
                                        }
                                    }
                                    if (_v) {
                                        return _wrap_XmlContainer_lookupIndex__SWIG_4(clientData, interp, objc, objv);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 8) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                _v = 1;
                            }
                            if (_v) {
                                {
                                    void *ptr;
                                    if (SWIG_ConvertPtr(argv[6], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                                        _v = 0;
                                    } else {
                                        _v = 1;
                                    }
                                }
                                if (_v) {
                                    {
                                        long tmp;
                                        if (Tcl_GetLongFromObj(NULL,argv[7],&tmp) == TCL_ERROR) _v = 0;
                                        else _v = 1;
                                    }
                                    if (_v) {
                                        return _wrap_XmlContainer_lookupIndex__SWIG_6(clientData, interp, objc, objv);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 8) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                _v = 1;
                            }
                            if (_v) {
                                {
                                    _v = 1;
                                }
                                if (_v) {
                                    {
                                        _v = 1;
                                    }
                                    if (_v) {
                                        return _wrap_XmlContainer_lookupIndex__SWIG_11(clientData, interp, objc, objv);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 9) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                _v = 1;
                            }
                            if (_v) {
                                {
                                    _v = 1;
                                }
                                if (_v) {
                                    {
                                        _v = 1;
                                    }
                                    if (_v) {
                                        {
                                            void *ptr;
                                            if (SWIG_ConvertPtr(argv[8], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                                                _v = 0;
                                            } else {
                                                _v = 1;
                                            }
                                        }
                                        if (_v) {
                                            return _wrap_XmlContainer_lookupIndex__SWIG_10(clientData, interp, objc, objv);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 9) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                _v = 1;
                            }
                            if (_v) {
                                {
                                    _v = 1;
                                }
                                if (_v) {
                                    {
                                        void *ptr;
                                        if (SWIG_ConvertPtr(argv[7], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                                            _v = 0;
                                        } else {
                                            _v = 1;
                                        }
                                    }
                                    if (_v) {
                                        {
                                            long tmp;
                                            if (Tcl_GetLongFromObj(NULL,argv[8],&tmp) == TCL_ERROR) _v = 0;
                                            else _v = 1;
                                        }
                                        if (_v) {
                                            return _wrap_XmlContainer_lookupIndex__SWIG_3(clientData, interp, objc, objv);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 10) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                _v = 1;
                            }
                            if (_v) {
                                {
                                    _v = 1;
                                }
                                if (_v) {
                                    {
                                        _v = 1;
                                    }
                                    if (_v) {
                                        {
                                            void *ptr;
                                            if (SWIG_ConvertPtr(argv[8], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                                                _v = 0;
                                            } else {
                                                _v = 1;
                                            }
                                        }
                                        if (_v) {
                                            {
                                                long tmp;
                                                if (Tcl_GetLongFromObj(NULL,argv[9],&tmp) == TCL_ERROR) _v = 0;
                                                else _v = 1;
                                            }
                                            if (_v) {
                                                return _wrap_XmlContainer_lookupIndex__SWIG_9(clientData, interp, objc, objv);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlContainer_lookupIndex'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupStatistics__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    XmlValue *arg5 = 0 ;
    XmlStatistics *result;
    std::string temp2 ;
    std::string temp3 ;
    std::string temp4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooo:XmlContainer_lookupStatistics self uri name index value ",NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    if ((SWIG_ConvertPtr(objv[5], (void **) &arg5, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlStatistics *)XmlContainer_lookupStatistics__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(XmlValue const &)*arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlStatistics,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupStatistics__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    XmlStatistics *result;
    std::string temp2 ;
    std::string temp3 ;
    std::string temp4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlContainer_lookupStatistics self uri name index ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        try {
            result = (XmlStatistics *)XmlContainer_lookupStatistics__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlStatistics,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupStatistics__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    XmlValue *arg7 = 0 ;
    XmlStatistics *result;
    std::string temp2 ;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    std::string temp6 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooooo:XmlContainer_lookupStatistics self uri name parent_uri parent_name index value ",NULL,NULL,NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        temp6 = std::string(Tcl_GetStringFromObj(objv[6],NULL));
        arg6 = &temp6;
    }
    if ((SWIG_ConvertPtr(objv[7], (void **) &arg7, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlStatistics *)XmlContainer_lookupStatistics__SWIG_2(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(XmlValue const &)*arg7);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlStatistics,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupStatistics__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    XmlStatistics *result;
    std::string temp2 ;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    std::string temp6 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooooo:XmlContainer_lookupStatistics self uri name parent_uri parent_name index ",NULL,NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        temp6 = std::string(Tcl_GetStringFromObj(objv[6],NULL));
        arg6 = &temp6;
    }
    {
        try {
            result = (XmlStatistics *)XmlContainer_lookupStatistics__SWIG_2(arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlStatistics,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupStatistics__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    XmlValue *arg6 = 0 ;
    XmlStatistics *result;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooooo:XmlContainer_lookupStatistics self txn uri name index value ",NULL,NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    if ((SWIG_ConvertPtr(objv[6], (void **) &arg6, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlStatistics *)XmlContainer_lookupStatistics__SWIG_4(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(XmlValue const &)*arg6);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlStatistics,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupStatistics__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    XmlStatistics *result;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooo:XmlContainer_lookupStatistics self txn uri name index ",NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        try {
            result = (XmlStatistics *)XmlContainer_lookupStatistics__SWIG_4(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlStatistics,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupStatistics__SWIG_6(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    std::string *arg7 = 0 ;
    XmlValue *arg8 = 0 ;
    XmlStatistics *result;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    std::string temp6 ;
    std::string temp7 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooooooo:XmlContainer_lookupStatistics self txn uri name parent_uri parent_name index value ",NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        temp6 = std::string(Tcl_GetStringFromObj(objv[6],NULL));
        arg6 = &temp6;
    }
    {
        temp7 = std::string(Tcl_GetStringFromObj(objv[7],NULL));
        arg7 = &temp7;
    }
    if ((SWIG_ConvertPtr(objv[8], (void **) &arg8, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlStatistics *)XmlContainer_lookupStatistics__SWIG_6(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(XmlValue const &)*arg8);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlStatistics,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupStatistics__SWIG_7(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlContainer *arg1 = (XmlContainer *) 0 ;
    XmlTransaction *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string *arg6 = 0 ;
    std::string *arg7 = 0 ;
    XmlStatistics *result;
    std::string temp3 ;
    std::string temp4 ;
    std::string temp5 ;
    std::string temp6 ;
    std::string temp7 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooooo:XmlContainer_lookupStatistics self txn uri name parent_uri parent_name index ",NULL,NULL,NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlContainer,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        temp6 = std::string(Tcl_GetStringFromObj(objv[6],NULL));
        arg6 = &temp6;
    }
    {
        temp7 = std::string(Tcl_GetStringFromObj(objv[7],NULL));
        arg7 = &temp7;
    }
    {
        try {
            result = (XmlStatistics *)XmlContainer_lookupStatistics__SWIG_6(arg1,*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlStatistics,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlContainer_lookupStatistics(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlContainer_lookupStatistics__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlContainer_lookupStatistics__SWIG_5(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            void *ptr;
                            if (SWIG_ConvertPtr(argv[4], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            return _wrap_XmlContainer_lookupStatistics__SWIG_0(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                void *ptr;
                                if (SWIG_ConvertPtr(argv[5], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                                    _v = 0;
                                } else {
                                    _v = 1;
                                }
                            }
                            if (_v) {
                                return _wrap_XmlContainer_lookupStatistics__SWIG_4(clientData, interp, objc, objv);
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                _v = 1;
                            }
                            if (_v) {
                                return _wrap_XmlContainer_lookupStatistics__SWIG_3(clientData, interp, objc, objv);
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                _v = 1;
                            }
                            if (_v) {
                                {
                                    _v = 1;
                                }
                                if (_v) {
                                    return _wrap_XmlContainer_lookupStatistics__SWIG_7(clientData, interp, objc, objv);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                _v = 1;
                            }
                            if (_v) {
                                {
                                    void *ptr;
                                    if (SWIG_ConvertPtr(argv[6], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                                        _v = 0;
                                    } else {
                                        _v = 1;
                                    }
                                }
                                if (_v) {
                                    return _wrap_XmlContainer_lookupStatistics__SWIG_2(clientData, interp, objc, objv);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 8) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlContainer, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                _v = 1;
                            }
                            if (_v) {
                                {
                                    _v = 1;
                                }
                                if (_v) {
                                    {
                                        void *ptr;
                                        if (SWIG_ConvertPtr(argv[7], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                                            _v = 0;
                                        } else {
                                            _v = 1;
                                        }
                                    }
                                    if (_v) {
                                        return _wrap_XmlContainer_lookupStatistics__SWIG_6(clientData, interp, objc, objv);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlContainer_lookupStatistics'", TCL_STATIC);
    return TCL_ERROR;
}


static void swig_delete_XmlContainer(void *obj) {
XmlContainer *arg1 = (XmlContainer *) obj;
delete arg1;
}
static swig_method swig_XmlContainer_methods[] = {
    {"sync", _wrap_XmlContainer_sync}, 
    {"close", _wrap_XmlContainer_close}, 
    {"addAlias", _wrap_XmlContainer_addAlias}, 
    {"removeAlias", _wrap_XmlContainer_removeAlias}, 
    {"getManager", _wrap_XmlContainer_getManager}, 
    {"getName", _wrap_XmlContainer_getName}, 
    {"getContainerType", _wrap_XmlContainer_getContainerType}, 
    {"getIndexNodes", _wrap_XmlContainer_getIndexNodes}, 
    {"getPageSize", _wrap_XmlContainer_getPageSize}, 
    {"setIndexSpecification", _wrap_XmlContainer_setIndexSpecification}, 
    {"addIndex", _wrap_XmlContainer_addIndex}, 
    {"deleteIndex", _wrap_XmlContainer_deleteIndex}, 
    {"replaceIndex", _wrap_XmlContainer_replaceIndex}, 
    {"addDefaultIndex", _wrap_XmlContainer_addDefaultIndex}, 
    {"deleteDefaultIndex", _wrap_XmlContainer_deleteDefaultIndex}, 
    {"replaceDefaultIndex", _wrap_XmlContainer_replaceDefaultIndex}, 
    {"putDocument", _wrap_XmlContainer_putDocument}, 
    {"deleteDocument", _wrap_XmlContainer_deleteDocument}, 
    {"updateDocument", _wrap_XmlContainer_updateDocument}, 
    {"getNumDocuments", _wrap_XmlContainer_getNumDocuments}, 
    {"getIndexSpecification", _wrap_XmlContainer_getIndexSpecification}, 
    {"getDocument", _wrap_XmlContainer_getDocument}, 
    {"getAllDocuments", _wrap_XmlContainer_getAllDocuments}, 
    {"lookupIndex", _wrap_XmlContainer_lookupIndex}, 
    {"lookupStatistics", _wrap_XmlContainer_lookupStatistics}, 
    {0,0}
};
static swig_attribute swig_XmlContainer_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlContainer_bases[] = {0};
static char *swig_XmlContainer_base_names[] = {0};
swig_class _wrap_class_XmlContainer = { "XmlContainer", &SWIGTYPE_p_XmlContainer,_wrap_new_XmlContainer, swig_delete_XmlContainer, swig_XmlContainer_methods, swig_XmlContainer_attributes, swig_XmlContainer_bases,swig_XmlContainer_base_names };
static int
_wrap_new_XmlDocument__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_XmlDocument ") == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (XmlDocument *)new XmlDocument();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlDocument,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlDocument__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = 0 ;
    XmlDocument *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_XmlDocument o ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlDocument *)new XmlDocument((XmlDocument const &)*arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlDocument,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlDocument(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_XmlDocument__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_XmlDocument__SWIG_1(clientData, interp, objc, objv);
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_XmlDocument'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_XmlDocument(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = (XmlDocument *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlDocument self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_setName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = (XmlDocument *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlDocument_setName self name ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            (arg1)->setName((std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_getName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = (XmlDocument *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlDocument_getName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = ((XmlDocument const *)arg1)->getName();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_setContent(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = (XmlDocument *) 0 ;
    XmlData *arg2 = 0 ;
    XmlData xml_data2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlDocument_setContent self content ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        int len;
        char *data = (char *)Tcl_GetByteArrayFromObj(objv[2], &len);
        xml_data2.set_data(data);
        xml_data2.set_size(len);
        arg2 = &xml_data2;
    }
    {
        try {
            (arg1)->setContent((XmlData const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_getContentAsXmlInputStream(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = (XmlDocument *) 0 ;
    XmlInputStream *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlDocument_getContentAsXmlInputStream self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlInputStream *)((XmlDocument const *)arg1)->getContentAsXmlInputStream();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlInputStream,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_setContentAsXmlInputStream(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = (XmlDocument *) 0 ;
    XmlInputStream *arg2 = (XmlInputStream *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlDocument_setContentAsXmlInputStream self adopted ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlInputStream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->setContentAsXmlInputStream(arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_fetchAllData(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = (XmlDocument *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlDocument_fetchAllData self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->fetchAllData();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_setMetaData__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = (XmlDocument *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlValue *arg4 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlDocument_setMetaData self uri name value ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->setMetaData((std::string const &)*arg2,(std::string const &)*arg3,(XmlValue const &)*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_getMetaData__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = (XmlDocument *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlValue *arg4 = 0 ;
    bool result;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlDocument_getMetaData self uri name value ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->getMetaData((std::string const &)*arg2,(std::string const &)*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_removeMetaData(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = (XmlDocument *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlDocument_removeMetaData self uri name ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            (arg1)->removeMetaData((std::string const &)*arg2,(std::string const &)*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_setMetaData__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = (XmlDocument *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlData *arg4 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    XmlData xml_data4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlDocument_setMetaData self uri name value ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        int len;
        char *data = (char *)Tcl_GetByteArrayFromObj(objv[4], &len);
        xml_data4.set_data(data);
        xml_data4.set_size(len);
        arg4 = &xml_data4;
    }
    {
        try {
            (arg1)->setMetaData((std::string const &)*arg2,(std::string const &)*arg3,(XmlData const &)*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_setMetaData(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlDocument_setMetaData__SWIG_0(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlData, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlDocument_setMetaData__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlDocument_setMetaData'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_getMetaData__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = (XmlDocument *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlData *arg4 = 0 ;
    bool result;
    std::string temp2 ;
    std::string temp3 ;
    XmlData xml_data4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlDocument_getMetaData self uri name value ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        int len;
        char *data = (char *)Tcl_GetByteArrayFromObj(objv[4], &len);
        xml_data4.set_data(data);
        xml_data4.set_size(len);
        arg4 = &xml_data4;
    }
    {
        try {
            result = (bool)(arg1)->getMetaData((std::string const &)*arg2,(std::string const &)*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_getContentAsString(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = (XmlDocument *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlDocument_getContentAsString self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = XmlDocument_getContentAsString((XmlDocument const *)arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_getContent(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = (XmlDocument *) 0 ;
    XmlData *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlDocument_getContent self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlData *)XmlDocument_getContent((XmlDocument const *)arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        if (result) {
            Tcl_SetObjResult(interp, Tcl_NewByteArrayObj((unsigned char *)result->get_data(), result->get_size()));
            delete result; // done with new XmlData object
        } else
        Tcl_SetResult(interp, (char *) "", TCL_STATIC);
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_getMetaData__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = (XmlDocument *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlData *result;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlDocument_getMetaData self uri name ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            result = (XmlData *)XmlDocument_getMetaData__SWIG_2(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        if (result) {
            Tcl_SetObjResult(interp, Tcl_NewByteArrayObj((unsigned char *)result->get_data(), result->get_size()));
            delete result; // done with new XmlData object
        } else
        Tcl_SetResult(interp, (char *) "", TCL_STATIC);
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_getMetaData(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    return _wrap_XmlDocument_getMetaData__SWIG_2(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlData, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlDocument_getMetaData__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlDocument_getMetaData__SWIG_0(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlDocument_getMetaData'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlDocument_getMetaDataIterator(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = (XmlDocument *) 0 ;
    XmlMetaDataIterator *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlDocument_getMetaDataIterator self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlMetaDataIterator *)XmlDocument_getMetaDataIterator((XmlDocument const *)arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlMetaDataIterator,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_XmlDocument(void *obj) {
XmlDocument *arg1 = (XmlDocument *) obj;
delete arg1;
}
static swig_method swig_XmlDocument_methods[] = {
    {"setName", _wrap_XmlDocument_setName}, 
    {"getName", _wrap_XmlDocument_getName}, 
    {"setContent", _wrap_XmlDocument_setContent}, 
    {"getContentAsXmlInputStream", _wrap_XmlDocument_getContentAsXmlInputStream}, 
    {"setContentAsXmlInputStream", _wrap_XmlDocument_setContentAsXmlInputStream}, 
    {"fetchAllData", _wrap_XmlDocument_fetchAllData}, 
    {"removeMetaData", _wrap_XmlDocument_removeMetaData}, 
    {"setMetaData", _wrap_XmlDocument_setMetaData}, 
    {"getContentAsString", _wrap_XmlDocument_getContentAsString}, 
    {"getContent", _wrap_XmlDocument_getContent}, 
    {"getMetaData", _wrap_XmlDocument_getMetaData}, 
    {"getMetaDataIterator", _wrap_XmlDocument_getMetaDataIterator}, 
    {0,0}
};
static swig_attribute swig_XmlDocument_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlDocument_bases[] = {0};
static char *swig_XmlDocument_base_names[] = {0};
swig_class _wrap_class_XmlDocument = { "XmlDocument", &SWIGTYPE_p_XmlDocument,_wrap_new_XmlDocument, swig_delete_XmlDocument, swig_XmlDocument_methods, swig_XmlDocument_attributes, swig_XmlDocument_bases,swig_XmlDocument_base_names };
static int
_wrap_new_XmlMetaDataIterator(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlMetaDataIterator *arg1 = 0 ;
    XmlMetaDataIterator *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_XmlMetaDataIterator o ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlMetaDataIterator,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlMetaDataIterator *)new XmlMetaDataIterator((XmlMetaDataIterator const &)*arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlMetaDataIterator,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_delete_XmlMetaDataIterator(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlMetaDataIterator *arg1 = (XmlMetaDataIterator *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlMetaDataIterator self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlMetaDataIterator,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlMetaDataIterator_reset(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlMetaDataIterator *arg1 = (XmlMetaDataIterator *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlMetaDataIterator_reset self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlMetaDataIterator,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->reset();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlMetaDataIterator_next(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlMetaDataIterator *arg1 = (XmlMetaDataIterator *) 0 ;
    XmlMetaData *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlMetaDataIterator_next self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlMetaDataIterator,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlMetaData *)XmlMetaDataIterator_next(arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlMetaData,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_XmlMetaDataIterator(void *obj) {
XmlMetaDataIterator *arg1 = (XmlMetaDataIterator *) obj;
delete arg1;
}
static swig_method swig_XmlMetaDataIterator_methods[] = {
    {"reset", _wrap_XmlMetaDataIterator_reset}, 
    {"next", _wrap_XmlMetaDataIterator_next}, 
    {0,0}
};
static swig_attribute swig_XmlMetaDataIterator_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlMetaDataIterator_bases[] = {0};
static char *swig_XmlMetaDataIterator_base_names[] = {0};
swig_class _wrap_class_XmlMetaDataIterator = { "XmlMetaDataIterator", &SWIGTYPE_p_XmlMetaDataIterator,_wrap_new_XmlMetaDataIterator, swig_delete_XmlMetaDataIterator, swig_XmlMetaDataIterator_methods, swig_XmlMetaDataIterator_attributes, swig_XmlMetaDataIterator_bases,swig_XmlMetaDataIterator_base_names };
static int
_wrap_delete_XmlMetaData(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlMetaData *arg1 = (XmlMetaData *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlMetaData self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlMetaData,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlMetaData_get_uri(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlMetaData *arg1 = (XmlMetaData *) 0 ;
    std::string *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlMetaData_get_uri self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlMetaData,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                std::string const &_result_ref = ((XmlMetaData const *)arg1)->get_uri();
                result = (std::string *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)result->c_str(),result->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlMetaData_get_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlMetaData *arg1 = (XmlMetaData *) 0 ;
    std::string *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlMetaData_get_name self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlMetaData,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                std::string const &_result_ref = ((XmlMetaData const *)arg1)->get_name();
                result = (std::string *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)result->c_str(),result->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlMetaData_get_value(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlMetaData *arg1 = (XmlMetaData *) 0 ;
    XmlValue *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlMetaData_get_value self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlMetaData,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                XmlValue const &_result_ref = ((XmlMetaData const *)arg1)->get_value();
                result = (XmlValue *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlMetaData(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlMetaData *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_XmlMetaData ") == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (XmlMetaData *)new XmlMetaData();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlMetaData,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_XmlMetaData(void *obj) {
XmlMetaData *arg1 = (XmlMetaData *) obj;
delete arg1;
}
static swig_method swig_XmlMetaData_methods[] = {
    {"get_uri", _wrap_XmlMetaData_get_uri}, 
    {"get_name", _wrap_XmlMetaData_get_name}, 
    {"get_value", _wrap_XmlMetaData_get_value}, 
    {0,0}
};
static swig_attribute swig_XmlMetaData_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlMetaData_bases[] = {0};
static char *swig_XmlMetaData_base_names[] = {0};
swig_class _wrap_class_XmlMetaData = { "XmlMetaData", &SWIGTYPE_p_XmlMetaData,_wrap_new_XmlMetaData, swig_delete_XmlMetaData, swig_XmlMetaData_methods, swig_XmlMetaData_attributes, swig_XmlMetaData_bases,swig_XmlMetaData_base_names };
static int
_wrap_new_XmlQueryContext__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_XmlQueryContext ") == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (XmlQueryContext *)new XmlQueryContext();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlQueryContext,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlQueryContext__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = 0 ;
    XmlQueryContext *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_XmlQueryContext o ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlQueryContext *)new XmlQueryContext((XmlQueryContext const &)*arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlQueryContext,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlQueryContext(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_XmlQueryContext__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_XmlQueryContext__SWIG_1(clientData, interp, objc, objv);
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_XmlQueryContext'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_XmlQueryContext(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlQueryContext self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_setNamespace(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlQueryContext_setNamespace self prefix uri ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            (arg1)->setNamespace((std::string const &)*arg2,(std::string const &)*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_getNamespace(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    std::string *arg2 = 0 ;
    std::string result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlQueryContext_getNamespace self prefix ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (arg1)->getNamespace((std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_removeNamespace(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlQueryContext_removeNamespace self prefix ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            (arg1)->removeNamespace((std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_clearNamespaces(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlQueryContext_clearNamespaces self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->clearNamespaces();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_setVariableValue__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    std::string *arg2 = 0 ;
    XmlValue *arg3 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlQueryContext_setVariableValue self name value ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->setVariableValue((std::string const &)*arg2,(XmlValue const &)*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_setVariableValue__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    std::string *arg2 = 0 ;
    XmlResults *arg3 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlQueryContext_setVariableValue self name value ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlResults,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->setVariableValue((std::string const &)*arg2,*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_setVariableValue(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_XmlQueryContext_setVariableValue__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlResults, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_XmlQueryContext_setVariableValue__SWIG_1(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlQueryContext_setVariableValue'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_setBaseURI(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlQueryContext_setBaseURI self baseURI ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            (arg1)->setBaseURI((std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_getBaseURI(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlQueryContext_getBaseURI self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = ((XmlQueryContext const *)arg1)->getBaseURI();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_setReturnType(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    enum XmlQueryContext::ReturnType arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oi:XmlQueryContext_setReturnType self type ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->setReturnType((enum XmlQueryContext::ReturnType )arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_getReturnType(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    enum XmlQueryContext::ReturnType result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlQueryContext_getReturnType self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (enum XmlQueryContext::ReturnType)((XmlQueryContext const *)arg1)->getReturnType();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_setEvaluationType(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    enum XmlQueryContext::EvaluationType arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oi:XmlQueryContext_setEvaluationType self type ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->setEvaluationType((enum XmlQueryContext::EvaluationType )arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_getEvaluationType(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    enum XmlQueryContext::EvaluationType result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlQueryContext_getEvaluationType self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (enum XmlQueryContext::EvaluationType)((XmlQueryContext const *)arg1)->getEvaluationType();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_setDefaultCollection(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlQueryContext_setDefaultCollection self uri ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            (arg1)->setDefaultCollection((std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_getDefaultCollection(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlQueryContext_getDefaultCollection self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = ((XmlQueryContext const *)arg1)->getDefaultCollection();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_getVariableValue(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    std::string *arg2 = 0 ;
    XmlValue *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlQueryContext_getVariableValue self name ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (XmlValue *)XmlQueryContext_getVariableValue((XmlQueryContext const *)arg1,(std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_getVariableValues(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    std::string *arg2 = 0 ;
    XmlResults *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlQueryContext_getVariableValues self name ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (XmlResults *)XmlQueryContext_getVariableValues((XmlQueryContext const *)arg1,(std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    char *arg2 = (char *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"os:XmlQueryContext_get self name ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = XmlQueryContext_get((XmlQueryContext const *)arg1,(char const *)arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlQueryContext_set self name value ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            XmlQueryContext_set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryContext_setDebugVariable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryContext *arg1 = (XmlQueryContext *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlQueryContext_setDebugVariable self var ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            XmlQueryContext_setDebugVariable(arg1,(std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_XmlQueryContext(void *obj) {
XmlQueryContext *arg1 = (XmlQueryContext *) obj;
delete arg1;
}
static swig_method swig_XmlQueryContext_methods[] = {
    {"setNamespace", _wrap_XmlQueryContext_setNamespace}, 
    {"getNamespace", _wrap_XmlQueryContext_getNamespace}, 
    {"removeNamespace", _wrap_XmlQueryContext_removeNamespace}, 
    {"clearNamespaces", _wrap_XmlQueryContext_clearNamespaces}, 
    {"setVariableValue", _wrap_XmlQueryContext_setVariableValue}, 
    {"setBaseURI", _wrap_XmlQueryContext_setBaseURI}, 
    {"getBaseURI", _wrap_XmlQueryContext_getBaseURI}, 
    {"setReturnType", _wrap_XmlQueryContext_setReturnType}, 
    {"getReturnType", _wrap_XmlQueryContext_getReturnType}, 
    {"setEvaluationType", _wrap_XmlQueryContext_setEvaluationType}, 
    {"getEvaluationType", _wrap_XmlQueryContext_getEvaluationType}, 
    {"setDefaultCollection", _wrap_XmlQueryContext_setDefaultCollection}, 
    {"getDefaultCollection", _wrap_XmlQueryContext_getDefaultCollection}, 
    {"getVariableValue", _wrap_XmlQueryContext_getVariableValue}, 
    {"getVariableValues", _wrap_XmlQueryContext_getVariableValues}, 
    {"get", _wrap_XmlQueryContext_get}, 
    {"set", _wrap_XmlQueryContext_set}, 
    {"setDebugVariable", _wrap_XmlQueryContext_setDebugVariable}, 
    {0,0}
};
static swig_attribute swig_XmlQueryContext_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlQueryContext_bases[] = {0};
static char *swig_XmlQueryContext_base_names[] = {0};
swig_class _wrap_class_XmlQueryContext = { "XmlQueryContext", &SWIGTYPE_p_XmlQueryContext,_wrap_new_XmlQueryContext, swig_delete_XmlQueryContext, swig_XmlQueryContext_methods, swig_XmlQueryContext_attributes, swig_XmlQueryContext_bases,swig_XmlQueryContext_base_names };
static int
_wrap_new_XmlResults__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_XmlResults ") == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (XmlResults *)new XmlResults();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_delete_XmlResults(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlResults *arg1 = (XmlResults *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlResults self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlResults,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlResults__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlResults *arg1 = 0 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_XmlResults results ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlResults,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)new XmlResults((XmlResults const &)*arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlResults(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_XmlResults__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlResults, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_XmlResults__SWIG_1(clientData, interp, objc, objv);
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_XmlResults'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlResults_hasNext(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlResults *arg1 = (XmlResults *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlResults_hasNext self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlResults,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->hasNext();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlResults_hasPrevious(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlResults *arg1 = (XmlResults *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlResults_hasPrevious self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlResults,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->hasPrevious();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlResults_next__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlResults *arg1 = (XmlResults *) 0 ;
    XmlValue *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlResults_next self value ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlResults,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->next(*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlResults_previous__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlResults *arg1 = (XmlResults *) 0 ;
    XmlValue *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlResults_previous self value ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlResults,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->previous(*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlResults_peek__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlResults *arg1 = (XmlResults *) 0 ;
    XmlValue *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlResults_peek self value ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlResults,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->peek(*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlResults_next__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlResults *arg1 = (XmlResults *) 0 ;
    XmlDocument *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlResults_next self document ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlResults,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->next(*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlResults_next(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlResults, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_XmlResults_next__SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlResults, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_XmlResults_next__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlResults_next'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlResults_previous__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlResults *arg1 = (XmlResults *) 0 ;
    XmlDocument *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlResults_previous self document ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlResults,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->previous(*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlResults_previous(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlResults, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_XmlResults_previous__SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlResults, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_XmlResults_previous__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlResults_previous'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlResults_peek__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlResults *arg1 = (XmlResults *) 0 ;
    XmlDocument *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlResults_peek self document ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlResults,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->peek(*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlResults_peek(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlResults, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_XmlResults_peek__SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlResults, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_XmlResults_peek__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlResults_peek'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlResults_reset(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlResults *arg1 = (XmlResults *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlResults_reset self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlResults,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->reset();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlResults_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlResults *arg1 = (XmlResults *) 0 ;
    size_t result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlResults_size self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlResults,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = ((XmlResults const *)arg1)->size();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlResults_add(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlResults *arg1 = (XmlResults *) 0 ;
    XmlValue *arg2 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlResults_add self value ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlResults,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->add((XmlValue const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_XmlResults(void *obj) {
XmlResults *arg1 = (XmlResults *) obj;
delete arg1;
}
static swig_method swig_XmlResults_methods[] = {
    {"hasNext", _wrap_XmlResults_hasNext}, 
    {"hasPrevious", _wrap_XmlResults_hasPrevious}, 
    {"next", _wrap_XmlResults_next}, 
    {"previous", _wrap_XmlResults_previous}, 
    {"peek", _wrap_XmlResults_peek}, 
    {"reset", _wrap_XmlResults_reset}, 
    {"size", _wrap_XmlResults_size}, 
    {"add", _wrap_XmlResults_add}, 
    {0,0}
};
static swig_attribute swig_XmlResults_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlResults_bases[] = {0};
static char *swig_XmlResults_base_names[] = {0};
swig_class _wrap_class_XmlResults = { "XmlResults", &SWIGTYPE_p_XmlResults,_wrap_new_XmlResults, swig_delete_XmlResults, swig_XmlResults_methods, swig_XmlResults_attributes, swig_XmlResults_bases,swig_XmlResults_base_names };
static int
_wrap_new_XmlUpdateContext__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlUpdateContext *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_XmlUpdateContext ") == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (XmlUpdateContext *)new XmlUpdateContext();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlUpdateContext,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlUpdateContext__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlUpdateContext *arg1 = 0 ;
    XmlUpdateContext *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_XmlUpdateContext o ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlUpdateContext *)new XmlUpdateContext((XmlUpdateContext const &)*arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlUpdateContext,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlUpdateContext(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_XmlUpdateContext__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_XmlUpdateContext__SWIG_1(clientData, interp, objc, objv);
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_XmlUpdateContext'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_XmlUpdateContext(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlUpdateContext *arg1 = (XmlUpdateContext *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlUpdateContext self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlUpdateContext_setApplyChangesToContainers(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlUpdateContext *arg1 = (XmlUpdateContext *) 0 ;
    bool arg2 ;
    int tempb2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlUpdateContext_setApplyChangesToContainers self applyChanges ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if (Tcl_GetIntFromObj(interp,objv[2],&tempb2) == TCL_ERROR) SWIG_fail;
    arg2 = tempb2 ? true : false;
    {
        try {
            (arg1)->setApplyChangesToContainers(arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlUpdateContext_getApplyChangesToContainers(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlUpdateContext *arg1 = (XmlUpdateContext *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlUpdateContext_getApplyChangesToContainers self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)((XmlUpdateContext const *)arg1)->getApplyChangesToContainers();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_XmlUpdateContext(void *obj) {
XmlUpdateContext *arg1 = (XmlUpdateContext *) obj;
delete arg1;
}
static swig_method swig_XmlUpdateContext_methods[] = {
    {"setApplyChangesToContainers", _wrap_XmlUpdateContext_setApplyChangesToContainers}, 
    {"getApplyChangesToContainers", _wrap_XmlUpdateContext_getApplyChangesToContainers}, 
    {0,0}
};
static swig_attribute swig_XmlUpdateContext_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlUpdateContext_bases[] = {0};
static char *swig_XmlUpdateContext_base_names[] = {0};
swig_class _wrap_class_XmlUpdateContext = { "XmlUpdateContext", &SWIGTYPE_p_XmlUpdateContext,_wrap_new_XmlUpdateContext, swig_delete_XmlUpdateContext, swig_XmlUpdateContext_methods, swig_XmlUpdateContext_attributes, swig_XmlUpdateContext_bases,swig_XmlUpdateContext_base_names };
static int
_wrap_new_XmlValue__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_XmlValue ") == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (XmlValue *)new XmlValue();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlValue__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = 0 ;
    XmlValue *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_XmlValue other ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlValue *)new XmlValue((XmlValue const &)*arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlValue__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string *arg1 = 0 ;
    XmlValue *result;
    std::string temp1 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_XmlValue v ",NULL) == TCL_ERROR) SWIG_fail;
    {
        temp1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
        arg1 = &temp1;
    }
    {
        try {
            result = (XmlValue *)new XmlValue((std::string const &)*arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlValue__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    XmlValue *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:new_XmlValue v ",&arg1) == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (XmlValue *)new XmlValue(arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlValue__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlDocument *arg1 = 0 ;
    XmlValue *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_XmlValue document ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlDocument,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlValue *)new XmlValue((XmlDocument const &)*arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlValue__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    enum XmlValue::Type arg1 ;
    std::string *arg2 = 0 ;
    XmlValue *result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"io:new_XmlValue type v ",&arg1,NULL) == TCL_ERROR) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = (XmlValue *)new XmlValue((enum XmlValue::Type )arg1,(std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlValue__SWIG_6(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    enum XmlValue::Type arg1 ;
    XmlData *arg2 = 0 ;
    XmlValue *result;
    XmlData xml_data2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"io:new_XmlValue type dbt ",&arg1,NULL) == TCL_ERROR) SWIG_fail;
    {
        int len;
        char *data = (char *)Tcl_GetByteArrayFromObj(objv[2], &len);
        xml_data2.set_data(data);
        xml_data2.set_size(len);
        arg2 = &xml_data2;
    }
    {
        try {
            result = (XmlValue *)new XmlValue((enum XmlValue::Type )arg1,(XmlData const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlValue(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_XmlValue__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_XmlValue__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlDocument, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_XmlValue__SWIG_4(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            double tmp;
            if (Tcl_GetDoubleFromObj(NULL,argv[0],&tmp) == TCL_ERROR) _v = 0;
            else _v = 1;
        }
        if (_v) {
            return _wrap_new_XmlValue__SWIG_3(clientData, interp, objc, objv);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = 1;
        }
        if (_v) {
            return _wrap_new_XmlValue__SWIG_2(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            long tmp;
            if (Tcl_GetLongFromObj(NULL,argv[0],&tmp) == TCL_ERROR) _v = 0;
            else _v = 1;
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlData, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_XmlValue__SWIG_6(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            long tmp;
            if (Tcl_GetLongFromObj(NULL,argv[0],&tmp) == TCL_ERROR) _v = 0;
            else _v = 1;
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                return _wrap_new_XmlValue__SWIG_5(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_XmlValue'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_XmlValue(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlValue self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_getType(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    enum XmlValue::Type result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_getType self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (enum XmlValue::Type)((XmlValue const *)arg1)->getType();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_isNull(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_isNull self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)((XmlValue const *)arg1)->isNull();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_isType(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    enum XmlValue::Type arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oi:XmlValue_isType self type ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)((XmlValue const *)arg1)->isType((enum XmlValue::Type )arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_isNumber(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_isNumber self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)((XmlValue const *)arg1)->isNumber();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_isString(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_isString self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)((XmlValue const *)arg1)->isString();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_isBoolean(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_isBoolean self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)((XmlValue const *)arg1)->isBoolean();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_isBinary(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_isBinary self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)((XmlValue const *)arg1)->isBinary();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_isNode(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_isNode self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)((XmlValue const *)arg1)->isNode();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_asNumber(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_asNumber self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (double)((XmlValue const *)arg1)->asNumber();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_asString__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_asString self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = ((XmlValue const *)arg1)->asString();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_asString__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    std::string *arg2 = 0 ;
    std::string result;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlValue_asString self encoding ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            result = ((XmlValue const *)arg1)->asString((std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_asString(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_XmlValue_asString__SWIG_0(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                return _wrap_XmlValue_asString__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlValue_asString'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlValue_asBoolean(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_asBoolean self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)((XmlValue const *)arg1)->asBoolean();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_asBinary(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    XmlData *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_asBinary self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlData *)XmlValue_asBinary((XmlValue const *)arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        if (result) {
            Tcl_SetObjResult(interp, Tcl_NewByteArrayObj((unsigned char *)result->get_data(), result->get_size()));
            delete result; // done with new XmlData object
        } else
        Tcl_SetResult(interp, (char *) "", TCL_STATIC);
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_asDocument(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    XmlDocument *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_asDocument self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlDocument *)XmlValue_asDocument((XmlValue const *)arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlDocument,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_equals(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    XmlValue *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlValue_equals self value ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (bool)((XmlValue const *)arg1)->equals((XmlValue const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_getNodeName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_getNodeName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = ((XmlValue const *)arg1)->getNodeName();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_getNodeValue(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_getNodeValue self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = ((XmlValue const *)arg1)->getNodeValue();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_getNamespaceURI(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_getNamespaceURI self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = ((XmlValue const *)arg1)->getNamespaceURI();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_getPrefix(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_getPrefix self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = ((XmlValue const *)arg1)->getPrefix();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_getLocalName(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_getLocalName self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = ((XmlValue const *)arg1)->getLocalName();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_getNodeType(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    short result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_getNodeType self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (short)((XmlValue const *)arg1)->getNodeType();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_getParentNode(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    XmlValue *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_getParentNode self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlValue *)XmlValue_getParentNode((XmlValue const *)arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_getFirstChild(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    XmlValue *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_getFirstChild self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlValue *)XmlValue_getFirstChild((XmlValue const *)arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_getLastChild(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    XmlValue *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_getLastChild self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlValue *)XmlValue_getLastChild((XmlValue const *)arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_getPreviousSibling(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    XmlValue *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_getPreviousSibling self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlValue *)XmlValue_getPreviousSibling((XmlValue const *)arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_getNextSibling(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    XmlValue *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_getNextSibling self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlValue *)XmlValue_getNextSibling((XmlValue const *)arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_getAttributes(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_getAttributes self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlValue_getAttributes((XmlValue const *)arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_getOwnerElement(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = (XmlValue *) 0 ;
    XmlValue *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlValue_getOwnerElement self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlValue *)XmlValue_getOwnerElement((XmlValue const *)arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlValue,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlValue_setValue(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlValue *arg1 = 0 ;
    XmlValue *arg2 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlValue_setValue to from ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            XmlValue_setValue(*arg1,(XmlValue const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_XmlValue(void *obj) {
XmlValue *arg1 = (XmlValue *) obj;
delete arg1;
}
static swig_method swig_XmlValue_methods[] = {
    {"getType", _wrap_XmlValue_getType}, 
    {"isNull", _wrap_XmlValue_isNull}, 
    {"isType", _wrap_XmlValue_isType}, 
    {"isNumber", _wrap_XmlValue_isNumber}, 
    {"isString", _wrap_XmlValue_isString}, 
    {"isBoolean", _wrap_XmlValue_isBoolean}, 
    {"isBinary", _wrap_XmlValue_isBinary}, 
    {"isNode", _wrap_XmlValue_isNode}, 
    {"asNumber", _wrap_XmlValue_asNumber}, 
    {"asString", _wrap_XmlValue_asString}, 
    {"asBoolean", _wrap_XmlValue_asBoolean}, 
    {"asBinary", _wrap_XmlValue_asBinary}, 
    {"asDocument", _wrap_XmlValue_asDocument}, 
    {"equals", _wrap_XmlValue_equals}, 
    {"getNodeName", _wrap_XmlValue_getNodeName}, 
    {"getNodeValue", _wrap_XmlValue_getNodeValue}, 
    {"getNamespaceURI", _wrap_XmlValue_getNamespaceURI}, 
    {"getPrefix", _wrap_XmlValue_getPrefix}, 
    {"getLocalName", _wrap_XmlValue_getLocalName}, 
    {"getNodeType", _wrap_XmlValue_getNodeType}, 
    {"getParentNode", _wrap_XmlValue_getParentNode}, 
    {"getFirstChild", _wrap_XmlValue_getFirstChild}, 
    {"getLastChild", _wrap_XmlValue_getLastChild}, 
    {"getPreviousSibling", _wrap_XmlValue_getPreviousSibling}, 
    {"getNextSibling", _wrap_XmlValue_getNextSibling}, 
    {"getAttributes", _wrap_XmlValue_getAttributes}, 
    {"getOwnerElement", _wrap_XmlValue_getOwnerElement}, 
    {0,0}
};
static swig_attribute swig_XmlValue_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlValue_bases[] = {0};
static char *swig_XmlValue_base_names[] = {0};
swig_class _wrap_class_XmlValue = { "XmlValue", &SWIGTYPE_p_XmlValue,_wrap_new_XmlValue, swig_delete_XmlValue, swig_XmlValue_methods, swig_XmlValue_attributes, swig_XmlValue_bases,swig_XmlValue_base_names };
static int
_wrap_new_XmlIndexSpecification(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_XmlIndexSpecification ") == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (XmlIndexSpecification *)new XmlIndexSpecification();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlIndexSpecification,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_delete_XmlIndexSpecification(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlIndexSpecification self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_addIndex__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    enum XmlIndexSpecification::Type arg4 ;
    enum XmlValue::Type arg5 ;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooii:XmlIndexSpecification_addIndex self uri name type syntax ",NULL,NULL,NULL,&arg4,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            (arg1)->addIndex((std::string const &)*arg2,(std::string const &)*arg3,(enum XmlIndexSpecification::Type )arg4,(enum XmlValue::Type )arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_addIndex__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    std::string temp4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlIndexSpecification_addIndex self uri name index ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        try {
            (arg1)->addIndex((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_addIndex(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexSpecification, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlIndexSpecification_addIndex__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexSpecification, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlIndexSpecification_addIndex__SWIG_0(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlIndexSpecification_addIndex'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_deleteIndex__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    enum XmlIndexSpecification::Type arg4 ;
    enum XmlValue::Type arg5 ;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooii:XmlIndexSpecification_deleteIndex self uri name type syntax ",NULL,NULL,NULL,&arg4,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            (arg1)->deleteIndex((std::string const &)*arg2,(std::string const &)*arg3,(enum XmlIndexSpecification::Type )arg4,(enum XmlValue::Type )arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_deleteIndex__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    std::string temp4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlIndexSpecification_deleteIndex self uri name index ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        try {
            (arg1)->deleteIndex((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_deleteIndex(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexSpecification, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlIndexSpecification_deleteIndex__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexSpecification, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlIndexSpecification_deleteIndex__SWIG_0(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlIndexSpecification_deleteIndex'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_replaceIndex__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    enum XmlIndexSpecification::Type arg4 ;
    enum XmlValue::Type arg5 ;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooii:XmlIndexSpecification_replaceIndex self uri name type syntax ",NULL,NULL,NULL,&arg4,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            (arg1)->replaceIndex((std::string const &)*arg2,(std::string const &)*arg3,(enum XmlIndexSpecification::Type )arg4,(enum XmlValue::Type )arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_replaceIndex__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    std::string temp2 ;
    std::string temp3 ;
    std::string temp4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlIndexSpecification_replaceIndex self uri name index ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        try {
            (arg1)->replaceIndex((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_replaceIndex(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexSpecification, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlIndexSpecification_replaceIndex__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexSpecification, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                {
                    _v = 1;
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlIndexSpecification_replaceIndex__SWIG_0(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlIndexSpecification_replaceIndex'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_addDefaultIndex__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    enum XmlIndexSpecification::Type arg2 ;
    enum XmlValue::Type arg3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oii:XmlIndexSpecification_addDefaultIndex self type syntax ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->addDefaultIndex((enum XmlIndexSpecification::Type )arg2,(enum XmlValue::Type )arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_addDefaultIndex__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlIndexSpecification_addDefaultIndex self index ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            (arg1)->addDefaultIndex((std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_addDefaultIndex(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexSpecification, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                return _wrap_XmlIndexSpecification_addDefaultIndex__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexSpecification, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_XmlIndexSpecification_addDefaultIndex__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlIndexSpecification_addDefaultIndex'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_deleteDefaultIndex__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    enum XmlIndexSpecification::Type arg2 ;
    enum XmlValue::Type arg3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oii:XmlIndexSpecification_deleteDefaultIndex self type syntax ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->deleteDefaultIndex((enum XmlIndexSpecification::Type )arg2,(enum XmlValue::Type )arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_deleteDefaultIndex__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlIndexSpecification_deleteDefaultIndex self index ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            (arg1)->deleteDefaultIndex((std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_deleteDefaultIndex(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexSpecification, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                return _wrap_XmlIndexSpecification_deleteDefaultIndex__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexSpecification, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_XmlIndexSpecification_deleteDefaultIndex__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlIndexSpecification_deleteDefaultIndex'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_replaceDefaultIndex__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    enum XmlIndexSpecification::Type arg2 ;
    enum XmlValue::Type arg3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oii:XmlIndexSpecification_replaceDefaultIndex self type syntax ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->replaceDefaultIndex((enum XmlIndexSpecification::Type )arg2,(enum XmlValue::Type )arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_replaceDefaultIndex__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlIndexSpecification_replaceDefaultIndex self index ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            (arg1)->replaceDefaultIndex((std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_replaceDefaultIndex(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexSpecification, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = 1;
            }
            if (_v) {
                return _wrap_XmlIndexSpecification_replaceDefaultIndex__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlIndexSpecification, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_XmlIndexSpecification_replaceDefaultIndex__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlIndexSpecification_replaceDefaultIndex'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_reset(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexSpecification_reset self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->reset();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_find(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    XmlIndexDeclaration *result;
    std::string temp2 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlIndexSpecification_find self uri name ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            result = (XmlIndexDeclaration *)XmlIndexSpecification_find(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlIndexDeclaration,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_next(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    XmlIndexDeclaration *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexSpecification_next self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlIndexDeclaration *)XmlIndexSpecification_next(arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlIndexDeclaration,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_getDefaultIndex(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexSpecification *arg1 = (XmlIndexSpecification *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexSpecification_getDefaultIndex self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexSpecification,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = ((XmlIndexSpecification const *)arg1)->getDefaultIndex();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexSpecification_getValueType(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    std::string *arg1 = 0 ;
    enum XmlValue::Type result;
    std::string temp1 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexSpecification_getValueType index ",NULL) == TCL_ERROR) SWIG_fail;
    {
        temp1 = std::string(Tcl_GetStringFromObj(objv[1],NULL));
        arg1 = &temp1;
    }
    {
        try {
            result = (enum XmlValue::Type)XmlIndexSpecification::getValueType((std::string const &)*arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_XmlIndexSpecification(void *obj) {
XmlIndexSpecification *arg1 = (XmlIndexSpecification *) obj;
delete arg1;
}
static swig_method swig_XmlIndexSpecification_methods[] = {
    {"addIndex", _wrap_XmlIndexSpecification_addIndex}, 
    {"deleteIndex", _wrap_XmlIndexSpecification_deleteIndex}, 
    {"replaceIndex", _wrap_XmlIndexSpecification_replaceIndex}, 
    {"addDefaultIndex", _wrap_XmlIndexSpecification_addDefaultIndex}, 
    {"deleteDefaultIndex", _wrap_XmlIndexSpecification_deleteDefaultIndex}, 
    {"replaceDefaultIndex", _wrap_XmlIndexSpecification_replaceDefaultIndex}, 
    {"reset", _wrap_XmlIndexSpecification_reset}, 
    {"find", _wrap_XmlIndexSpecification_find}, 
    {"next", _wrap_XmlIndexSpecification_next}, 
    {"getDefaultIndex", _wrap_XmlIndexSpecification_getDefaultIndex}, 
    {0,0}
};
static swig_attribute swig_XmlIndexSpecification_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlIndexSpecification_bases[] = {0};
static char *swig_XmlIndexSpecification_base_names[] = {0};
swig_class _wrap_class_XmlIndexSpecification = { "XmlIndexSpecification", &SWIGTYPE_p_XmlIndexSpecification,_wrap_new_XmlIndexSpecification, swig_delete_XmlIndexSpecification, swig_XmlIndexSpecification_methods, swig_XmlIndexSpecification_attributes, swig_XmlIndexSpecification_bases,swig_XmlIndexSpecification_base_names };
static int
_wrap_delete_XmlIndexDeclaration(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexDeclaration *arg1 = (XmlIndexDeclaration *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlIndexDeclaration self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexDeclaration,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexDeclaration_get_uri(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexDeclaration *arg1 = (XmlIndexDeclaration *) 0 ;
    std::string *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexDeclaration_get_uri self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexDeclaration,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                std::string const &_result_ref = ((XmlIndexDeclaration const *)arg1)->get_uri();
                result = (std::string *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)result->c_str(),result->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexDeclaration_get_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexDeclaration *arg1 = (XmlIndexDeclaration *) 0 ;
    std::string *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexDeclaration_get_name self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexDeclaration,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                std::string const &_result_ref = ((XmlIndexDeclaration const *)arg1)->get_name();
                result = (std::string *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)result->c_str(),result->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlIndexDeclaration_get_index(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexDeclaration *arg1 = (XmlIndexDeclaration *) 0 ;
    std::string *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlIndexDeclaration_get_index self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlIndexDeclaration,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                std::string const &_result_ref = ((XmlIndexDeclaration const *)arg1)->get_index();
                result = (std::string *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)result->c_str(),result->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlIndexDeclaration(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlIndexDeclaration *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_XmlIndexDeclaration ") == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (XmlIndexDeclaration *)new XmlIndexDeclaration();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlIndexDeclaration,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_XmlIndexDeclaration(void *obj) {
XmlIndexDeclaration *arg1 = (XmlIndexDeclaration *) obj;
delete arg1;
}
static swig_method swig_XmlIndexDeclaration_methods[] = {
    {"get_uri", _wrap_XmlIndexDeclaration_get_uri}, 
    {"get_name", _wrap_XmlIndexDeclaration_get_name}, 
    {"get_index", _wrap_XmlIndexDeclaration_get_index}, 
    {0,0}
};
static swig_attribute swig_XmlIndexDeclaration_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlIndexDeclaration_bases[] = {0};
static char *swig_XmlIndexDeclaration_base_names[] = {0};
swig_class _wrap_class_XmlIndexDeclaration = { "XmlIndexDeclaration", &SWIGTYPE_p_XmlIndexDeclaration,_wrap_new_XmlIndexDeclaration, swig_delete_XmlIndexDeclaration, swig_XmlIndexDeclaration_methods, swig_XmlIndexDeclaration_attributes, swig_XmlIndexDeclaration_bases,swig_XmlIndexDeclaration_base_names };
static int
_wrap_new_XmlQueryExpression__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryExpression *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_XmlQueryExpression ") == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (XmlQueryExpression *)new XmlQueryExpression();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlQueryExpression,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlQueryExpression__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryExpression *arg1 = 0 ;
    XmlQueryExpression *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_XmlQueryExpression queryExpression ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlQueryExpression *)new XmlQueryExpression((XmlQueryExpression const &)*arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlQueryExpression,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlQueryExpression(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_XmlQueryExpression__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlQueryExpression, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_XmlQueryExpression__SWIG_1(clientData, interp, objc, objv);
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_XmlQueryExpression'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_XmlQueryExpression(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlQueryExpression self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryExpression_getQuery(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
    std::string *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlQueryExpression_getQuery self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            {
                std::string const &_result_ref = ((XmlQueryExpression const *)arg1)->getQuery();
                result = (std::string *) &_result_ref;
            }
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)result->c_str(),result->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryExpression_getQueryPlan(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
    std::string result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlQueryExpression_getQueryPlan self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = ((XmlQueryExpression const *)arg1)->getQueryPlan();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    {
        Tcl_SetStringObj(Tcl_GetObjResult(interp),(char*)(&result)->c_str(),(&result)->length());
    }
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryExpression_execute__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
    XmlQueryContext *arg2 = 0 ;
    u_int32_t arg3 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooi:XmlQueryExpression_execute self context flags ",NULL,NULL,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlQueryExpression_execute__SWIG_0((XmlQueryExpression const *)arg1,*arg2,arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryExpression_execute__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
    XmlQueryContext *arg2 = 0 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlQueryExpression_execute self context ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlQueryExpression_execute__SWIG_0((XmlQueryExpression const *)arg1,*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryExpression_execute__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
    XmlValue *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    u_int32_t arg4 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooi:XmlQueryExpression_execute self contextItem context flags ",NULL,NULL,NULL,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlQueryExpression_execute__SWIG_2((XmlQueryExpression const *)arg1,(XmlValue const &)*arg2,*arg3,arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryExpression_execute__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
    XmlValue *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlQueryExpression_execute self contextItem context ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlQueryExpression_execute__SWIG_2((XmlQueryExpression const *)arg1,(XmlValue const &)*arg2,*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryExpression_execute__SWIG_4(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    u_int32_t arg4 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooi:XmlQueryExpression_execute self txn context flags ",NULL,NULL,NULL,&arg4) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlQueryExpression_execute__SWIG_4((XmlQueryExpression const *)arg1,*arg2,*arg3,arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryExpression_execute__SWIG_5(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlQueryExpression_execute self txn context ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlQueryExpression_execute__SWIG_4((XmlQueryExpression const *)arg1,*arg2,*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryExpression_execute__SWIG_6(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlValue *arg3 = 0 ;
    XmlQueryContext *arg4 = 0 ;
    u_int32_t arg5 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooi:XmlQueryExpression_execute self txn contextItem context flags ",NULL,NULL,NULL,NULL,&arg5) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlQueryExpression_execute__SWIG_6((XmlQueryExpression const *)arg1,*arg2,(XmlValue const &)*arg3,*arg4,arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryExpression_execute__SWIG_7(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlQueryExpression *arg1 = (XmlQueryExpression *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlValue *arg3 = 0 ;
    XmlQueryContext *arg4 = 0 ;
    XmlResults *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlQueryExpression_execute self txn contextItem context ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlResults *)XmlQueryExpression_execute__SWIG_6((XmlQueryExpression const *)arg1,*arg2,(XmlValue const &)*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlResults,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlQueryExpression_execute(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlQueryExpression, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_XmlQueryExpression_execute__SWIG_1(clientData, interp, objc, objv);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlQueryExpression, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    return _wrap_XmlQueryExpression_execute__SWIG_0(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlQueryExpression, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_XmlQueryExpression_execute__SWIG_3(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlQueryExpression, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_XmlQueryExpression_execute__SWIG_5(clientData, interp, objc, objv);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlQueryExpression, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlQueryExpression_execute__SWIG_4(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlQueryExpression, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        long tmp;
                        if (Tcl_GetLongFromObj(NULL,argv[3],&tmp) == TCL_ERROR) _v = 0;
                        else _v = 1;
                    }
                    if (_v) {
                        return _wrap_XmlQueryExpression_execute__SWIG_2(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlQueryExpression, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlQueryExpression_execute__SWIG_7(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlQueryExpression, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        {
                            long tmp;
                            if (Tcl_GetLongFromObj(NULL,argv[4],&tmp) == TCL_ERROR) _v = 0;
                            else _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlQueryExpression_execute__SWIG_6(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlQueryExpression_execute'", TCL_STATIC);
    return TCL_ERROR;
}


static void swig_delete_XmlQueryExpression(void *obj) {
XmlQueryExpression *arg1 = (XmlQueryExpression *) obj;
delete arg1;
}
static swig_method swig_XmlQueryExpression_methods[] = {
    {"getQuery", _wrap_XmlQueryExpression_getQuery}, 
    {"getQueryPlan", _wrap_XmlQueryExpression_getQueryPlan}, 
    {"execute", _wrap_XmlQueryExpression_execute}, 
    {0,0}
};
static swig_attribute swig_XmlQueryExpression_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlQueryExpression_bases[] = {0};
static char *swig_XmlQueryExpression_base_names[] = {0};
swig_class _wrap_class_XmlQueryExpression = { "XmlQueryExpression", &SWIGTYPE_p_XmlQueryExpression,_wrap_new_XmlQueryExpression, swig_delete_XmlQueryExpression, swig_XmlQueryExpression_methods, swig_XmlQueryExpression_attributes, swig_XmlQueryExpression_bases,swig_XmlQueryExpression_base_names };
static int
_wrap_delete_XmlInputStream(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlInputStream *arg1 = (XmlInputStream *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlInputStream self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlInputStream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlInputStream_curPos(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlInputStream *arg1 = (XmlInputStream *) 0 ;
    unsigned int result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlInputStream_curPos self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlInputStream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (unsigned int)((XmlInputStream const *)arg1)->curPos();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlInputStream_readBytes(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlInputStream *arg1 = (XmlInputStream *) 0 ;
    char *arg2 = (char *) 0 ;
    unsigned int arg3 ;
    unsigned int result;
    
    if (SWIG_GetArgs(interp, objc, objv,"osi:XmlInputStream_readBytes self toFill maxToRead ",NULL,&arg2,&arg3) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlInputStream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (unsigned int)(arg1)->readBytes(arg2,arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlInputStream_freeMemory(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlInputStream *arg1 = (XmlInputStream *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlInputStream_freeMemory self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlInputStream,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            XmlInputStream_freeMemory(arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_XmlInputStream(void *obj) {
XmlInputStream *arg1 = (XmlInputStream *) obj;
delete arg1;
}
static swig_method swig_XmlInputStream_methods[] = {
    {"curPos", _wrap_XmlInputStream_curPos}, 
    {"readBytes", _wrap_XmlInputStream_readBytes}, 
    {"freeMemory", _wrap_XmlInputStream_freeMemory}, 
    {0,0}
};
static swig_attribute swig_XmlInputStream_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlInputStream_bases[] = {0};
static char *swig_XmlInputStream_base_names[] = {0};
swig_class _wrap_class_XmlInputStream = { "XmlInputStream", &SWIGTYPE_p_XmlInputStream,0, swig_delete_XmlInputStream, swig_XmlInputStream_methods, swig_XmlInputStream_attributes, swig_XmlInputStream_bases,swig_XmlInputStream_base_names };
static int
_wrap_new_XmlModify__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlModify *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_XmlModify ") == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (XmlModify *)new XmlModify();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlModify,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlModify__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlModify *arg1 = 0 ;
    XmlModify *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_XmlModify o ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlModify,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlModify *)new XmlModify((XmlModify const &)*arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlModify,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlModify(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_XmlModify__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlModify, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_XmlModify__SWIG_1(clientData, interp, objc, objv);
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_XmlModify'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_delete_XmlModify(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlModify *arg1 = (XmlModify *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlModify self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlModify,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlModify_addInsertBeforeStep(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlModify *arg1 = (XmlModify *) 0 ;
    XmlQueryExpression *arg2 = 0 ;
    enum XmlModify::XmlObject arg3 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooioo:XmlModify_addInsertBeforeStep self selectionExpr type name content ",NULL,NULL,&arg3,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlModify,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        try {
            (arg1)->addInsertBeforeStep((XmlQueryExpression const &)*arg2,(enum XmlModify::XmlObject )arg3,(std::string const &)*arg4,(std::string const &)*arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlModify_addInsertAfterStep(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlModify *arg1 = (XmlModify *) 0 ;
    XmlQueryExpression *arg2 = 0 ;
    enum XmlModify::XmlObject arg3 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooioo:XmlModify_addInsertAfterStep self selectionExpr type name content ",NULL,NULL,&arg3,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlModify,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        try {
            (arg1)->addInsertAfterStep((XmlQueryExpression const &)*arg2,(enum XmlModify::XmlObject )arg3,(std::string const &)*arg4,(std::string const &)*arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlModify_addAppendStep__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlModify *arg1 = (XmlModify *) 0 ;
    XmlQueryExpression *arg2 = 0 ;
    enum XmlModify::XmlObject arg3 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    int arg6 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooiooi:XmlModify_addAppendStep self selectionExpr type name content location ",NULL,NULL,&arg3,NULL,NULL,&arg6) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlModify,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        try {
            (arg1)->addAppendStep((XmlQueryExpression const &)*arg2,(enum XmlModify::XmlObject )arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlModify_addAppendStep__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlModify *arg1 = (XmlModify *) 0 ;
    XmlQueryExpression *arg2 = 0 ;
    enum XmlModify::XmlObject arg3 ;
    std::string *arg4 = 0 ;
    std::string *arg5 = 0 ;
    std::string temp4 ;
    std::string temp5 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooioo:XmlModify_addAppendStep self selectionExpr type name content ",NULL,NULL,&arg3,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlModify,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp4 = std::string(Tcl_GetStringFromObj(objv[4],NULL));
        arg4 = &temp4;
    }
    {
        temp5 = std::string(Tcl_GetStringFromObj(objv[5],NULL));
        arg5 = &temp5;
    }
    {
        try {
            (arg1)->addAppendStep((XmlQueryExpression const &)*arg2,(enum XmlModify::XmlObject )arg3,(std::string const &)*arg4,(std::string const &)*arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlModify_addAppendStep(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlModify, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlQueryExpression, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            return _wrap_XmlModify_addAppendStep__SWIG_1(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlModify, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlQueryExpression, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    long tmp;
                    if (Tcl_GetLongFromObj(NULL,argv[2],&tmp) == TCL_ERROR) _v = 0;
                    else _v = 1;
                }
                if (_v) {
                    {
                        _v = 1;
                    }
                    if (_v) {
                        {
                            _v = 1;
                        }
                        if (_v) {
                            {
                                long tmp;
                                if (Tcl_GetLongFromObj(NULL,argv[5],&tmp) == TCL_ERROR) _v = 0;
                                else _v = 1;
                            }
                            if (_v) {
                                return _wrap_XmlModify_addAppendStep__SWIG_0(clientData, interp, objc, objv);
                            }
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlModify_addAppendStep'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlModify_addUpdateStep(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlModify *arg1 = (XmlModify *) 0 ;
    XmlQueryExpression *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlModify_addUpdateStep self selectionExpr content ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlModify,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            (arg1)->addUpdateStep((XmlQueryExpression const &)*arg2,(std::string const &)*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlModify_addRemoveStep(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlModify *arg1 = (XmlModify *) 0 ;
    XmlQueryExpression *arg2 = 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlModify_addRemoveStep self selectionExpr ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlModify,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->addRemoveStep((XmlQueryExpression const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlModify_addRenameStep(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlModify *arg1 = (XmlModify *) 0 ;
    XmlQueryExpression *arg2 = 0 ;
    std::string *arg3 = 0 ;
    std::string temp3 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooo:XmlModify_addRenameStep self selectionExpr newName ",NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlModify,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlQueryExpression,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp3 = std::string(Tcl_GetStringFromObj(objv[3],NULL));
        arg3 = &temp3;
    }
    {
        try {
            (arg1)->addRenameStep((XmlQueryExpression const &)*arg2,(std::string const &)*arg3);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlModify_setNewEncoding(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlModify *arg1 = (XmlModify *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oo:XmlModify_setNewEncoding self newEncoding ",NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlModify,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        temp2 = std::string(Tcl_GetStringFromObj(objv[2],NULL));
        arg2 = &temp2;
    }
    {
        try {
            (arg1)->setNewEncoding((std::string const &)*arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlModify_execute__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlModify *arg1 = (XmlModify *) 0 ;
    XmlValue *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    XmlUpdateContext *arg4 = 0 ;
    unsigned int result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlModify_execute self toModify context uc ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlModify,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (unsigned int)((XmlModify const *)arg1)->execute(*arg2,*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlModify_execute__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlModify *arg1 = (XmlModify *) 0 ;
    XmlResults *arg2 = 0 ;
    XmlQueryContext *arg3 = 0 ;
    XmlUpdateContext *arg4 = 0 ;
    unsigned int result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oooo:XmlModify_execute self toModify context uc ",NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlModify,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlResults,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (unsigned int)((XmlModify const *)arg1)->execute(*arg2,*arg3,*arg4);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlModify_execute__SWIG_2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlModify *arg1 = (XmlModify *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlValue *arg3 = 0 ;
    XmlQueryContext *arg4 = 0 ;
    XmlUpdateContext *arg5 = 0 ;
    unsigned int result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooo:XmlModify_execute self txn toModify context uc ",NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlModify,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlValue,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[5], (void **) &arg5, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (unsigned int)((XmlModify const *)arg1)->execute(*arg2,*arg3,*arg4,*arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlModify_execute__SWIG_3(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlModify *arg1 = (XmlModify *) 0 ;
    XmlTransaction *arg2 = 0 ;
    XmlResults *arg3 = 0 ;
    XmlQueryContext *arg4 = 0 ;
    XmlUpdateContext *arg5 = 0 ;
    unsigned int result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ooooo:XmlModify_execute self txn toModify context uc ",NULL,NULL,NULL,NULL,NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlModify,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[2], (void **) &arg2, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[3], (void **) &arg3, SWIGTYPE_p_XmlResults,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[4], (void **) &arg4, SWIGTYPE_p_XmlQueryContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[5], (void **) &arg5, SWIGTYPE_p_XmlUpdateContext,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (unsigned int)((XmlModify const *)arg1)->execute(*arg2,*arg3,*arg4,*arg5);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlModify_execute(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlModify, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlModify_execute__SWIG_0(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlModify, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlResults, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_XmlModify_execute__SWIG_1(clientData, interp, objc, objv);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlModify, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlValue, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        {
                            void *ptr;
                            if (SWIG_ConvertPtr(argv[4], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            return _wrap_XmlModify_execute__SWIG_2(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlModify, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                    _v = 0;
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_XmlResults, 0) == TCL_ERROR) {
                        _v = 0;
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_XmlQueryContext, 0) == TCL_ERROR) {
                            _v = 0;
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        {
                            void *ptr;
                            if (SWIG_ConvertPtr(argv[4], (void **) &ptr, SWIGTYPE_p_XmlUpdateContext, 0) == TCL_ERROR) {
                                _v = 0;
                            } else {
                                _v = 1;
                            }
                        }
                        if (_v) {
                            return _wrap_XmlModify_execute__SWIG_3(clientData, interp, objc, objv);
                        }
                    }
                }
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlModify_execute'", TCL_STATIC);
    return TCL_ERROR;
}


static void swig_delete_XmlModify(void *obj) {
XmlModify *arg1 = (XmlModify *) obj;
delete arg1;
}
static swig_method swig_XmlModify_methods[] = {
    {"addInsertBeforeStep", _wrap_XmlModify_addInsertBeforeStep}, 
    {"addInsertAfterStep", _wrap_XmlModify_addInsertAfterStep}, 
    {"addAppendStep", _wrap_XmlModify_addAppendStep}, 
    {"addUpdateStep", _wrap_XmlModify_addUpdateStep}, 
    {"addRemoveStep", _wrap_XmlModify_addRemoveStep}, 
    {"addRenameStep", _wrap_XmlModify_addRenameStep}, 
    {"setNewEncoding", _wrap_XmlModify_setNewEncoding}, 
    {"execute", _wrap_XmlModify_execute}, 
    {0,0}
};
static swig_attribute swig_XmlModify_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlModify_bases[] = {0};
static char *swig_XmlModify_base_names[] = {0};
swig_class _wrap_class_XmlModify = { "XmlModify", &SWIGTYPE_p_XmlModify,_wrap_new_XmlModify, swig_delete_XmlModify, swig_XmlModify_methods, swig_XmlModify_attributes, swig_XmlModify_bases,swig_XmlModify_base_names };
static int
_wrap_delete_XmlTransaction(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlTransaction *arg1 = (XmlTransaction *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlTransaction self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlTransaction__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlTransaction *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":new_XmlTransaction ") == TCL_ERROR) SWIG_fail;
    {
        try {
            result = (XmlTransaction *)new XmlTransaction();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlTransaction,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlTransaction__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlTransaction *arg1 = 0 ;
    XmlTransaction *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_XmlTransaction XmlTransaction const & ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlTransaction *)new XmlTransaction((XmlTransaction const &)*arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlTransaction,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_new_XmlTransaction(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 0) {
        return _wrap_new_XmlTransaction__SWIG_0(clientData, interp, objc, objv);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_XmlTransaction__SWIG_1(clientData, interp, objc, objv);
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_XmlTransaction'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlTransaction_abort(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlTransaction *arg1 = (XmlTransaction *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlTransaction_abort self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->abort();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlTransaction_commit__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlTransaction *arg1 = (XmlTransaction *) 0 ;
    u_int32_t arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"oi:XmlTransaction_commit self flags ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            (arg1)->commit(arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlTransaction_createChild__SWIG_0(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlTransaction *arg1 = (XmlTransaction *) 0 ;
    u_int32_t arg2 ;
    XmlTransaction *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"oi:XmlTransaction_createChild self flags ",NULL,&arg2) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlTransaction *)XmlTransaction_createChild__SWIG_0(arg1,arg2);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlTransaction,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlTransaction_createChild__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlTransaction *arg1 = (XmlTransaction *) 0 ;
    XmlTransaction *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlTransaction_createChild self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlTransaction *)XmlTransaction_createChild__SWIG_0(arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlTransaction,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlTransaction_createChild(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_XmlTransaction_createChild__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_XmlTransaction_createChild__SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlTransaction_createChild'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlTransaction_commit__SWIG_1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlTransaction *arg1 = (XmlTransaction *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlTransaction_commit self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            XmlTransaction_commit__SWIG_1(arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlTransaction_commit(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj *CONST *argv = objv+1;
    int argc = objc-1;
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_XmlTransaction_commit__SWIG_1(clientData, interp, objc, objv);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_XmlTransaction, 0) == TCL_ERROR) {
                _v = 0;
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                long tmp;
                if (Tcl_GetLongFromObj(NULL,argv[1],&tmp) == TCL_ERROR) _v = 0;
                else _v = 1;
            }
            if (_v) {
                return _wrap_XmlTransaction_commit__SWIG_0(clientData, interp, objc, objv);
            }
        }
    }
    
    Tcl_SetResult(interp,(char *) "No matching function for overloaded 'XmlTransaction_commit'", TCL_STATIC);
    return TCL_ERROR;
}


static int
_wrap_XmlTransaction_getDbTxn(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlTransaction *arg1 = (XmlTransaction *) 0 ;
    DbTxn *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlTransaction_getDbTxn self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlTransaction,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (DbTxn *)(arg1)->getDbTxn();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_DbTxn,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_XmlTransaction(void *obj) {
XmlTransaction *arg1 = (XmlTransaction *) obj;
delete arg1;
}
static swig_method swig_XmlTransaction_methods[] = {
    {"abort", _wrap_XmlTransaction_abort}, 
    {"createChild", _wrap_XmlTransaction_createChild}, 
    {"commit", _wrap_XmlTransaction_commit}, 
    {"getDbTxn", _wrap_XmlTransaction_getDbTxn}, 
    {0,0}
};
static swig_attribute swig_XmlTransaction_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlTransaction_bases[] = {0};
static char *swig_XmlTransaction_base_names[] = {0};
swig_class _wrap_class_XmlTransaction = { "XmlTransaction", &SWIGTYPE_p_XmlTransaction,_wrap_new_XmlTransaction, swig_delete_XmlTransaction, swig_XmlTransaction_methods, swig_XmlTransaction_attributes, swig_XmlTransaction_bases,swig_XmlTransaction_base_names };
static int
_wrap_new_XmlStatistics(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlStatistics *arg1 = 0 ;
    XmlStatistics *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:new_XmlStatistics XmlStatistics const & ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlStatistics,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (XmlStatistics *)new XmlStatistics((XmlStatistics const &)*arg1);
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewInstanceObj((void *) result, SWIGTYPE_p_XmlStatistics,0));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_delete_XmlStatistics(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlStatistics *arg1 = (XmlStatistics *) 0 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:delete_XmlStatistics self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlStatistics,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            delete arg1;
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlStatistics_getNumberOfIndexedKeys(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlStatistics *arg1 = (XmlStatistics *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlStatistics_getNumberOfIndexedKeys self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlStatistics,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (double)((XmlStatistics const *)arg1)->getNumberOfIndexedKeys();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlStatistics_getNumberOfUniqueKeys(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlStatistics *arg1 = (XmlStatistics *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlStatistics_getNumberOfUniqueKeys self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlStatistics,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (double)((XmlStatistics const *)arg1)->getNumberOfUniqueKeys();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static int
_wrap_XmlStatistics_getSumKeyValueSize(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    XmlStatistics *arg1 = (XmlStatistics *) 0 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"o:XmlStatistics_getSumKeyValueSize self ",NULL) == TCL_ERROR) SWIG_fail;
    if ((SWIG_ConvertPtr(objv[1], (void **) &arg1, SWIGTYPE_p_XmlStatistics,SWIG_POINTER_EXCEPTION | 0) != TCL_OK)) SWIG_fail;
    {
        try {
            result = (double)((XmlStatistics const *)arg1)->getSumKeyValueSize();
            
        } catch (XmlException &e) {
            Tcl_SetResult(interp, (char *)e.what(), TCL_VOLATILE);
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
    fail:
    return TCL_ERROR;
}


static void swig_delete_XmlStatistics(void *obj) {
XmlStatistics *arg1 = (XmlStatistics *) obj;
delete arg1;
}
static swig_method swig_XmlStatistics_methods[] = {
    {"getNumberOfIndexedKeys", _wrap_XmlStatistics_getNumberOfIndexedKeys}, 
    {"getNumberOfUniqueKeys", _wrap_XmlStatistics_getNumberOfUniqueKeys}, 
    {"getSumKeyValueSize", _wrap_XmlStatistics_getSumKeyValueSize}, 
    {0,0}
};
static swig_attribute swig_XmlStatistics_attributes[] = {
    {0,0,0}
};
static swig_class *swig_XmlStatistics_bases[] = {0};
static char *swig_XmlStatistics_base_names[] = {0};
swig_class _wrap_class_XmlStatistics = { "XmlStatistics", &SWIGTYPE_p_XmlStatistics,_wrap_new_XmlStatistics, swig_delete_XmlStatistics, swig_XmlStatistics_methods, swig_XmlStatistics_attributes, swig_XmlStatistics_bases,swig_XmlStatistics_base_names };

static swig_command_info swig_commands[] = {
    { SWIG_prefix "dbxml_version", (swig_wrapper_func) _wrap_dbxml_version, NULL},
    { SWIG_prefix "setLogLevel", (swig_wrapper_func) _wrap_setLogLevel, NULL},
    { SWIG_prefix "setLogCategory", (swig_wrapper_func) _wrap_setLogCategory, NULL},
    { SWIG_prefix "new_XmlManager", (swig_wrapper_func) _wrap_new_XmlManager, NULL},
    { SWIG_prefix "delete_XmlManager", (swig_wrapper_func) _wrap_delete_XmlManager, NULL},
    { SWIG_prefix "XmlManager_setDefaultContainerFlags", (swig_wrapper_func) _wrap_XmlManager_setDefaultContainerFlags, NULL},
    { SWIG_prefix "XmlManager_getDefaultContainerFlags", (swig_wrapper_func) _wrap_XmlManager_getDefaultContainerFlags, NULL},
    { SWIG_prefix "XmlManager_setDefaultPageSize", (swig_wrapper_func) _wrap_XmlManager_setDefaultPageSize, NULL},
    { SWIG_prefix "XmlManager_getDefaultPageSize", (swig_wrapper_func) _wrap_XmlManager_getDefaultPageSize, NULL},
    { SWIG_prefix "XmlManager_setDefaultSequenceIncrement", (swig_wrapper_func) _wrap_XmlManager_setDefaultSequenceIncrement, NULL},
    { SWIG_prefix "XmlManager_getDefaultSequenceIncrement", (swig_wrapper_func) _wrap_XmlManager_getDefaultSequenceIncrement, NULL},
    { SWIG_prefix "XmlManager_setDefaultContainerType", (swig_wrapper_func) _wrap_XmlManager_setDefaultContainerType, NULL},
    { SWIG_prefix "XmlManager_getDefaultContainerType", (swig_wrapper_func) _wrap_XmlManager_getDefaultContainerType, NULL},
    { SWIG_prefix "XmlManager_getDbEnv", (swig_wrapper_func) _wrap_XmlManager_getDbEnv, NULL},
    { SWIG_prefix "XmlManager_getHome", (swig_wrapper_func) _wrap_XmlManager_getHome, NULL},
    { SWIG_prefix "XmlManager_existsContainer", (swig_wrapper_func) _wrap_XmlManager_existsContainer, NULL},
    { SWIG_prefix "XmlManager_removeContainer", (swig_wrapper_func) _wrap_XmlManager_removeContainer, NULL},
    { SWIG_prefix "XmlManager_renameContainer", (swig_wrapper_func) _wrap_XmlManager_renameContainer, NULL},
    { SWIG_prefix "XmlManager_upgradeContainer", (swig_wrapper_func) _wrap_XmlManager_upgradeContainer, NULL},
    { SWIG_prefix "XmlManager_reindexContainer", (swig_wrapper_func) _wrap_XmlManager_reindexContainer, NULL},
    { SWIG_prefix "XmlManager_createStdInInputStream", (swig_wrapper_func) _wrap_XmlManager_createStdInInputStream, NULL},
    { SWIG_prefix "XmlManager_createLocalFileInputStream", (swig_wrapper_func) _wrap_XmlManager_createLocalFileInputStream, NULL},
    { SWIG_prefix "XmlManager_createMemBufInputStream", (swig_wrapper_func) _wrap_XmlManager_createMemBufInputStream, NULL},
    { SWIG_prefix "XmlManager_createURLInputStream", (swig_wrapper_func) _wrap_XmlManager_createURLInputStream, NULL},
    { SWIG_prefix "XmlManager_createContainer", (swig_wrapper_func) _wrap_XmlManager_createContainer, NULL},
    { SWIG_prefix "XmlManager_openContainer", (swig_wrapper_func) _wrap_XmlManager_openContainer, NULL},
    { SWIG_prefix "XmlManager_dumpContainer", (swig_wrapper_func) _wrap_XmlManager_dumpContainer, NULL},
    { SWIG_prefix "XmlManager_loadContainer", (swig_wrapper_func) _wrap_XmlManager_loadContainer, NULL},
    { SWIG_prefix "XmlManager_verifyContainer", (swig_wrapper_func) _wrap_XmlManager_verifyContainer, NULL},
    { SWIG_prefix "XmlManager_createDocument", (swig_wrapper_func) _wrap_XmlManager_createDocument, NULL},
    { SWIG_prefix "XmlManager_createQueryContext", (swig_wrapper_func) _wrap_XmlManager_createQueryContext, NULL},
    { SWIG_prefix "XmlManager_createUpdateContext", (swig_wrapper_func) _wrap_XmlManager_createUpdateContext, NULL},
    { SWIG_prefix "XmlManager_prepare", (swig_wrapper_func) _wrap_XmlManager_prepare, NULL},
    { SWIG_prefix "XmlManager_query", (swig_wrapper_func) _wrap_XmlManager_query, NULL},
    { SWIG_prefix "XmlManager_createResults", (swig_wrapper_func) _wrap_XmlManager_createResults, NULL},
    { SWIG_prefix "XmlManager_createModify", (swig_wrapper_func) _wrap_XmlManager_createModify, NULL},
    { SWIG_prefix "XmlManager_createTransaction", (swig_wrapper_func) _wrap_XmlManager_createTransaction, NULL},
    { SWIG_prefix "XmlManager_createIndexLookup", (swig_wrapper_func) _wrap_XmlManager_createIndexLookup, NULL},
    { SWIG_prefix "XmlManager", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlManager},
    { SWIG_prefix "new_XmlIndexLookup", (swig_wrapper_func) _wrap_new_XmlIndexLookup, NULL},
    { SWIG_prefix "delete_XmlIndexLookup", (swig_wrapper_func) _wrap_delete_XmlIndexLookup, NULL},
    { SWIG_prefix "XmlIndexLookup_isNull", (swig_wrapper_func) _wrap_XmlIndexLookup_isNull, NULL},
    { SWIG_prefix "XmlIndexLookup_getIndex", (swig_wrapper_func) _wrap_XmlIndexLookup_getIndex, NULL},
    { SWIG_prefix "XmlIndexLookup_setIndex", (swig_wrapper_func) _wrap_XmlIndexLookup_setIndex, NULL},
    { SWIG_prefix "XmlIndexLookup_getNodeURI", (swig_wrapper_func) _wrap_XmlIndexLookup_getNodeURI, NULL},
    { SWIG_prefix "XmlIndexLookup_getNodeName", (swig_wrapper_func) _wrap_XmlIndexLookup_getNodeName, NULL},
    { SWIG_prefix "XmlIndexLookup_setNode", (swig_wrapper_func) _wrap_XmlIndexLookup_setNode, NULL},
    { SWIG_prefix "XmlIndexLookup_getParentURI", (swig_wrapper_func) _wrap_XmlIndexLookup_getParentURI, NULL},
    { SWIG_prefix "XmlIndexLookup_getParentName", (swig_wrapper_func) _wrap_XmlIndexLookup_getParentName, NULL},
    { SWIG_prefix "XmlIndexLookup_setParent", (swig_wrapper_func) _wrap_XmlIndexLookup_setParent, NULL},
    { SWIG_prefix "XmlIndexLookup_getLowBoundValue", (swig_wrapper_func) _wrap_XmlIndexLookup_getLowBoundValue, NULL},
    { SWIG_prefix "XmlIndexLookup_getLowBoundOperation", (swig_wrapper_func) _wrap_XmlIndexLookup_getLowBoundOperation, NULL},
    { SWIG_prefix "XmlIndexLookup_setLowBound", (swig_wrapper_func) _wrap_XmlIndexLookup_setLowBound, NULL},
    { SWIG_prefix "XmlIndexLookup_getHighBoundValue", (swig_wrapper_func) _wrap_XmlIndexLookup_getHighBoundValue, NULL},
    { SWIG_prefix "XmlIndexLookup_getHighBoundOperation", (swig_wrapper_func) _wrap_XmlIndexLookup_getHighBoundOperation, NULL},
    { SWIG_prefix "XmlIndexLookup_setHighBound", (swig_wrapper_func) _wrap_XmlIndexLookup_setHighBound, NULL},
    { SWIG_prefix "XmlIndexLookup_getContainer", (swig_wrapper_func) _wrap_XmlIndexLookup_getContainer, NULL},
    { SWIG_prefix "XmlIndexLookup_setContainer", (swig_wrapper_func) _wrap_XmlIndexLookup_setContainer, NULL},
    { SWIG_prefix "XmlIndexLookup_execute", (swig_wrapper_func) _wrap_XmlIndexLookup_execute, NULL},
    { SWIG_prefix "XmlIndexLookup", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlIndexLookup},
    { SWIG_prefix "new_XmlContainer", (swig_wrapper_func) _wrap_new_XmlContainer, NULL},
    { SWIG_prefix "delete_XmlContainer", (swig_wrapper_func) _wrap_delete_XmlContainer, NULL},
    { SWIG_prefix "XmlContainer_sync", (swig_wrapper_func) _wrap_XmlContainer_sync, NULL},
    { SWIG_prefix "XmlContainer_close", (swig_wrapper_func) _wrap_XmlContainer_close, NULL},
    { SWIG_prefix "XmlContainer_addAlias", (swig_wrapper_func) _wrap_XmlContainer_addAlias, NULL},
    { SWIG_prefix "XmlContainer_removeAlias", (swig_wrapper_func) _wrap_XmlContainer_removeAlias, NULL},
    { SWIG_prefix "XmlContainer_getManager", (swig_wrapper_func) _wrap_XmlContainer_getManager, NULL},
    { SWIG_prefix "XmlContainer_getName", (swig_wrapper_func) _wrap_XmlContainer_getName, NULL},
    { SWIG_prefix "XmlContainer_getContainerType", (swig_wrapper_func) _wrap_XmlContainer_getContainerType, NULL},
    { SWIG_prefix "XmlContainer_getIndexNodes", (swig_wrapper_func) _wrap_XmlContainer_getIndexNodes, NULL},
    { SWIG_prefix "XmlContainer_getPageSize", (swig_wrapper_func) _wrap_XmlContainer_getPageSize, NULL},
    { SWIG_prefix "XmlContainer_setIndexSpecification", (swig_wrapper_func) _wrap_XmlContainer_setIndexSpecification, NULL},
    { SWIG_prefix "XmlContainer_addIndex", (swig_wrapper_func) _wrap_XmlContainer_addIndex, NULL},
    { SWIG_prefix "XmlContainer_deleteIndex", (swig_wrapper_func) _wrap_XmlContainer_deleteIndex, NULL},
    { SWIG_prefix "XmlContainer_replaceIndex", (swig_wrapper_func) _wrap_XmlContainer_replaceIndex, NULL},
    { SWIG_prefix "XmlContainer_addDefaultIndex", (swig_wrapper_func) _wrap_XmlContainer_addDefaultIndex, NULL},
    { SWIG_prefix "XmlContainer_deleteDefaultIndex", (swig_wrapper_func) _wrap_XmlContainer_deleteDefaultIndex, NULL},
    { SWIG_prefix "XmlContainer_replaceDefaultIndex", (swig_wrapper_func) _wrap_XmlContainer_replaceDefaultIndex, NULL},
    { SWIG_prefix "XmlContainer_putDocument", (swig_wrapper_func) _wrap_XmlContainer_putDocument, NULL},
    { SWIG_prefix "XmlContainer_deleteDocument", (swig_wrapper_func) _wrap_XmlContainer_deleteDocument, NULL},
    { SWIG_prefix "XmlContainer_updateDocument", (swig_wrapper_func) _wrap_XmlContainer_updateDocument, NULL},
    { SWIG_prefix "XmlContainer_getNumDocuments", (swig_wrapper_func) _wrap_XmlContainer_getNumDocuments, NULL},
    { SWIG_prefix "XmlContainer_getIndexSpecification", (swig_wrapper_func) _wrap_XmlContainer_getIndexSpecification, NULL},
    { SWIG_prefix "XmlContainer_getDocument", (swig_wrapper_func) _wrap_XmlContainer_getDocument, NULL},
    { SWIG_prefix "XmlContainer_getAllDocuments", (swig_wrapper_func) _wrap_XmlContainer_getAllDocuments, NULL},
    { SWIG_prefix "XmlContainer_lookupIndex", (swig_wrapper_func) _wrap_XmlContainer_lookupIndex, NULL},
    { SWIG_prefix "XmlContainer_lookupStatistics", (swig_wrapper_func) _wrap_XmlContainer_lookupStatistics, NULL},
    { SWIG_prefix "XmlContainer", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlContainer},
    { SWIG_prefix "new_XmlDocument", (swig_wrapper_func) _wrap_new_XmlDocument, NULL},
    { SWIG_prefix "delete_XmlDocument", (swig_wrapper_func) _wrap_delete_XmlDocument, NULL},
    { SWIG_prefix "XmlDocument_setName", (swig_wrapper_func) _wrap_XmlDocument_setName, NULL},
    { SWIG_prefix "XmlDocument_getName", (swig_wrapper_func) _wrap_XmlDocument_getName, NULL},
    { SWIG_prefix "XmlDocument_setContent", (swig_wrapper_func) _wrap_XmlDocument_setContent, NULL},
    { SWIG_prefix "XmlDocument_getContentAsXmlInputStream", (swig_wrapper_func) _wrap_XmlDocument_getContentAsXmlInputStream, NULL},
    { SWIG_prefix "XmlDocument_setContentAsXmlInputStream", (swig_wrapper_func) _wrap_XmlDocument_setContentAsXmlInputStream, NULL},
    { SWIG_prefix "XmlDocument_fetchAllData", (swig_wrapper_func) _wrap_XmlDocument_fetchAllData, NULL},
    { SWIG_prefix "XmlDocument_removeMetaData", (swig_wrapper_func) _wrap_XmlDocument_removeMetaData, NULL},
    { SWIG_prefix "XmlDocument_setMetaData", (swig_wrapper_func) _wrap_XmlDocument_setMetaData, NULL},
    { SWIG_prefix "XmlDocument_getContentAsString", (swig_wrapper_func) _wrap_XmlDocument_getContentAsString, NULL},
    { SWIG_prefix "XmlDocument_getContent", (swig_wrapper_func) _wrap_XmlDocument_getContent, NULL},
    { SWIG_prefix "XmlDocument_getMetaData", (swig_wrapper_func) _wrap_XmlDocument_getMetaData, NULL},
    { SWIG_prefix "XmlDocument_getMetaDataIterator", (swig_wrapper_func) _wrap_XmlDocument_getMetaDataIterator, NULL},
    { SWIG_prefix "XmlDocument", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlDocument},
    { SWIG_prefix "new_XmlMetaDataIterator", (swig_wrapper_func) _wrap_new_XmlMetaDataIterator, NULL},
    { SWIG_prefix "delete_XmlMetaDataIterator", (swig_wrapper_func) _wrap_delete_XmlMetaDataIterator, NULL},
    { SWIG_prefix "XmlMetaDataIterator_reset", (swig_wrapper_func) _wrap_XmlMetaDataIterator_reset, NULL},
    { SWIG_prefix "XmlMetaDataIterator_next", (swig_wrapper_func) _wrap_XmlMetaDataIterator_next, NULL},
    { SWIG_prefix "XmlMetaDataIterator", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlMetaDataIterator},
    { SWIG_prefix "delete_XmlMetaData", (swig_wrapper_func) _wrap_delete_XmlMetaData, NULL},
    { SWIG_prefix "XmlMetaData_get_uri", (swig_wrapper_func) _wrap_XmlMetaData_get_uri, NULL},
    { SWIG_prefix "XmlMetaData_get_name", (swig_wrapper_func) _wrap_XmlMetaData_get_name, NULL},
    { SWIG_prefix "XmlMetaData_get_value", (swig_wrapper_func) _wrap_XmlMetaData_get_value, NULL},
    { SWIG_prefix "new_XmlMetaData", (swig_wrapper_func) _wrap_new_XmlMetaData, NULL},
    { SWIG_prefix "XmlMetaData", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlMetaData},
    { SWIG_prefix "new_XmlQueryContext", (swig_wrapper_func) _wrap_new_XmlQueryContext, NULL},
    { SWIG_prefix "delete_XmlQueryContext", (swig_wrapper_func) _wrap_delete_XmlQueryContext, NULL},
    { SWIG_prefix "XmlQueryContext_setNamespace", (swig_wrapper_func) _wrap_XmlQueryContext_setNamespace, NULL},
    { SWIG_prefix "XmlQueryContext_getNamespace", (swig_wrapper_func) _wrap_XmlQueryContext_getNamespace, NULL},
    { SWIG_prefix "XmlQueryContext_removeNamespace", (swig_wrapper_func) _wrap_XmlQueryContext_removeNamespace, NULL},
    { SWIG_prefix "XmlQueryContext_clearNamespaces", (swig_wrapper_func) _wrap_XmlQueryContext_clearNamespaces, NULL},
    { SWIG_prefix "XmlQueryContext_setVariableValue", (swig_wrapper_func) _wrap_XmlQueryContext_setVariableValue, NULL},
    { SWIG_prefix "XmlQueryContext_setBaseURI", (swig_wrapper_func) _wrap_XmlQueryContext_setBaseURI, NULL},
    { SWIG_prefix "XmlQueryContext_getBaseURI", (swig_wrapper_func) _wrap_XmlQueryContext_getBaseURI, NULL},
    { SWIG_prefix "XmlQueryContext_setReturnType", (swig_wrapper_func) _wrap_XmlQueryContext_setReturnType, NULL},
    { SWIG_prefix "XmlQueryContext_getReturnType", (swig_wrapper_func) _wrap_XmlQueryContext_getReturnType, NULL},
    { SWIG_prefix "XmlQueryContext_setEvaluationType", (swig_wrapper_func) _wrap_XmlQueryContext_setEvaluationType, NULL},
    { SWIG_prefix "XmlQueryContext_getEvaluationType", (swig_wrapper_func) _wrap_XmlQueryContext_getEvaluationType, NULL},
    { SWIG_prefix "XmlQueryContext_setDefaultCollection", (swig_wrapper_func) _wrap_XmlQueryContext_setDefaultCollection, NULL},
    { SWIG_prefix "XmlQueryContext_getDefaultCollection", (swig_wrapper_func) _wrap_XmlQueryContext_getDefaultCollection, NULL},
    { SWIG_prefix "XmlQueryContext_getVariableValue", (swig_wrapper_func) _wrap_XmlQueryContext_getVariableValue, NULL},
    { SWIG_prefix "XmlQueryContext_getVariableValues", (swig_wrapper_func) _wrap_XmlQueryContext_getVariableValues, NULL},
    { SWIG_prefix "XmlQueryContext_get", (swig_wrapper_func) _wrap_XmlQueryContext_get, NULL},
    { SWIG_prefix "XmlQueryContext_set", (swig_wrapper_func) _wrap_XmlQueryContext_set, NULL},
    { SWIG_prefix "XmlQueryContext_setDebugVariable", (swig_wrapper_func) _wrap_XmlQueryContext_setDebugVariable, NULL},
    { SWIG_prefix "XmlQueryContext", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlQueryContext},
    { SWIG_prefix "delete_XmlResults", (swig_wrapper_func) _wrap_delete_XmlResults, NULL},
    { SWIG_prefix "new_XmlResults", (swig_wrapper_func) _wrap_new_XmlResults, NULL},
    { SWIG_prefix "XmlResults_hasNext", (swig_wrapper_func) _wrap_XmlResults_hasNext, NULL},
    { SWIG_prefix "XmlResults_hasPrevious", (swig_wrapper_func) _wrap_XmlResults_hasPrevious, NULL},
    { SWIG_prefix "XmlResults_next", (swig_wrapper_func) _wrap_XmlResults_next, NULL},
    { SWIG_prefix "XmlResults_previous", (swig_wrapper_func) _wrap_XmlResults_previous, NULL},
    { SWIG_prefix "XmlResults_peek", (swig_wrapper_func) _wrap_XmlResults_peek, NULL},
    { SWIG_prefix "XmlResults_reset", (swig_wrapper_func) _wrap_XmlResults_reset, NULL},
    { SWIG_prefix "XmlResults_size", (swig_wrapper_func) _wrap_XmlResults_size, NULL},
    { SWIG_prefix "XmlResults_add", (swig_wrapper_func) _wrap_XmlResults_add, NULL},
    { SWIG_prefix "XmlResults", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlResults},
    { SWIG_prefix "new_XmlUpdateContext", (swig_wrapper_func) _wrap_new_XmlUpdateContext, NULL},
    { SWIG_prefix "delete_XmlUpdateContext", (swig_wrapper_func) _wrap_delete_XmlUpdateContext, NULL},
    { SWIG_prefix "XmlUpdateContext_setApplyChangesToContainers", (swig_wrapper_func) _wrap_XmlUpdateContext_setApplyChangesToContainers, NULL},
    { SWIG_prefix "XmlUpdateContext_getApplyChangesToContainers", (swig_wrapper_func) _wrap_XmlUpdateContext_getApplyChangesToContainers, NULL},
    { SWIG_prefix "XmlUpdateContext", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlUpdateContext},
    { SWIG_prefix "new_XmlValue", (swig_wrapper_func) _wrap_new_XmlValue, NULL},
    { SWIG_prefix "delete_XmlValue", (swig_wrapper_func) _wrap_delete_XmlValue, NULL},
    { SWIG_prefix "XmlValue_getType", (swig_wrapper_func) _wrap_XmlValue_getType, NULL},
    { SWIG_prefix "XmlValue_isNull", (swig_wrapper_func) _wrap_XmlValue_isNull, NULL},
    { SWIG_prefix "XmlValue_isType", (swig_wrapper_func) _wrap_XmlValue_isType, NULL},
    { SWIG_prefix "XmlValue_isNumber", (swig_wrapper_func) _wrap_XmlValue_isNumber, NULL},
    { SWIG_prefix "XmlValue_isString", (swig_wrapper_func) _wrap_XmlValue_isString, NULL},
    { SWIG_prefix "XmlValue_isBoolean", (swig_wrapper_func) _wrap_XmlValue_isBoolean, NULL},
    { SWIG_prefix "XmlValue_isBinary", (swig_wrapper_func) _wrap_XmlValue_isBinary, NULL},
    { SWIG_prefix "XmlValue_isNode", (swig_wrapper_func) _wrap_XmlValue_isNode, NULL},
    { SWIG_prefix "XmlValue_asNumber", (swig_wrapper_func) _wrap_XmlValue_asNumber, NULL},
    { SWIG_prefix "XmlValue_asString", (swig_wrapper_func) _wrap_XmlValue_asString, NULL},
    { SWIG_prefix "XmlValue_asBoolean", (swig_wrapper_func) _wrap_XmlValue_asBoolean, NULL},
    { SWIG_prefix "XmlValue_asBinary", (swig_wrapper_func) _wrap_XmlValue_asBinary, NULL},
    { SWIG_prefix "XmlValue_asDocument", (swig_wrapper_func) _wrap_XmlValue_asDocument, NULL},
    { SWIG_prefix "XmlValue_equals", (swig_wrapper_func) _wrap_XmlValue_equals, NULL},
    { SWIG_prefix "XmlValue_getNodeName", (swig_wrapper_func) _wrap_XmlValue_getNodeName, NULL},
    { SWIG_prefix "XmlValue_getNodeValue", (swig_wrapper_func) _wrap_XmlValue_getNodeValue, NULL},
    { SWIG_prefix "XmlValue_getNamespaceURI", (swig_wrapper_func) _wrap_XmlValue_getNamespaceURI, NULL},
    { SWIG_prefix "XmlValue_getPrefix", (swig_wrapper_func) _wrap_XmlValue_getPrefix, NULL},
    { SWIG_prefix "XmlValue_getLocalName", (swig_wrapper_func) _wrap_XmlValue_getLocalName, NULL},
    { SWIG_prefix "XmlValue_getNodeType", (swig_wrapper_func) _wrap_XmlValue_getNodeType, NULL},
    { SWIG_prefix "XmlValue_getParentNode", (swig_wrapper_func) _wrap_XmlValue_getParentNode, NULL},
    { SWIG_prefix "XmlValue_getFirstChild", (swig_wrapper_func) _wrap_XmlValue_getFirstChild, NULL},
    { SWIG_prefix "XmlValue_getLastChild", (swig_wrapper_func) _wrap_XmlValue_getLastChild, NULL},
    { SWIG_prefix "XmlValue_getPreviousSibling", (swig_wrapper_func) _wrap_XmlValue_getPreviousSibling, NULL},
    { SWIG_prefix "XmlValue_getNextSibling", (swig_wrapper_func) _wrap_XmlValue_getNextSibling, NULL},
    { SWIG_prefix "XmlValue_getAttributes", (swig_wrapper_func) _wrap_XmlValue_getAttributes, NULL},
    { SWIG_prefix "XmlValue_getOwnerElement", (swig_wrapper_func) _wrap_XmlValue_getOwnerElement, NULL},
    { SWIG_prefix "XmlValue_setValue", (swig_wrapper_func) _wrap_XmlValue_setValue, NULL},
    { SWIG_prefix "XmlValue", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlValue},
    { SWIG_prefix "new_XmlIndexSpecification", (swig_wrapper_func) _wrap_new_XmlIndexSpecification, NULL},
    { SWIG_prefix "delete_XmlIndexSpecification", (swig_wrapper_func) _wrap_delete_XmlIndexSpecification, NULL},
    { SWIG_prefix "XmlIndexSpecification_addIndex", (swig_wrapper_func) _wrap_XmlIndexSpecification_addIndex, NULL},
    { SWIG_prefix "XmlIndexSpecification_deleteIndex", (swig_wrapper_func) _wrap_XmlIndexSpecification_deleteIndex, NULL},
    { SWIG_prefix "XmlIndexSpecification_replaceIndex", (swig_wrapper_func) _wrap_XmlIndexSpecification_replaceIndex, NULL},
    { SWIG_prefix "XmlIndexSpecification_addDefaultIndex", (swig_wrapper_func) _wrap_XmlIndexSpecification_addDefaultIndex, NULL},
    { SWIG_prefix "XmlIndexSpecification_deleteDefaultIndex", (swig_wrapper_func) _wrap_XmlIndexSpecification_deleteDefaultIndex, NULL},
    { SWIG_prefix "XmlIndexSpecification_replaceDefaultIndex", (swig_wrapper_func) _wrap_XmlIndexSpecification_replaceDefaultIndex, NULL},
    { SWIG_prefix "XmlIndexSpecification_reset", (swig_wrapper_func) _wrap_XmlIndexSpecification_reset, NULL},
    { SWIG_prefix "XmlIndexSpecification_find", (swig_wrapper_func) _wrap_XmlIndexSpecification_find, NULL},
    { SWIG_prefix "XmlIndexSpecification_next", (swig_wrapper_func) _wrap_XmlIndexSpecification_next, NULL},
    { SWIG_prefix "XmlIndexSpecification_getDefaultIndex", (swig_wrapper_func) _wrap_XmlIndexSpecification_getDefaultIndex, NULL},
    { SWIG_prefix "XmlIndexSpecification_getValueType", (swig_wrapper_func) _wrap_XmlIndexSpecification_getValueType, NULL},
    { SWIG_prefix "XmlIndexSpecification", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlIndexSpecification},
    { SWIG_prefix "delete_XmlIndexDeclaration", (swig_wrapper_func) _wrap_delete_XmlIndexDeclaration, NULL},
    { SWIG_prefix "XmlIndexDeclaration_get_uri", (swig_wrapper_func) _wrap_XmlIndexDeclaration_get_uri, NULL},
    { SWIG_prefix "XmlIndexDeclaration_get_name", (swig_wrapper_func) _wrap_XmlIndexDeclaration_get_name, NULL},
    { SWIG_prefix "XmlIndexDeclaration_get_index", (swig_wrapper_func) _wrap_XmlIndexDeclaration_get_index, NULL},
    { SWIG_prefix "new_XmlIndexDeclaration", (swig_wrapper_func) _wrap_new_XmlIndexDeclaration, NULL},
    { SWIG_prefix "XmlIndexDeclaration", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlIndexDeclaration},
    { SWIG_prefix "new_XmlQueryExpression", (swig_wrapper_func) _wrap_new_XmlQueryExpression, NULL},
    { SWIG_prefix "delete_XmlQueryExpression", (swig_wrapper_func) _wrap_delete_XmlQueryExpression, NULL},
    { SWIG_prefix "XmlQueryExpression_getQuery", (swig_wrapper_func) _wrap_XmlQueryExpression_getQuery, NULL},
    { SWIG_prefix "XmlQueryExpression_getQueryPlan", (swig_wrapper_func) _wrap_XmlQueryExpression_getQueryPlan, NULL},
    { SWIG_prefix "XmlQueryExpression_execute", (swig_wrapper_func) _wrap_XmlQueryExpression_execute, NULL},
    { SWIG_prefix "XmlQueryExpression", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlQueryExpression},
    { SWIG_prefix "delete_XmlInputStream", (swig_wrapper_func) _wrap_delete_XmlInputStream, NULL},
    { SWIG_prefix "XmlInputStream_curPos", (swig_wrapper_func) _wrap_XmlInputStream_curPos, NULL},
    { SWIG_prefix "XmlInputStream_readBytes", (swig_wrapper_func) _wrap_XmlInputStream_readBytes, NULL},
    { SWIG_prefix "XmlInputStream_freeMemory", (swig_wrapper_func) _wrap_XmlInputStream_freeMemory, NULL},
    { SWIG_prefix "XmlInputStream", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlInputStream},
    { SWIG_prefix "new_XmlModify", (swig_wrapper_func) _wrap_new_XmlModify, NULL},
    { SWIG_prefix "delete_XmlModify", (swig_wrapper_func) _wrap_delete_XmlModify, NULL},
    { SWIG_prefix "XmlModify_addInsertBeforeStep", (swig_wrapper_func) _wrap_XmlModify_addInsertBeforeStep, NULL},
    { SWIG_prefix "XmlModify_addInsertAfterStep", (swig_wrapper_func) _wrap_XmlModify_addInsertAfterStep, NULL},
    { SWIG_prefix "XmlModify_addAppendStep", (swig_wrapper_func) _wrap_XmlModify_addAppendStep, NULL},
    { SWIG_prefix "XmlModify_addUpdateStep", (swig_wrapper_func) _wrap_XmlModify_addUpdateStep, NULL},
    { SWIG_prefix "XmlModify_addRemoveStep", (swig_wrapper_func) _wrap_XmlModify_addRemoveStep, NULL},
    { SWIG_prefix "XmlModify_addRenameStep", (swig_wrapper_func) _wrap_XmlModify_addRenameStep, NULL},
    { SWIG_prefix "XmlModify_setNewEncoding", (swig_wrapper_func) _wrap_XmlModify_setNewEncoding, NULL},
    { SWIG_prefix "XmlModify_execute", (swig_wrapper_func) _wrap_XmlModify_execute, NULL},
    { SWIG_prefix "XmlModify", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlModify},
    { SWIG_prefix "delete_XmlTransaction", (swig_wrapper_func) _wrap_delete_XmlTransaction, NULL},
    { SWIG_prefix "new_XmlTransaction", (swig_wrapper_func) _wrap_new_XmlTransaction, NULL},
    { SWIG_prefix "XmlTransaction_abort", (swig_wrapper_func) _wrap_XmlTransaction_abort, NULL},
    { SWIG_prefix "XmlTransaction_createChild", (swig_wrapper_func) _wrap_XmlTransaction_createChild, NULL},
    { SWIG_prefix "XmlTransaction_commit", (swig_wrapper_func) _wrap_XmlTransaction_commit, NULL},
    { SWIG_prefix "XmlTransaction_getDbTxn", (swig_wrapper_func) _wrap_XmlTransaction_getDbTxn, NULL},
    { SWIG_prefix "XmlTransaction", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlTransaction},
    { SWIG_prefix "new_XmlStatistics", (swig_wrapper_func) _wrap_new_XmlStatistics, NULL},
    { SWIG_prefix "delete_XmlStatistics", (swig_wrapper_func) _wrap_delete_XmlStatistics, NULL},
    { SWIG_prefix "XmlStatistics_getNumberOfIndexedKeys", (swig_wrapper_func) _wrap_XmlStatistics_getNumberOfIndexedKeys, NULL},
    { SWIG_prefix "XmlStatistics_getNumberOfUniqueKeys", (swig_wrapper_func) _wrap_XmlStatistics_getNumberOfUniqueKeys, NULL},
    { SWIG_prefix "XmlStatistics_getSumKeyValueSize", (swig_wrapper_func) _wrap_XmlStatistics_getSumKeyValueSize, NULL},
    { SWIG_prefix "XmlStatistics", (swig_wrapper_func) SWIG_ObjectConstructor, &_wrap_class_XmlStatistics},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
{ SWIG_TCL_INT,     (char *)"DB_CREATE", (long) DB_CREATE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DB_DIRTY_READ", (long) DB_DIRTY_READ, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DB_EXCL", (long) DB_EXCL, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DB_NOMMAP", (long) DB_NOMMAP, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DB_RDONLY", (long) DB_RDONLY, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DB_THREAD", (long) DB_THREAD, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DB_INIT_LOCK", (long) DB_INIT_LOCK, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DB_INIT_LOG", (long) DB_INIT_LOG, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DB_INIT_MPOOL", (long) DB_INIT_MPOOL, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DB_INIT_TXN", (long) DB_INIT_TXN, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DB_SALVAGE", (long) DB_SALVAGE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DB_AGGRESSIVE", (long) DB_AGGRESSIVE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DBXML_ADOPT_DBENV", (long) DBXML_ADOPT_DBENV, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DBXML_ALLOW_EXTERNAL_ACCESS", (long) DBXML_ALLOW_EXTERNAL_ACCESS, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DBXML_ALLOW_AUTO_OPEN", (long) DBXML_ALLOW_AUTO_OPEN, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DBXML_ALLOW_VALIDATION", (long) DBXML_ALLOW_VALIDATION, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DBXML_TRANSACTIONAL", (long) DBXML_TRANSACTIONAL, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DBXML_REVERSE_ORDER", (long) DBXML_REVERSE_ORDER, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DBXML_INDEX_VALUES", (long) DBXML_INDEX_VALUES, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DBXML_CACHE_DOCUMENTS", (long) DBXML_CACHE_DOCUMENTS, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DBXML_CHKSUM", (long) DBXML_CHKSUM, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DBXML_ENCRYPT", (long) DBXML_ENCRYPT, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DBXML_NO_INDEX_NODES", (long) DBXML_NO_INDEX_NODES, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DBXML_GEN_NAME", (long) DBXML_GEN_NAME, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DBXML_LAZY_DOCS", (long) DBXML_LAZY_DOCS, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"DBXML_INDEX_NODES", (long) DBXML_INDEX_NODES, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"LEVEL_NONE", (long) LEVEL_NONE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"LEVEL_DEBUG", (long) LEVEL_DEBUG, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"LEVEL_INFO", (long) LEVEL_INFO, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"LEVEL_WARNING", (long) LEVEL_WARNING, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"LEVEL_ERROR", (long) LEVEL_ERROR, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"LEVEL_ALL", (long) LEVEL_ALL, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"CATEGORY_NONE", (long) CATEGORY_NONE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"CATEGORY_INDEXER", (long) CATEGORY_INDEXER, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"CATEGORY_QUERY", (long) CATEGORY_QUERY, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"CATEGORY_OPTIMIZER", (long) CATEGORY_OPTIMIZER, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"CATEGORY_DICTIONARY", (long) CATEGORY_DICTIONARY, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"CATEGORY_CONTAINER", (long) CATEGORY_CONTAINER, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"CATEGORY_NODESTORE", (long) CATEGORY_NODESTORE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"CATEGORY_MANAGER", (long) CATEGORY_MANAGER, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"CATEGORY_ALL", (long) CATEGORY_ALL, 0, 0, 0},
{ SWIG_TCL_STRING,  (char*)"metaDataNamespace_uri", 0, 0, (void *)"http://www.sleepycat.com/2002/dbxml", 0},
{ SWIG_TCL_STRING,  (char*)"metaDataNamespace_prefix", 0, 0, (void *)"dbxml", 0},
{ SWIG_TCL_STRING,  (char*)"metaDataName_name", 0, 0, (void *)"name", 0},
{ SWIG_TCL_STRING,  (char*)"metaDataName_root", 0, 0, (void *)"root", 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexLookup_NONE", (long) XmlIndexLookup::NONE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexLookup_EQ", (long) XmlIndexLookup::EQ, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexLookup_GT", (long) XmlIndexLookup::GT, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexLookup_GTE", (long) XmlIndexLookup::GTE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexLookup_LT", (long) XmlIndexLookup::LT, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexLookup_LTE", (long) XmlIndexLookup::LTE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlContainer_WholedocContainer", (long) XmlContainer::WholedocContainer, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlContainer_NodeContainer", (long) XmlContainer::NodeContainer, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlQueryContext_DeadValues", (long) XmlQueryContext::DeadValues, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlQueryContext_LiveValues", (long) XmlQueryContext::LiveValues, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlQueryContext_Eager", (long) XmlQueryContext::Eager, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlQueryContext_Lazy", (long) XmlQueryContext::Lazy, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_ELEMENT_NODE", (long) XmlValue::ELEMENT_NODE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_ATTRIBUTE_NODE", (long) XmlValue::ATTRIBUTE_NODE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_TEXT_NODE", (long) XmlValue::TEXT_NODE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_CDATA_SECTION_NODE", (long) XmlValue::CDATA_SECTION_NODE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_ENTITY_REFERENCE_NODE", (long) XmlValue::ENTITY_REFERENCE_NODE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_ENTITY_NODE", (long) XmlValue::ENTITY_NODE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_PROCESSING_INSTRUCTION_NODE", (long) XmlValue::PROCESSING_INSTRUCTION_NODE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_COMMENT_NODE", (long) XmlValue::COMMENT_NODE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_DOCUMENT_NODE", (long) XmlValue::DOCUMENT_NODE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_DOCUMENT_TYPE_NODE", (long) XmlValue::DOCUMENT_TYPE_NODE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_DOCUMENT_FRAGMENT_NODE", (long) XmlValue::DOCUMENT_FRAGMENT_NODE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_NOTATION_NODE", (long) XmlValue::NOTATION_NODE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_NONE", (long) XmlValue::NONE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_NODE", (long) XmlValue::NODE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_ANY_SIMPLE_TYPE", (long) XmlValue::ANY_SIMPLE_TYPE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_ANY_URI", (long) XmlValue::ANY_URI, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_BASE_64_BINARY", (long) XmlValue::BASE_64_BINARY, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_BOOLEAN", (long) XmlValue::BOOLEAN, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_DATE", (long) XmlValue::DATE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_DATE_TIME", (long) XmlValue::DATE_TIME, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_DAY_TIME_DURATION", (long) XmlValue::DAY_TIME_DURATION, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_DECIMAL", (long) XmlValue::DECIMAL, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_DOUBLE", (long) XmlValue::DOUBLE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_DURATION", (long) XmlValue::DURATION, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_FLOAT", (long) XmlValue::FLOAT, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_G_DAY", (long) XmlValue::G_DAY, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_G_MONTH", (long) XmlValue::G_MONTH, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_G_MONTH_DAY", (long) XmlValue::G_MONTH_DAY, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_G_YEAR", (long) XmlValue::G_YEAR, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_G_YEAR_MONTH", (long) XmlValue::G_YEAR_MONTH, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_HEX_BINARY", (long) XmlValue::HEX_BINARY, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_NOTATION", (long) XmlValue::NOTATION, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_QNAME", (long) XmlValue::QNAME, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_STRING", (long) XmlValue::STRING, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_TIME", (long) XmlValue::TIME, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_YEAR_MONTH_DURATION", (long) XmlValue::YEAR_MONTH_DURATION, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_UNTYPED_ATOMIC", (long) XmlValue::UNTYPED_ATOMIC, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlValue_BINARY", (long) XmlValue::BINARY, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexSpecification_UNIQUE_OFF", (long) XmlIndexSpecification::UNIQUE_OFF, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexSpecification_UNIQUE_ON", (long) XmlIndexSpecification::UNIQUE_ON, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexSpecification_PATH_NONE", (long) XmlIndexSpecification::PATH_NONE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexSpecification_PATH_NODE", (long) XmlIndexSpecification::PATH_NODE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexSpecification_PATH_EDGE", (long) XmlIndexSpecification::PATH_EDGE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexSpecification_NODE_NONE", (long) XmlIndexSpecification::NODE_NONE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexSpecification_NODE_ELEMENT", (long) XmlIndexSpecification::NODE_ELEMENT, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexSpecification_NODE_ATTRIBUTE", (long) XmlIndexSpecification::NODE_ATTRIBUTE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexSpecification_NODE_METADATA", (long) XmlIndexSpecification::NODE_METADATA, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexSpecification_KEY_NONE", (long) XmlIndexSpecification::KEY_NONE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexSpecification_KEY_PRESENCE", (long) XmlIndexSpecification::KEY_PRESENCE, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexSpecification_KEY_EQUALITY", (long) XmlIndexSpecification::KEY_EQUALITY, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlIndexSpecification_KEY_SUBSTRING", (long) XmlIndexSpecification::KEY_SUBSTRING, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlModify_Element", (long) XmlModify::Element, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlModify_Attribute", (long) XmlModify::Attribute, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlModify_Text", (long) XmlModify::Text, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlModify_ProcessingInstruction", (long) XmlModify::ProcessingInstruction, 0, 0, 0},
{ SWIG_TCL_INT,     (char *)"XmlModify_Comment", (long) XmlModify::Comment, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_XmlResults[] = {{"_p_XmlResults", 0, "XmlResults *", &_wrap_class_XmlResults, 0, 0, 0},{"_p_XmlResults", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__size_t[] = {{"_size_t", 0, "size_t", 0, 0, 0, 0},{"_size_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlManager[] = {{"_p_XmlManager", 0, "XmlManager *", &_wrap_class_XmlManager, 0, 0, 0},{"_p_XmlManager", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlQueryContext[] = {{"_p_XmlQueryContext", 0, "XmlQueryContext *", &_wrap_class_XmlQueryContext, 0, 0, 0},{"_p_XmlQueryContext", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlUpdateContext[] = {{"_p_XmlUpdateContext", 0, "XmlUpdateContext *", &_wrap_class_XmlUpdateContext, 0, 0, 0},{"_p_XmlUpdateContext", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlIndexSpecification[] = {{"_p_XmlIndexSpecification", 0, "XmlIndexSpecification *", &_wrap_class_XmlIndexSpecification, 0, 0, 0},{"_p_XmlIndexSpecification", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlValue[] = {{"_p_XmlValue", 0, "XmlValue *", &_wrap_class_XmlValue, 0, 0, 0},{"_p_XmlValue", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlStatistics[] = {{"_p_XmlStatistics", 0, "XmlStatistics *", &_wrap_class_XmlStatistics, 0, 0, 0},{"_p_XmlStatistics", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_unsigned_int[] = {{"_p_unsigned_int", 0, "unsigned int *|u_int32_t *", 0, 0, 0, 0},{"_p_unsigned_int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlInputStream[] = {{"_p_XmlInputStream", 0, "XmlInputStream *", &_wrap_class_XmlInputStream, 0, 0, 0},{"_p_XmlInputStream", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlMetaData[] = {{"_p_XmlMetaData", 0, "XmlMetaData *", &_wrap_class_XmlMetaData, 0, 0, 0},{"_p_XmlMetaData", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlQueryExpression[] = {{"_p_XmlQueryExpression", 0, "XmlQueryExpression *", &_wrap_class_XmlQueryExpression, 0, 0, 0},{"_p_XmlQueryExpression", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlIndexLookup[] = {{"_p_XmlIndexLookup", 0, "XmlIndexLookup *", &_wrap_class_XmlIndexLookup, 0, 0, 0},{"_p_XmlIndexLookup", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_DbTxn[] = {{"_p_DbTxn", 0, "DbTxn *", 0, 0, 0, 0},{"_p_DbTxn", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__ptrdiff_t[] = {{"_ptrdiff_t", 0, "ptrdiff_t", 0, 0, 0, 0},{"_ptrdiff_t", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlContainer[] = {{"_p_XmlContainer", 0, "XmlContainer *", &_wrap_class_XmlContainer, 0, 0, 0},{"_p_XmlContainer", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_DbEnv[] = {{"_p_DbEnv", 0, "DbEnv *", 0, 0, 0, 0},{"_p_DbEnv", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlModify[] = {{"_p_XmlModify", 0, "XmlModify *", &_wrap_class_XmlModify, 0, 0, 0},{"_p_XmlModify", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlDocument[] = {{"_p_XmlDocument", 0, "XmlDocument *", &_wrap_class_XmlDocument, 0, 0, 0},{"_p_XmlDocument", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlTransaction[] = {{"_p_XmlTransaction", 0, "XmlTransaction *", &_wrap_class_XmlTransaction, 0, 0, 0},{"_p_XmlTransaction", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlData[] = {{"_p_XmlData", 0, "XmlData *", 0, 0, 0, 0},{"_p_XmlData", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *", 0, 0, 0, 0},{"_p_int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlMetaDataIterator[] = {{"_p_XmlMetaDataIterator", 0, "XmlMetaDataIterator *", &_wrap_class_XmlMetaDataIterator, 0, 0, 0},{"_p_XmlMetaDataIterator", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_XmlIndexDeclaration[] = {{"_p_XmlIndexDeclaration", 0, "XmlIndexDeclaration *", &_wrap_class_XmlIndexDeclaration, 0, 0, 0},{"_p_XmlIndexDeclaration", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_XmlResults, 
_swigt__size_t, 
_swigt__p_XmlManager, 
_swigt__p_XmlQueryContext, 
_swigt__p_XmlUpdateContext, 
_swigt__p_XmlIndexSpecification, 
_swigt__p_XmlValue, 
_swigt__p_XmlStatistics, 
_swigt__p_unsigned_int, 
_swigt__p_XmlInputStream, 
_swigt__p_XmlMetaData, 
_swigt__p_XmlQueryExpression, 
_swigt__p_XmlIndexLookup, 
_swigt__p_DbTxn, 
_swigt__ptrdiff_t, 
_swigt__p_XmlContainer, 
_swigt__p_DbEnv, 
_swigt__p_XmlModify, 
_swigt__p_XmlDocument, 
_swigt__p_XmlTransaction, 
_swigt__p_XmlData, 
_swigt__p_int, 
_swigt__p_XmlMetaDataIterator, 
_swigt__p_XmlIndexDeclaration, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif

SWIGEXPORT(int) SWIG_init(Tcl_Interp *interp) {
    int i;
    static int _init = 0;
    if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
    if (Tcl_InitStubs(interp, (char*)"8.1", 0) == NULL) {
        return TCL_ERROR;
    }
#endif
    
    Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
    
#ifdef SWIG_namespace
    Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
    if (!_init) {
        SWIG_Tcl_LookupTypePointer(interp);
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        for (i = 0; swig_types_initial[i]; i++) {
            SWIG_PropagateClientData(swig_types[i]);
        }
        _init = 1;
    }
    for (i = 0; swig_commands[i].name; i++) {
        Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper, swig_commands[i].clientdata, NULL);
    }
    for (i = 0; swig_variables[i].name; i++) {
        Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
        Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
        Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
    }
    SWIG_InstallConstants(interp, swig_constants);
    
    return TCL_OK;
}
SWIGEXPORT(int) Dbxml_tcl_SafeInit(Tcl_Interp *interp) {
    return SWIG_init(interp);
}

