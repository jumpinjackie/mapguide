/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_dbxml_java_WRAP_H_
#define SWIG_dbxml_java_WRAP_H_

class SwigDirector_XmlInputStream : public XmlInputStream, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls);
    SwigDirector_XmlInputStream(JNIEnv *jenv);
    virtual unsigned int curPos() const;
    virtual unsigned int readBytes(char *toFill, unsigned int const maxToRead);
    virtual ~SwigDirector_XmlInputStream();
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    bool swig_override[2];
};

class SwigDirector_XmlResolver : public XmlResolver, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls);
    SwigDirector_XmlResolver(JNIEnv *jenv);
    virtual bool resolveDocument(XmlTransaction *txn, XmlManager &mgr, std::string const &uri, XmlValue &res) const;
    virtual ~SwigDirector_XmlResolver();
    virtual bool resolveCollection(XmlTransaction *txn, XmlManager &mgr, std::string const &uri, XmlResults &res) const;
    virtual XmlInputStream *resolveSchema(XmlTransaction *txn, XmlManager &mgr, std::string const &schemaLocation, std::string const &nameSpace) const;
    virtual XmlInputStream *resolveEntity(XmlTransaction *txn, XmlManager &mgr, std::string const &systemId, std::string const &publicId) const;
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    bool swig_override[4];
};


#endif
