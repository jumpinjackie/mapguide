<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <link rel="stylesheet" href="../viewerfiles/viewer.css" type="text/css">
    <style type="text/css">
    body,td
    {
        font-family: __#@font#__;
        font-size: __#@fontsize#__;
    }
    div.PopupMenu
    {
        position: absolute;
        width: 200px;
        background-color: white;
        position: absolute;
        left: -500px;
        top: 1px;
        border: solid 1px #a0a0a0;
        overflow: hidden;
        z-index: -1;
    }
    div.PopupScrollUpArea
    {
        position: absolute;
        left: 0px;
        top: 0px;
        height: 12px;
        background: white;
        width: 100%%;
        cursor: hand;
        visibility: hidden;
    }
    div.PopupScrollDownArea
    {
        position: absolute;
        left: 0px;
        top: 0px;
        height: 12px;
        background: white;
        width: 100%%;
        cursor: hand;
        visibility: hidden;
    }
    </style>
    <script language="javascript" src="../viewerfiles/browserdetect.js"></script>
    <script language="javascript" src="../viewerfiles/contextmenu.js"></script>
    <script language="javascript" src="../viewerfiles/legend.js"></script>
    <script type="text/javascript" src="../viewerfiles/hashtable.js"></script>
    <script language=javascript>
    var thisFrame = this;
    var tree = null;
    var scale = -1;
    var iconExpand = "../stdicons/lc_expand.gif";
    var iconCollapse = "../stdicons/lc_collapse.gif";
    var iconNoExpand = "../stdicons/lc_noexpand.gif";
    var iconGroup = "../stdicons/lc_group.gif";
    var iconBrokenLayer = "../stdicons/lc_broken.gif";
    var iconRasterLayer = "../stdicons/lc_raster.gif";
    var iconDrawingLayer = "../stdicons/lc_dwf.gif";
    var iconThemeLayer = "../stdicons/lc_theme.gif";
    var iconChecked = "../stdicons/lc_checked.gif";
    var iconUnchecked = "../stdicons/lc_unchecked.gif";
    var ctxMenu;
    var cmdState;
    var layerMap = null;

    function GroupStats()
    {
        this.lyrgrpCount = 0;
        this.lyrgrpVisible = 0;
    }

    function ShowGroupLayerCmd()
    {
        this.showGroups = new Array();
        this.hideGroups = new Array();
        this.showLayers = new Array();
        this.hideLayers = new Array();
    }

    function InitDocument()
    {
        document.onmousemove = OnMouseMove;
        if(msie || safari)
            document.oncontextmenu = OnContextMenu;
        document.onclick = OnClick;
        document.onmousedown = OnMouseDown;
        document.onmouseup = OnMouseUp;
        parent.OnControlLoaded();
    }

    function SetTree(groupLayers)
    {
        tree = groupLayers;
        BuildTreeUi(tree);
        if(scale != -1)
            SetScale(scale);
        layerMap = new Hashtable();
        BuildLayerMap(tree, layerMap);
        parent.OnInternalStateComplete();
        try { GetMapFrame().OnLayersChanged(); } catch(e) {}
    }

    function BuildTreeUi(tree)
    {
        var code = ""
        for(var i=0; i < tree.length; i++)
        {
            code += BuildLayersAndGroups(tree[i]);
        }
        document.getElementById("Tree").innerHTML = code;
    }

    function BuildLayersAndGroups(node)
    {
        var isGroup = node.type == 0;
        var item = '<div id="' + node.objectId + '"><table border=0 cellspacing="0" cellpadding="0"><tr height=16>';
        //expand/collapse icon
        item += '<td width=16 id="Ex_' + node.objectId + '">' + (isGroup? MakeExpandCode(node) : '') + '</td>';
        if(isGroup || !node.base)
        {
            //checkbox
            item += '<td width=16 id="Chk_' + node.objectId + '">' + MakeCheckCode(node) + '</td>';
        }
        //icon
        item += '<td width=23 id="Ic_' + node.objectId + '"><img width=16 height=16 src="';
        if(isGroup)
            item += iconGroup;
        else
            item += iconBrokenLayer;
        item += '"></td>';
        //legend text
        item += '<td id="Lg_' + node.objectId +'">' + node.legend + '</td>';
        item += '</tr></table>';
        item += '<div id="ChildrenOf_' + node.objectId + '" style="margin-left: ' + (isGroup? 20: 32) + 'px; display:';
        item += node.expanded? 'block">' : 'none">';
        if(isGroup && node.children != null && node.children.length > 0)
        {
            for(var i=0; i < node.children.length; i++)
                item += BuildLayersAndGroups(node.children[i]);
        }
        item += '</div>';
        item += '</div>';
        return item;
    }

    function RequestSymbolizationIcon(layer, scale)
    {
        return BuildIconRequest(layer.layerRes, scale, -1, -1);
    }

    function RequestThemeStyleIcon(layer, scale, themeIndex, geomtype)
    {
        return BuildIconRequest(layer.layerRes, scale, themeIndex, geomtype);
    }

    function BuildIconRequest(layerDef, scale, themeIndex, geomtype)
    {
        return GetMapFrame().GetWebAgent() + "?OPERATION=GETLEGENDIMAGE&SESSION=" + GetMapFrame().GetSessionId() + "&VERSION=1.0.0&SCALE=" + scale + "&LAYERDEFINITION=" + encodeURIComponent(layerDef) + "&THEMECATEGORY=" + themeIndex + "&TYPE=" + geomtype;
    }

    // Set the styles sub elements of a layer element
    // Set the layer icon and the layer check as necessary
    function SetLayerStyles(layer)
    {
        var layerChildren = document.getElementById('ChildrenOf_' + layer.objectId);
        var code = "";
        var sc = layer.children[layer.curScale];
        var styles = sc.children;
        var hasThemes = styles.length > 1;
        var layerIcon = "";
        if(hasThemes)
        {
            for(var j=0; j < styles.length; j++)
            {
                var node = styles[j];
                var icon = RequestThemeStyleIcon(layer, scale, node.catindex, node.geomtype);

                code += '<table border=0 cellspacing="0" cellpadding="0"><tr height=16>';
                //icon
                code += '<td width=23><img width=16 height=16 src="' + icon + '"></td>';
                //legend text
                code += '<td>' + node.legend + '</td>';
                code += '</tr></table>';
                
                if(!sc.showlongtheme && styles.length > 10) {
                    if(j == styles.length - 1)
                        break;
                    code += '<table border=0 cellspacing="0" cellpadding="0"><tr height=16>';
                    code += '<td width=23><img width=16 height=16 src="../stdicons/transparentpixel.gif"></td>';
                    code += '<td>...</td>';
                    code += '</tr></table>';
                    j = styles.length - 2;
                }
            }
            if(styles.length <= 10)
                sc.showlongtheme = true;
            layerChildren.innerHTML = code;
            layerIcon = iconThemeLayer;
        }
        else
        {
            if(layer.lyrtype == 1)
                layerIcon = iconRasterLayer;
            else if(layer.lyrtype == 2)
                layerIcon = iconDrawingLayer;
            else if(layer.curScale == -1)
                layerIcon = iconBrokenLayer;
            else
                layerIcon = RequestSymbolizationIcon(layer, scale);
        }
        SetLayerIcon(layer, layerIcon);
        SetLayerExpandBox(layer, hasThemes);
    }

    function SetLayerIcon(layer, icon)
    {
        var icElt = document.getElementById('Ic_' + layer.objectId);
        if(icElt != null)
            icElt.innerHTML = '<img width=16 height=16 src="' + icon + '">';
    }

    function SetLayerExpandBox(layer, show)
    {
        var expElt = document.getElementById('Ex_' + layer.objectId);
        if(expElt != null)
        {
            if(!show)
                expElt.innerHTML = '';
            else
                expElt.innerHTML = MakeExpandCode(layer);
        }
    }

    function MakeExpandCode(node)
    {
        return '<img width=9 height=9 src="' + (node.expanded? iconCollapse: iconExpand) + '" onclick="Toggle(\'' + node.objectId +'\')">';
    }

    function MakeCheckCode(node)
    {
        return '<img width=13 height=13 src="' + (node.visible? iconChecked: iconUnchecked) + '" onClick="ChangeVisibility(\'' + node.objectId +'\')">';
    }

    function UpdateGroupLayerCheck(node)
    {
        var elt = document.getElementById('Chk_' + node.objectId);
        if(elt != null)
            elt.innerHTML = MakeCheckCode(node);
    }

    function Toggle(objectId)
    {
        var node = FindNode(tree, objectId);
        if(node == null)
            return;
        if(node.expanded)
            Collapse(node);
        else
            Expand(node);
    }

    function Expand(node)
    {
        var elt = document.getElementById('ChildrenOf_' + node.objectId);
        if(elt != null)
        {
            node.expanded = true;
            elt.style.display = "block";
            if(node.type == 0 || HasLayerThemes(node))
                ShowExpandedState(node);
        }
    }

    function Collapse(node)
    {
        var elt = document.getElementById('ChildrenOf_' + node.objectId);
        if(elt != null)
        {
            node.expanded = false;
            elt.style.display = "none";
            if(node.type == 0 || HasLayerThemes(node))
                ShowExpandedState(node);
        }
    }

    function ShowExpandedState(node)
    {
        var expElt = document.getElementById('Ex_' + node.objectId);
        if(expElt != null)
            expElt.innerHTML = MakeExpandCode(node);
    }

    function ChangeVisibility(objectId)
    {
        var node = FindNode(tree, objectId);
        if(node == null)
            return;
        var show = (node.visible = !node.visible);
        var chkElt = document.getElementById('Chk_' + objectId);
        if(chkElt != null)
            chkElt.innerHTML = MakeCheckCode(node);
        if(node.type == 0 && node.base)
            GetMapFrame().ShowBaseGroup(node.name, node.objectId, show);
        else
            GetMapFrame().ShowGroupLayers(node.type == 0? (show? node.objectId: ""): "",
                            node.type == 0? (show? "": node.objectId): "",
                            node.type == 1? (show? node.objectId: ""): "",
                            node.type == 1? (show? "": node.objectId): "");
    }

    function ShowHideNodes(nodes)
    {
        for(var i=0; i < nodes.length; i++)
        {
            var node = nodes[i];
            if(node.type == 0)
            {
                var grpElt = document.getElementById(node.objectId);
                if(!node.isDisplayed)
                    grpElt.style.display = "none";
                else
                {
                    grpElt.style.display = "block";
                    if(node.children != null && node.children.length > 0) {
                        ShowHideNodes(node.children);
                        hasVisibleChildren = false;
                        for(var j=0; j < node.children.length; j++) {
                            if(node.children[j].isDisplayed) {
                                hasVisibleChildren = true;
                            }
                        }
                        expElt = document.getElementById('Ex_' + node.objectId);
                        if(expElt)
                            expElt.style.visibility = hasVisibleChildren? "visible": "hidden";
                    }
                }
            }
            else if(node.type == 1)
            {
                var lyrElt = document.getElementById(node.objectId);
                lyrElt.style.display = node.isDisplayed? "block" : "none";
            }
        }
    }

    function OnMouseMove(e)
    {
        if(!msie)
        {
            try { GetMapFrame().OnMouseMove(e); } catch(e) {}
        }
    }

    function OnMouseDown(e)
    {
        if(!PopupMouseDown(e))
        {
            hidePopup(ctxMenu)
            GetMainFrame().ForwardMouseDown(document, e);
        }
        return false;
    }

    function OnMouseUp(e)
    {
        var tgt;
        if(msie)
        {
            e = event;
            tgt = e.srcElement;
        }
        else
            tgt = e.target;
        if(e.button != 2)
        {
            GetMapFrame().ForwardMouseUp(e);
            return false;
        }
        CheckContextMenu(tgt, e.clientX, e.clientY);

        return false;
    }

    function OnContextMenu(e) {
        if(safari)
            CheckContextMenu(e.target, e.clientX, e.clientY);
        return false;
    }
    
    function CheckContextMenu(tgt, x, y) {
        var tgname = tgt.tagName;
        var id = "";
        if(tgname == "TD")
        {
            id = tgt.id;
            if(id.substr(0, 3) == "Lg_")
                id = id.substr(3);
            else
                id = "";
        }
        else if(tgname == "IMG")
        {
            id = tgt.parentNode.id;
            if(id.substr(0, 3) == "Ic_")
                id = id.substr(3);
            else
                id = "";
        }

        var node = id != ""? FindNode(tree, id): null;
        ContextMenu(x, y, node);
    }

    function OnClick(e)
    {
        return false;
    }

    function OnForwardMouseDown(e)
    {
        hidePopup(ctxMenu);
    }

    function ContextMenu(x, y, node)
    {
        cmdState = new Array();
        var isLayer = node && node.type == 1;
        var isGroup = node && node.type == 0;

        ctxMenu = new MenuData('Legend',20, 21, 50, 150, "../stdicons/icon_popupscrollup.gif", "../stdicons/icon_popupscrollup_disabled.gif", "../stdicons/icon_popupscrolldown.gif", "../stdicons/icon_popupscrolldown_disabled.gif", this, false, "white");
        startBuildMenuContent(ctxMenu);

        if(isGroup && !node.base)
        {
            var grpStats = new GroupStats();
            GetGroupStats(node, grpStats);
            addMenuOption(ctxMenu, "__#DISPLAYALLINGROUP#__", 1 + ':' + node.objectId, 1, "", "", cmdState[1] = (grpStats.lyrgrpCount != grpStats.lyrgrpVisible));
            addMenuOption(ctxMenu, "__#HIDEALLINGROUP#__", 2 + ':' + node.objectId, 1, "", "", cmdState[2] = (grpStats.lyrgrpVisible != 0));
            addMenuOption(ctxMenu, "", 0, 2, "", "", false);
        }
        else if(isLayer)
        {
            if(node.curScale != -1) {
                sc = node.children[node.curScale];
                if(!sc.showlongtheme && sc.children.length > 1 && node.expanded) {
                    addMenuOption(ctxMenu, "__#SHOWLONGTHEME#__", 6 + ':' + node.objectId, 1, "", "", cmdState[6] = true);
                    addMenuOption(ctxMenu, "", 0, 2, "", "", false);
                }
            }
        }
        addMenuOption(ctxMenu, "__#REFRESH#__", 3, 1, "", "", cmdState[3] = true);
        addMenuOption(ctxMenu, "__#EXPANDALL#__", 4, 1, "", "", cmdState[4] = true);
        addMenuOption(ctxMenu, "__#COLLAPSEALL#__", 5, 1, "", "", cmdState[5] = true);

        endBuildMenuContent(ctxMenu);
        showPopup(ctxMenu, true, x, y);
    }

    function ExecuteCommand(option)
    {
        var tok = option.split(":");
        var cmd, objectId;
        if(tok.length > 1)
            objectId = tok[1];
        switch(parseInt(tok[0]))
        {
            case 1:
                ShowGroupLayers(FindNode(tree, objectId), true);
                break;
            case 2:
                ShowGroupLayers(FindNode(tree, objectId), false);
                break;
            case 3:
                GetMainFrame().Refresh();
                break;
            case 4:
                ExpandNodes(tree, true);
                break;
            case 5:
                ExpandNodes(tree, false);
                break;
            case 6: 
                layer = FindNode(tree, objectId);
                layer.children[layer.curScale].showlongtheme = true;
                SetLayerStyles(layer);
                break;
        }
    }

    function OnEnableCommand(option)
    {
        var tok = option.split(":");
        var cmd = parseInt(tok[0]);
        return cmdState[cmd];
    }

    function ShowGroupLayers(group, show)
    {
        if(group == null)
            return;
        var cmd = new ShowGroupLayerCmd();
        PrepareShowGroupLayers(group, show, cmd);
        if(show)
        {
            if(cmd.showGroups.length == 0 && cmd.showLayers.length == 0)
          return;
          GetMapFrame().ShowGroupLayers(cmd.showGroups.length > 0? cmd.showGroups.join('__#LEGENDLISTSEPARATOR#__'): "", "",
          cmd.showLayers.length > 0? cmd.showLayers.join('__#LEGENDLISTSEPARATOR#__'): "", "");
          }
          else
          {
          if(cmd.hideGroups.length == 0 && cmd.hideLayers.length == 0)
          return;
          GetMapFrame().ShowGroupLayers("", cmd.hideGroups.length > 0? cmd.hideGroups.join('__#LEGENDLISTSEPARATOR#__'): "",
          "", cmd.hideLayers.length > 0? cmd.hideLayers.join('__#LEGENDLISTSEPARATOR#__'): "");
          }
          }

          function PrepareShowGroupLayers(group, show, cmd)
          {
          if(!group.children)
          return;
          for(var i=0; i < group.children.length; i++)
        {
            var node = group.children[i];
            if(node.isDisplayed)
            {
                if(show)
                {
                    if(!node.visible)
                    {
                        node.visible = true;
                        if(node.type == 0)
                            cmd.showGroups.push(node.objectId);
                        else
                            cmd.showLayers.push(node.objectId);
                        UpdateGroupLayerCheck(node);
                    }
                }
                else
                {
                    if(node.visible)
                    {
                        node.visible = false;
                        if(node.type == 0)
                            cmd.hideGroups.push(node.objectId);
                        else
                            cmd.hideLayers.push(node.objectId);
                        UpdateGroupLayerCheck(node);
                    }
                }
                if(node.type == 0)
                    PrepareShowGroupLayers(node, show, cmd);
            }
        }
    }

    function ExpandNodes(nodes, expand)
    {
        for(var i=0; i < nodes.length; i++)
        {
            var node = nodes[i];
            if(expand)
            {
                if(!node.expanded)
                    Expand(node);
            }
            else
            {
                if(node.expanded)
                    Collapse(node);
            }
            if(node.type == 0 && node.children != null && node.children.length > 0)
                ExpandNodes(node.children, expand);
        }
    }

    function GetGroupStats(group, grpStats)
    {
        if(!group.children)
            return;
        for(var i=0; i < group.children.length; i++)
        {
            var node = group.children[i];
            if(node.isDisplayed)
            {
                grpStats.lyrgrpCount ++;
                if(node.visible)
                {
                    grpStats.lyrgrpVisible ++;
                    if(node.type == 0)
                        GetGroupStats(node, grpStats);
                }
            }
        }
    }

    function SetScale(newScale)
    {
        scale = newScale;
        if(tree == null)
            return;
        UpdateScaleRanges(tree);
        ShowHideNodes(tree);
    }

    function HasLayerThemes(layer)
    {
        if(layer.curScale == -1)
            return false;
        return layer.children[layer.curScale].children.length > 1;
    }

    // set the active scale ranges in layers, according to current scale, and set the display state for layers and groups
    // update the layer styles if necessary
    function UpdateScaleRanges(nodes)
    {
        for(var i=0; i < nodes.length; i++)
        {
            var node = nodes[i];
            if(node.type == 0)
            {
                var count = node.children != null? node.children.length: 0;
                node.hasVisibleLayers = false;
                if(count > 0) {
                    UpdateScaleRanges(node.children);
                    for(var j=0; j < node.children.length; j++) {
                        child = node.children[j];
                        if(child.type == 0) {
                            if(child.hasVisibleLayers) {
                                node.hasVisibleLayers = true;
                                break;
                            }
                        }
                        else {
                            if(child.curScale != -1) {
                                node.hasVisibleLayers = true;
                                break;
                            }
                        }
                    }
                }
                node.isDisplayed = node.displayInLegend && node.hasVisibleLayers;
            }
            else if(node.type == 1)
            {
                var rangeIndex = node.curScale;
                var scaleRanges = node.children;
                node.curScale = -1;
                for(var j=0; j < scaleRanges.length; j++)
                {
                    var scaleRange = scaleRanges[j];
                    if(scale >= scaleRange.min && scale < scaleRange.max)
                    {
                        node.curScale = j;
                        break;
                    }
                }
                if(node.displayInLegend && rangeIndex != node.curScale && node.curScale != -1)
                    SetLayerStyles(node);
                node.isDisplayed = node.displayInLegend && node.curScale != -1;
            }
        }
    }

    function FindNode(nodes, objectId)
    {
        for(var i=0; i < nodes.length; i++)
        {
            var node = nodes[i];
            if(node.objectId == objectId)
                return node;
            if(node.type == 0 && node.children != null)
            {
                var child = FindNode(node.children, objectId);
                if(child != null)
                    return child;
            }
        }
        return null;
    }

    function GetMapFrame()
    {
        return parent.GetMapFrame();
    }

    function GetMainFrame()
    {
        return GetMapFrame().parent;
    }

    function UpdateTree(layerGroups)
    {
        if(!HasTreeChanged(tree, layerGroups))
            return null;

        return new Array();

        //For now, when the tree has changed, we query the whole content again.
        //If we want an intelligent update of the tree, here is the place to
        //implement it.
    }

    function HasTreeChanged(current, lightTree)
    {
        if(current.length != lightTree.length)
            return true;

        for(var i = 0; i < current.length; i++)
        {
            var node1 = current[i], node2 = lightTree[i];
            if(node1.type != node2.type || node1.objectId != node2.objectId)
                return true;
            if(node1.type == 1)
            {
                if(node1.layerRes != node2.layerRes)
                    return true;
            }
            else if(node1.type == 0)
            {
                if(node1.children != null)
                {
                    if(node2.children == null)
                        return true;
                    if(HasTreeChanged(node1.children, node2.children))
                        return true;
                }
            }
        }
        return false;
    }

    function BuildLayerMap(nodes, layerMap)
    {
        for(var i=0; i < nodes.length; i++)
        {
            var node = nodes[i];
            if(node.type == 0)
            {
                if(node.children != null && node.children.length > 0)
                    BuildLayerMap(node.children, layerMap);
            }
            else if(node.type == 1)
                layerMap.setItem(node.objectId, node);
        }
    }

    function GetLayer(layerId)
    {
        var lyr = layerMap.getItem(layerId);
        if(lyr == null)
            return null;
        return new Layer(lyr.legend, lyr.name, layerId);
    }

    function GetLayers(onlyVisible, onlySelectable)
    {
        var layers = new Array();
        DoGetLayers(tree, layers, onlyVisible, onlySelectable);
        return layers;
    }

    function DoGetLayers(nodes, layers, onlyVisible, onlySelectable)
    {
        for(var i=0; i < nodes.length; i++)
        {
            var node = nodes[i];
            if(node.type == 0)
            {
                if(onlyVisible && !node.visible)
                    continue;
                if(node.children != null && node.children.length > 0)
                    DoGetLayers(node.children, layers, onlyVisible, onlySelectable);
            }
            else if(node.type == 1)
            {
                if(onlyVisible && !node.visible)
                    continue;
                if(onlySelectable && !node.selectable)
                    continue;
                layers.push(new Layer(node.legend, node.name, node.objectId));
            }
        }
    }

    function GetBaseGroups(visOnly)
    {
        if(tree == null)
            return null;
        groups = new Array();
        for(var i=0; i < tree.length; i++)
        {
            if(tree[i].type == 0)
            {
                if(tree[i].base)
                {
                    if(visOnly && !tree[i].visible)
                        continue;
                    groups.push(tree[i].name);
                }
            }
        }
        return groups;
    }
    </script>
  </head>
  <body id="legendUi" onload="InitDocument()" leftmargin=3 topmargin=3 rightmargin=3 bottommargin=3 marginwidth=3 marginheight=3>
    <div id="Tree">
    </div>
    <div class="PopupMenu" id="Legend"></div>
    <div class="PopupMetricsDiv" id="MetricsDiv" style="display:none;"><span class="PopupMetrics" id="Metrics"></span></div>
  </body>
</html>
