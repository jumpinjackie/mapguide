<?xml version='1.0'?>
<Template service="WMS" version="REGRESS">
<!-- This template is purely for testing the OgcServer engine.  It should NOT be published! -->
<Definitions>
 <Define item="My.Translator">
  <translate from="a">Alpha</translate>
  <translate from="b">Bravo</translate>
  <translate from="c">Charlie</translate>
  <translate from="d">Delta</translate>
  <translate>Otherwise</translate>
 </Define>
 <Define item="My.Translator.NoOtherwise">
  <translate from="a">Alpha</translate>
  <translate from="b">Bravo</translate>
  <translate from="c">Charlie</translate>
  <translate from="d">Delta</translate>
 </Define>
 <Define item="My.list">a,b,c,d,e</Define>
 <Define item="Mapper"><item><?Translate text="&Enum.item;" with="&My.Translator;" ?></item></Define>
 <Define item="Mapper.NoOtherwise"><item><?Translate text="&Enum.item;" with="&My.Translator.NoOtherwise;" ?></item></Define>

 <!-- Test VersionNegotiation -->
 <!-- This overrides the definitions in the config; is a constant baseline for the test -->
 <Define item="SupportedVersions">
   <Version number="1.0.0"/>
   <Version number="1.1.0"/>
   <Version number="1.1.1"/>
 </Define>
 <!-- logic: if requested < lowest, then return lowest, else return highest <= requested -->
 <Define item="VersionNegotiation.Expected"><using>&SupportedVersions;</using>
<item test="0.1.0">1.0.0</item>
<item test="1.0.7">1.0.0</item>
<item test="1.1.1">1.1.1</item>
<item test="1.3.0">1.1.1</item>
<item test="2.0.0">1.1.1</item></Define>
 <Define item="VersionNegotiation.Actual"  ><using>&SupportedVersions;</using>
<item test="0.1.0"><?Diagnostic test="version" param="0.1.0"?></item>
<item test="1.0.7"><?Diagnostic test="version" param="1.0.7"?></item>
<item test="1.1.1"><?Diagnostic test="version" param="1.1.1"?></item>
<item test="1.3.0"><?Diagnostic test="version" param="1.1.1"?></item>
<item test="2.0.0"><?Diagnostic test="version" param="2.0.0"?></item></Define>

 <!-- Used by test PI.Ifdef -->
 <!-- Note: there should not be a definition for not_defined -->
 <Define item="is_defined">Yup</Define>

 <!-- Used by test PI.If -->
 <Define item="left">Alpha</Define>
 <Define item="right">alpha</Define>


 <!-- Test Response.Xml -->
 <Define item="Response.Xml.Expected"></Define>
 <Define item="Response.Xml.Actual"></Define>

 <!-- Test PI.Enum -->
 <Define item="PI.Enum.Expected">(attr="has content" content="content") (attr="no content" content="") (attr="empty element" content="") (attr="has content too" content="content 2")</Define>
 <Define item="PI.Enum.Actual"><?Enum list="&PI.Enum.List;" using="&PI.Enum.Using;" between=" "?></Define>
 <Define item="PI.Enum.List">
  <item attribute="has content">content</item>
  <item attribute="no content"></item>
  <item attribute="empty element"/>
  <item attribute="has content too">content 2</item>
 </Define>
 <Define item="PI.Enum.Using">(attr="&Enum.item.attribute;" content="&Enum.item;")</Define>

 <!-- Test PI.Enum.2 -->
 <Define item="PI.Enum.2.Expected">1=a.Alpha 3=c.Charlie 5=e.Echo 7=.Golf </Define>
 <Define item="PI.Enum.2.Actual"><?Enum list="&PI.Enum.2.List" item="Other" using="&PI.Enum.2.Using" subset="1,3,5,7"?></Define>
 <Define item="PI.Enum.2.List">
  <item thing="never">This is ignored</item>
  <Other thing="a">Alpha</Other>
  <Other thing="b">Bravo</Other>
  <Other thing="c">Charlie</Other>
  <Other thing="d">Delta</Other>
  <Other thing="e">Echo</Other>
  <Other thing="f">Foxtrot</Other>
  <Other thing="">Golf</Other>
  <Other thing="h">Hotel</Other>
 </Define>
 <Define item="PI.Enum.2.Using">&Enum.iteration;=&Enum.item.thing;.&Enum.item; </Define>

 <!-- Test PI.Enum.Empty -->
 <Define item="PI.Enum.Empty.Expected"></Define>
 <Define item="PI.Enum.Empty.Actual"><?Enum list="" using="&Enum.item;"?></Define>

 <!-- Test PI.EnumDelim.Literal -->
 <Define item="PI.EnumDelim.Literal.Expected">c:a:b:r</Define>
 <Define item="PI.EnumDelim.Literal.Actual"><?EnumDelim list="c,a,b,r"   using="&Enum.Item;" between=":"?></Define>

 <!-- Test PI.EnumDelim.Expansion -->
 <Define item="PI.EnumDelim.Expansion.Expected"><item>Alpha</item><item>Bravo</item><item>Charlie</item><item>Delta</item><item>Otherwise</item><item>Alpha</item><item>Bravo</item><item>Charlie</item><item>Delta</item><item>e</item></Define>
 <Define item="PI.EnumDelim.Expansion.Actual"><?EnumDelim list="&My.list;" using="&Mapper;" ?><?EnumDelim list="&My.list;" using="&Mapper.NoOtherwise;" ?></Define>


 <!-- Test PI.Ifdef -->
 <Define item="PI.Ifdef.Expected"><Success>The item 'not_defined' is not defined</Success>
<Success>The item 'is_defined' is defined</Success></Define>
 <Define item="PI.Ifdef.Actual"><?Ifdef item="not_defined"?><Failure>The item 'not_defined' is defined</Failure><?Else?><Success>The item 'not_defined' is not defined</Success><?Endif?>
<?Ifdef item="is_defined"?><Success>The item 'is_defined' is defined</Success><?Else?><Failure>The item 'is_defined' is not defined</Failure><?Endif?></Define>


 <!-- Test PI.If -->
 <Define item="PI.If.Expected"><Left>Alpha</Left><Right>alpha</Right>
<NOT><EQ/></NOT>
<NE/>
<LT/>
<NOT><GT/></NOT>
<LE/>
<NOT><GE/></NOT>
<EQI/>
<NOT><NEI/></NOT>
<NOT><LTI/></NOT>
<NOT><GTI/></NOT>
<LEI/>
<GEI/></Define>
 <Define item="PI.If.Actual"><Left>&left;</Left><Right>&right;</Right>
<?If l="&left;" op="eq" r="&right;"?><EQ/><?Else?><NOT><EQ/></NOT><?Endif?>
<?If l="&left;" op="ne" r="&right;"?><NE/><?Else?><NOT><NE/></NOT><?Endif?>
<?If l="&left;" op="lt" r="&right;"?><LT/><?Else?><NOT><LT/></NOT><?Endif?>
<?If l="&left;" op="gt" r="&right;"?><GT/><?Else?><NOT><GT/></NOT><?Endif?>
<?If l="&left;" op="le" r="&right;"?><LE/><?Else?><NOT><LE/></NOT><?Endif?>
<?If l="&left;" op="ge" r="&right;"?><GE/><?Else?><NOT><GE/></NOT><?Endif?>
<?If l="&left;" op="eqi" r="&right;"?><EQI/><?Else?><NOT><EQI/></NOT><?Endif?>
<?If l="&left;" op="nei" r="&right;"?><NEI/><?Else?><NOT><NEI/></NOT><?Endif?>
<?If l="&left;" op="lti" r="&right;"?><LTI/><?Else?><NOT><LTI/></NOT><?Endif?>
<?If l="&left;" op="gti" r="&right;"?><GTI/><?Else?><NOT><GTI/></NOT><?Endif?>
<?If l="&left;" op="lei" r="&right;"?><LEI/><?Else?><NOT><LEI/></NOT><?Endif?>
<?If l="&left;" op="gei" r="&right;"?><GEI/><?Else?><NOT><GEI/></NOT><?Endif?></Define>

</Definitions>

<Response request="GetCapabilities" content-type="text/xml">
<Tests>
 <Header>
  <Title>OgcServer Test Case</Title>
  <Abstract>This is only for validation of basic OgcServer engine code.  It should not be published in the shipping product.</Abstract>
 </Header>

 <Test name="Response.xml">
  <Purpose>Verifies that the response is XML, verifies that Definitions and Expansions work, and establishes that the &lt;?If ?&gt; Processing Instruction functions using the "eq"uality operator -- fundamental functionality that needs to be in place to perform the remainder of the tests</Purpose>
  <!--
  Each test enumerates those aspects of the OgcServer engine that they exercise
  and/or rely on to complete.  A failure of any given test should call into question
  the items enumerated here.  A failure of several tests should call into question
  the intersection of each test's <Exercises> set.
  -->

  <Exercises>
   <item>Response</item>
   <item>Definitions</item>
   <item>Expansion</item>
   <item>PI.If</item>
   <item>PI.If.op=eq</item>
  </Exercises>
  <!-- The test expects the following result -->
  <Expected>&Response.Xml.Expected;</Expected>
  <!-- The test actually generated the following result -->
  <Actual>&Response.Xml.Actual;</Actual>
  <!--
  The results are success or failure, based on the
  equality of the two results above
  -->
  <Results>
   <?If l="&Response.Xml.Expected;" op="eq" r="&Response.xml.Actual"?><Success/><?Else?><Failure/><?Endif?>
  </Results>
 </Test>

 <Test name="VersionNegotiation">
  <Purpose>Exercises the version negotiation code, to make sure it complies with the OGC spec:
           (1) "If a version lower than any of those known to the server, then the server shall send the lowest version it supports."
           (2) "If a version unknown to the server and higher than the lowest supported version, the server shall send the highest
               version it supports that is less than the requested version"
</Purpose>
  <Exercises>
   <item>Version.Negotiation</item>
  </Exercises>
  <Expected>&VersionNegotiation.Expected;</Expected>
  <Actual>&VersionNegotiation.Actual;</Actual>
  <Results>
   <?If l="&VersionNegotiation.Expected;" op="eq" r="&VersionNegotiation.Actual"?><Success/><?Else?><Failure/><?Endif?>
  </Results>
 </Test>

 <Test name="PI.Enum">
  <Purpose>Tests the Enum ProcessingInstuction for attributes and Empty values</Purpose>
  <Exercises>
   <item>PI.Enum</item>
   <item>PI.Enum.attributes</item>
   <item>PI.Enum.emptycontent</item>
   <item>PI.Enum.between</item>
  </Exercises>
  <Expected>&PI.Enum.Expected;</Expected>
  <Actual>&PI.Enum.Actual;</Actual>
  <Results>
   <?If l="&PI.Enum.Expected;" op="eq" r="&PI.Enum.Actual"?><Success/><?Else?><Failure/><?Endif?>
  </Results>
 </Test>

 <Test name="PI.Enum.2">
  <Purpose>Tests the Enum ProcessingInstuction for alternate item element, iteration indexing, and subsetting.</Purpose>
  <Exercises>
   <item>PI.Enum</item>
   <item>PI.Enum.attributes</item>
   <item>PI.Enum.emptyattribute</item>
   <item>PI.Enum.item=Other</item>
   <item>PI.Enum.iteration</item>
   <item>PI.Enum.subset</item>
  </Exercises>
  <Expected>&PI.Enum.2.Expected;</Expected>
  <Actual>&PI.Enum.2.Actual;</Actual>
  <Results>
   <?If l="&PI.Enum.2.Expected;" op="eq" r="&PI.Enum.2.Actual"?><Success/><?Else?><Failure/><?Endif?>
  </Results>
 </Test>

 <Test name="PI.Enum.Empty">
  <Purpose>Tests the Enum ProcessingInstuction for empty list.</Purpose>
  <Exercises>
   <item>PI.Enum</item>
   <item>PI.Enum.emptylist</item>
  </Exercises>
  <Expected>&PI.Enum.Empty.Expected;</Expected>
  <Actual>&PI.Enum.Empty.Actual;</Actual>
  <Results>
   <?If l="&PI.Enum.Empty.Expected;" op="eq" r="&PI.Enum.Empty.Actual"?><Success/><?Else?><Failure/><?Endif?>
  </Results>
 </Test>

 <Test name="PI.EnumDelim.Literal">
  <Purpose>Tests the EnumDelim ProcessInstruction with literal list attribute</Purpose>
  <Exercises>
   <item>PI.EnumDelim</item>
   <item>PI.EnumDelim.list=literal</item>
   <item>PI.EnumDelim.using=Expansion.Enum.item</item>
   <item>PI.Enum.between</item>
  </Exercises>
  <Expected>&PI.EnumDelim.Literal.Expected;</Expected>
  <Actual>&PI.EnumDelim.Literal.Actual;</Actual>
  <Results>
   <?If l="&PI.EnumDelim.Literal.Expected;" op="eq" r="&PI.EnumDelim.Literal.Actual"?><Success/><?Else?><Failure/><?Endif?>
  </Results>
 </Test>

 <Test name="PI.EnumDelim.Expansion">
  <Purpose>Tests the EnumDelim ProcessInstruction with expansion list attribute and a format utilizing Translation</Purpose>
  <Exercises>
   <item>PI.EnumDelim</item>
   <item>PI.EnumDelim.list=Expansion</item>
   <item>PI.EnumDelim.using=Expansion</item>
   <item>PI.Translation</item>
   <item>PI.Translation.default</item>
  </Exercises>
  <Expected>&PI.EnumDelim.Expansion.Expected;</Expected>
  <Actual>&PI.EnumDelim.Expansion.Actual;</Actual>
  <Results>
   <?If l="&PI.EnumDelim.Expansion.Expected;" op="eq" r="&PI.EnumDelim.Expansion.Actual"?><Success/><?Else?><Failure/><?Endif?>
  </Results>
 </Test>

 <Test name="PI.Ifdef">
  <Purpose>Tests the Ifdef ProcessInstruction</Purpose>
  <Exercises>
   <item>Definitions</item>
   <item>Expansions</item>
   <item>PI.Ifdef</item>
   <item>PI.Else</item>
   <item>PI.Endif</item>
  </Exercises>
  <Expected>&PI.Ifdef.Expected;</Expected>
  <Actual>&PI.Ifdef.Actual;</Actual>
  <Results>
   <?If l="&PI.Ifdef.Expected;" op="eq" r="&PI.Ifdef.Actual"?><Success/><?Else?><Failure/><?Endif?>
  </Results>

 </Test>

 <Test name="PI.If">
  <Purpose>Tests the If ProcessInstruction</Purpose>
  <Exercises>
   <item>Definitions</item>
   <item>Expansion</item>
   <item>PI.If</item>
   <item>PI.If.op=eq</item>
   <item>PI.If.op=eqi</item>
   <item>PI.If.op=ne</item>
   <item>PI.If.op=nei</item>
   <item>PI.If.op=lt</item>
   <item>PI.If.op=lti</item>
   <item>PI.If.op=gt</item>
   <item>PI.If.op=gti</item>
   <item>PI.If.op=le</item>
   <item>PI.If.op=lei</item>
   <item>PI.If.op=ge</item>
   <item>PI.If.op=gei</item>
   <item>PI.Else</item>
   <item>PI.Endif</item>
  </Exercises>
  <Expected>&PI.If.Expected;</Expected>
  <Actual>&PI.If.Actual;</Actual>
  <Results>
   <?If l="&PI.If.Expected;" op="eq" r="&PI.If.Actual"?><Success/><?Else?><Failure/><?Endif?>
  </Results>
 </Test>

</Tests>
</Response>
</Template>
