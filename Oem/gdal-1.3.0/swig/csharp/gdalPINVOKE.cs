/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

class gdalPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("gdal", EntryPoint="SWIGRegisterExceptionCallbacks_gdal")]
    public static extern void SWIGRegisterExceptionCallbacks_gdal(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("gdal", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_gdal")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_gdal(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_gdal(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_gdal(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(gdalPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(gdalPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("gdal", EntryPoint="SWIGRegisterStringCallback_gdal")]
    public static extern void SWIGRegisterStringCallback_gdal(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_gdal(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  [DllImport("gdal", EntryPoint="CSharp_Debug")]
  public static extern void Debug(string jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Error")]
  public static extern void Error(int jarg1, int jarg2, string jarg3);

  [DllImport("gdal", EntryPoint="CSharp_PushErrorHandler__SWIG_0")]
  public static extern int PushErrorHandler__SWIG_0(string jarg1);

  [DllImport("gdal", EntryPoint="CSharp_PushErrorHandler__SWIG_1")]
  public static extern void PushErrorHandler__SWIG_1(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_PopErrorHandler")]
  public static extern void PopErrorHandler();

  [DllImport("gdal", EntryPoint="CSharp_ErrorReset")]
  public static extern void ErrorReset();

  [DllImport("gdal", EntryPoint="CSharp_GetLastErrorNo")]
  public static extern int GetLastErrorNo();

  [DllImport("gdal", EntryPoint="CSharp_GetLastErrorType")]
  public static extern int GetLastErrorType();

  [DllImport("gdal", EntryPoint="CSharp_GetLastErrorMsg")]
  public static extern string GetLastErrorMsg();

  [DllImport("gdal", EntryPoint="CSharp_PushFinderLocation")]
  public static extern void PushFinderLocation(string jarg1);

  [DllImport("gdal", EntryPoint="CSharp_PopFinderLocation")]
  public static extern void PopFinderLocation();

  [DllImport("gdal", EntryPoint="CSharp_FinderClean")]
  public static extern void FinderClean();

  [DllImport("gdal", EntryPoint="CSharp_FindFile")]
  public static extern string FindFile(string jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_SetConfigOption")]
  public static extern void SetConfigOption(string jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GetConfigOption")]
  public static extern string GetConfigOption(string jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_MajorObject_GetDescription")]
  public static extern string MajorObject_GetDescription(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_MajorObject_SetDescription")]
  public static extern void MajorObject_SetDescription(HandleRef jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_MajorObject_GetMetadata_Dict")]
  public static extern IntPtr MajorObject_GetMetadata_Dict(HandleRef jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_MajorObject_GetMetadata_List")]
  public static extern IntPtr MajorObject_GetMetadata_List(HandleRef jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_MajorObject_SetMetadata__SWIG_0")]
  public static extern int MajorObject_SetMetadata__SWIG_0(HandleRef jarg1, HandleRef jarg2, string jarg3);

  [DllImport("gdal", EntryPoint="CSharp_MajorObject_SetMetadata__SWIG_1")]
  public static extern int MajorObject_SetMetadata__SWIG_1(HandleRef jarg1, string jarg2, string jarg3);

  [DllImport("gdal", EntryPoint="CSharp_get_Driver_ShortName")]
  public static extern string get_Driver_ShortName(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_get_Driver_LongName")]
  public static extern string get_Driver_LongName(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_get_Driver_HelpTopic")]
  public static extern string get_Driver_HelpTopic(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Driver_Create")]
  public static extern IntPtr Driver_Create(HandleRef jarg1, string jarg2, int jarg3, int jarg4, int jarg5, int jarg6, HandleRef jarg7);

  [DllImport("gdal", EntryPoint="CSharp_Driver_CreateCopy")]
  public static extern IntPtr Driver_CreateCopy(HandleRef jarg1, string jarg2, HandleRef jarg3, int jarg4, HandleRef jarg5);

  [DllImport("gdal", EntryPoint="CSharp_Driver_Delete")]
  public static extern int Driver_Delete(HandleRef jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_set_GCP_GCPX")]
  public static extern void set_GCP_GCPX(HandleRef jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_get_GCP_GCPX")]
  public static extern double get_GCP_GCPX(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_set_GCP_GCPY")]
  public static extern void set_GCP_GCPY(HandleRef jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_get_GCP_GCPY")]
  public static extern double get_GCP_GCPY(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_set_GCP_GCPZ")]
  public static extern void set_GCP_GCPZ(HandleRef jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_get_GCP_GCPZ")]
  public static extern double get_GCP_GCPZ(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_set_GCP_GCPPixel")]
  public static extern void set_GCP_GCPPixel(HandleRef jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_get_GCP_GCPPixel")]
  public static extern double get_GCP_GCPPixel(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_set_GCP_GCPLine")]
  public static extern void set_GCP_GCPLine(HandleRef jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_get_GCP_GCPLine")]
  public static extern double get_GCP_GCPLine(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_set_GCP_Info")]
  public static extern void set_GCP_Info(HandleRef jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_get_GCP_Info")]
  public static extern string get_GCP_Info(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_set_GCP_Id")]
  public static extern void set_GCP_Id(HandleRef jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_get_GCP_Id")]
  public static extern string get_GCP_Id(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_new_GCP")]
  public static extern IntPtr new_GCP(double jarg1, double jarg2, double jarg3, double jarg4, double jarg5, string jarg6, string jarg7);

  [DllImport("gdal", EntryPoint="CSharp_delete_GCP")]
  public static extern void delete_GCP(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPX_get")]
  public static extern double GDAL_GCP_GCPX_get(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPX_set")]
  public static extern void GDAL_GCP_GCPX_set(HandleRef jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPY_get")]
  public static extern double GDAL_GCP_GCPY_get(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPY_set")]
  public static extern void GDAL_GCP_GCPY_set(HandleRef jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPZ_get")]
  public static extern double GDAL_GCP_GCPZ_get(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPZ_set")]
  public static extern void GDAL_GCP_GCPZ_set(HandleRef jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPPixel_get")]
  public static extern double GDAL_GCP_GCPPixel_get(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPPixel_set")]
  public static extern void GDAL_GCP_GCPPixel_set(HandleRef jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPLine_get")]
  public static extern double GDAL_GCP_GCPLine_get(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_GCPLine_set")]
  public static extern void GDAL_GCP_GCPLine_set(HandleRef jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_Info_get")]
  public static extern string GDAL_GCP_Info_get(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_Info_set")]
  public static extern void GDAL_GCP_Info_set(HandleRef jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_Id_get")]
  public static extern string GDAL_GCP_Id_get(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_Id_set")]
  public static extern void GDAL_GCP_Id_set(HandleRef jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_get_GCPX")]
  public static extern double GDAL_GCP_get_GCPX(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_set_GCPX")]
  public static extern void GDAL_GCP_set_GCPX(HandleRef jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_get_GCPY")]
  public static extern double GDAL_GCP_get_GCPY(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_set_GCPY")]
  public static extern void GDAL_GCP_set_GCPY(HandleRef jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_get_GCPZ")]
  public static extern double GDAL_GCP_get_GCPZ(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_set_GCPZ")]
  public static extern void GDAL_GCP_set_GCPZ(HandleRef jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_get_GCPPixel")]
  public static extern double GDAL_GCP_get_GCPPixel(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_set_GCPPixel")]
  public static extern void GDAL_GCP_set_GCPPixel(HandleRef jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_get_GCPLine")]
  public static extern double GDAL_GCP_get_GCPLine(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_set_GCPLine")]
  public static extern void GDAL_GCP_set_GCPLine(HandleRef jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_get_Info")]
  public static extern string GDAL_GCP_get_Info(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_set_Info")]
  public static extern void GDAL_GCP_set_Info(HandleRef jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_get_Id")]
  public static extern string GDAL_GCP_get_Id(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GDAL_GCP_set_Id")]
  public static extern void GDAL_GCP_set_Id(HandleRef jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_GCPsToGeoTransform")]
  public static extern IntPtr GCPsToGeoTransform(int jarg1, HandleRef jarg2, int jarg4);

  [DllImport("gdal", EntryPoint="CSharp_get_Dataset_RasterXSize")]
  public static extern int get_Dataset_RasterXSize(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_get_Dataset_RasterYSize")]
  public static extern int get_Dataset_RasterYSize(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_get_Dataset_RasterCount")]
  public static extern int get_Dataset_RasterCount(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_delete_Dataset")]
  public static extern void delete_Dataset(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetDriver")]
  public static extern IntPtr Dataset_GetDriver(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetRasterBand")]
  public static extern IntPtr Dataset_GetRasterBand(HandleRef jarg1, int jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetProjection")]
  public static extern string Dataset_GetProjection(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetProjectionRef")]
  public static extern string Dataset_GetProjectionRef(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_SetProjection")]
  public static extern int Dataset_SetProjection(HandleRef jarg1, string jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetGeoTransform")]
  public static extern void Dataset_GetGeoTransform(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_SetGeoTransform")]
  public static extern int Dataset_SetGeoTransform(HandleRef jarg1, HandleRef jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_BuildOverviews")]
  public static extern int Dataset_BuildOverviews(HandleRef jarg1, string jarg2, int jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetGCPCount")]
  public static extern int Dataset_GetGCPCount(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetGCPProjection")]
  public static extern string Dataset_GetGCPProjection(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_GetGCPs")]
  public static extern void Dataset_GetGCPs(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_SetGCPs")]
  public static extern int Dataset_SetGCPs(HandleRef jarg1, int jarg2, HandleRef jarg3, string jarg4);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_FlushCache")]
  public static extern void Dataset_FlushCache(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_AddBand")]
  public static extern int Dataset_AddBand(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Dataset_WriteRaster")]
  public static extern int Dataset_WriteRaster(HandleRef jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, HandleRef jarg8, HandleRef jarg9, HandleRef jarg10, int jarg11);

  [DllImport("gdal", EntryPoint="CSharp_get_Band_XSize")]
  public static extern int get_Band_XSize(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_get_Band_YSize")]
  public static extern int get_Band_YSize(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_get_Band_DataType")]
  public static extern int get_Band_DataType(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetRasterColorInterpretation")]
  public static extern int Band_GetRasterColorInterpretation(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Band_SetRasterColorInterpretation")]
  public static extern int Band_SetRasterColorInterpretation(HandleRef jarg1, int jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetNoDataValue")]
  public static extern void Band_GetNoDataValue(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Band_SetNoDataValue")]
  public static extern int Band_SetNoDataValue(HandleRef jarg1, double jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetMinimum")]
  public static extern void Band_GetMinimum(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetMaximum")]
  public static extern void Band_GetMaximum(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetOffset")]
  public static extern void Band_GetOffset(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetScale")]
  public static extern void Band_GetScale(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetOverviewCount")]
  public static extern int Band_GetOverviewCount(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetOverview")]
  public static extern IntPtr Band_GetOverview(HandleRef jarg1, int jarg2);

  [DllImport("gdal", EntryPoint="CSharp_Band_Checksum")]
  public static extern int Band_Checksum(HandleRef jarg1, int jarg2, int jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("gdal", EntryPoint="CSharp_Band_ComputeRasterMinMax")]
  public static extern void Band_ComputeRasterMinMax(HandleRef jarg1, int jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Band_Fill")]
  public static extern int Band_Fill(HandleRef jarg1, double jarg2, double jarg3);

  [DllImport("gdal", EntryPoint="CSharp_Band_ReadRaster")]
  public static extern int Band_ReadRaster(HandleRef jarg1, int jarg2, int jarg3, int jarg4, int jarg5, HandleRef jarg8, HandleRef jarg9, HandleRef jarg10);

  [DllImport("gdal", EntryPoint="CSharp_Band_WriteRaster")]
  public static extern int Band_WriteRaster(HandleRef jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, HandleRef jarg8, HandleRef jarg9, HandleRef jarg10);

  [DllImport("gdal", EntryPoint="CSharp_Band_FlushCache")]
  public static extern void Band_FlushCache(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Band_GetRasterColorTable")]
  public static extern IntPtr Band_GetRasterColorTable(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Band_SetRasterColorTable")]
  public static extern int Band_SetRasterColorTable(HandleRef jarg1, HandleRef jarg2);

  [DllImport("gdal", EntryPoint="CSharp_new_ColorTable")]
  public static extern IntPtr new_ColorTable(int jarg1);

  [DllImport("gdal", EntryPoint="CSharp_delete_ColorTable")]
  public static extern void delete_ColorTable(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_ColorTable_Clone")]
  public static extern IntPtr ColorTable_Clone(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_ColorTable_GetPaletteInterpretation")]
  public static extern int ColorTable_GetPaletteInterpretation(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_ColorTable_GetCount")]
  public static extern int ColorTable_GetCount(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_ColorTable_GetColorEntry")]
  public static extern IntPtr ColorTable_GetColorEntry(HandleRef jarg1, int jarg2);

  [DllImport("gdal", EntryPoint="CSharp_ColorTable_GetColorEntryAsRGB")]
  public static extern int ColorTable_GetColorEntryAsRGB(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("gdal", EntryPoint="CSharp_ColorTable_SetColorEntry")]
  public static extern void ColorTable_SetColorEntry(HandleRef jarg1, int jarg2, HandleRef jarg3);

  [DllImport("gdal", EntryPoint="CSharp_AllRegister")]
  public static extern void AllRegister();

  [DllImport("gdal", EntryPoint="CSharp_GetCacheMax")]
  public static extern int GetCacheMax();

  [DllImport("gdal", EntryPoint="CSharp_SetCacheMax")]
  public static extern void SetCacheMax(int jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GetCacheUsed")]
  public static extern int GetCacheUsed();

  [DllImport("gdal", EntryPoint="CSharp_GetDataTypeSize")]
  public static extern int GetDataTypeSize(int jarg1);

  [DllImport("gdal", EntryPoint="CSharp_DataTypeIsComplex")]
  public static extern int DataTypeIsComplex(int jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GetDataTypeName")]
  public static extern string GetDataTypeName(int jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GetDataTypeByName")]
  public static extern int GetDataTypeByName(string jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GetColorInterpretationName")]
  public static extern string GetColorInterpretationName(int jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GetPaletteInterpretationName")]
  public static extern string GetPaletteInterpretationName(int jarg1);

  [DllImport("gdal", EntryPoint="CSharp_DecToDMS")]
  public static extern string DecToDMS(double jarg1, string jarg2, int jarg3);

  [DllImport("gdal", EntryPoint="CSharp_PackedDMSToDec")]
  public static extern double PackedDMSToDec(double jarg1);

  [DllImport("gdal", EntryPoint="CSharp_DecToPackedDMS")]
  public static extern double DecToPackedDMS(double jarg1);

  [DllImport("gdal", EntryPoint="CSharp_ParseXMLString")]
  public static extern IntPtr ParseXMLString(string jarg1);

  [DllImport("gdal", EntryPoint="CSharp_SerializeXMLTree")]
  public static extern string SerializeXMLTree(HandleRef jarg1);

  [DllImport("gdal", EntryPoint="CSharp_GetDriverCount")]
  public static extern int GetDriverCount();

  [DllImport("gdal", EntryPoint="CSharp_GetDriverByName")]
  public static extern IntPtr GetDriverByName(string jarg1);

  [DllImport("gdal", EntryPoint="CSharp_Open")]
  public static extern IntPtr Open(string jarg1, int jarg2);

  [DllImport("gdal", EntryPoint="CSharp_OpenShared")]
  public static extern IntPtr OpenShared(string jarg1, int jarg2);

  [DllImport("gdal", EntryPoint="CSharp_AutoCreateWarpedVRT")]
  public static extern IntPtr AutoCreateWarpedVRT(HandleRef jarg1, string jarg2, string jarg3, int jarg4, double jarg5);

  [DllImport("gdal", EntryPoint="CSharp_DriverUpcast")]
  public static extern IntPtr DriverUpcast(IntPtr objectRef);

  [DllImport("gdal", EntryPoint="CSharp_DatasetUpcast")]
  public static extern IntPtr DatasetUpcast(IntPtr objectRef);

  [DllImport("gdal", EntryPoint="CSharp_BandUpcast")]
  public static extern IntPtr BandUpcast(IntPtr objectRef);
}
