# $Id: options.ac,v 1.12 2005/10/31 21:23:10 gmf Exp $

# Process user-specified options.
AC_DEFUN(AM_OPTIONS_SET, [

AC_MSG_CHECKING(if --enable-debug option specified)
AC_ARG_ENABLE(debug,
	[AC_HELP_STRING([--enable-debug],
			[Build a debugging version.])],
	[db_cv_debug="$enable_debug"], [db_cv_debug="no"])
AC_MSG_RESULT($db_cv_debug)

AC_MSG_CHECKING(if --enable-profile option specified)
AC_ARG_ENABLE(profile,
	[AC_HELP_STRING([--enable-profile],
			[Build a profiling version.])],
	[db_cv_profile="$enable_profile"], [db_cv_profile="no"])
AC_MSG_RESULT($db_cv_profile)

AC_MSG_CHECKING(if --enable-dependencies option specified)
AC_ARG_ENABLE(dependencies,
	[AC_HELP_STRING([--enable-dependencies],
			[Build include dependencies.])],
	[db_cv_depend="$enable_dependencies"], [db_cv_depend="no"])
AC_MSG_RESULT($db_cv_depend)

AC_MSG_CHECKING(if --enable-diagnostic option specified)
AC_ARG_ENABLE(diagnostic,
	[AC_HELP_STRING([--enable-diagnostic],
			[Build a version with run-time diagnostics.])],
	[db_cv_diagnostic="$enable_diagnostic"], [db_cv_diagnostic="no"])
AC_MSG_RESULT($db_cv_diagnostic)

AC_MSG_CHECKING([if --with-pathan=DIR option specified])
AC_ARG_WITH(pathan,
	[AC_HELP_STRING([--with-pathan=DIR],
			[Path of Pathan. [DIR="@PATHAN_HOME@"]])],
	[with_pathan="$withval"], [with_pathan="no"])
AC_MSG_RESULT($with_pathan)
if test "$with_pathan" = "no"; then
	with_pathan="/usr/local"
fi
if test -f "$with_pathan/lib/libpathan.la"; then 
	echo "$CPPFLAGS" | grep "$with_pathan/include" >/dev/null 2>&1 || CPPFLAGS="$CPPFLAGS -I$with_pathan/include"
	LIBS="$LIBS $with_pathan/lib/libpathan.la"
else
	AC_MSG_ERROR([Pathan is required to build XQuery.  $with_pathan not a valid Pathan tree.  You should specify the path where Pathan is installed with --with-pathan.])
fi

AC_MSG_CHECKING([if --with-xerces=DIR option specified])
AC_ARG_WITH(xerces,
	[AC_HELP_STRING([--with-xerces=DIR],
			[Path of Xerces. [DIR="@XERCES_UNIXHOME@"]])],
	[with_xerces="$withval"], [with_xerces="no"])
AC_MSG_RESULT($with_xerces)
if test "$with_xerces" = "no"; then
	with_xerces="/usr/local"
fi

# specifically test for 2.6 or 2.7.  This needs to change as releases change
if test `ls $with_xerces/lib/libxerces-c.*2[[6-7]].* 2>/dev/null | wc -l` -gt 0 ; then
	AC_MSG_CHECKING([for Xerces C++ version from install tree])
	xerces_version=`ls "$with_xerces"/lib/libxerces-c.*[[0-9]][[0-9]].* | tail -1 | sed 's/.*xerces-c.*\([[0-9]]\)\([[0-9]]\).*/\1.\2/'`
	with_xerces=`cd $with_xerces && pwd`
	echo "$CPPFLAGS" | grep "$with_xerces/include" >/dev/null 2>&1 || CPPFLAGS="$CPPFLAGS -I$with_xerces/include"
	LIBS="$LIBS -L$with_xerces/lib -R$with_xerces/lib -lxerces-c"
	AC_MSG_RESULT([$xerces_version])
elif test `ls $with_xerces/lib/libxerces-c*2[[6-7]].* 2>/dev/null | wc -l` -gt 0 ; then
	AC_MSG_CHECKING([for Xerces C++ version from install tree])
	xerces_version=`ls "$with_xerces"/lib/libxerces-c*[[0-9]][[0-9]].* | tail -1 | sed 's/.*xerces-c*\([[0-9]]\)\([[0-9]]\).*/\1.\2/'`
	with_xerces=`cd $with_xerces && pwd`
	echo "$CPPFLAGS" | grep "$with_xerces/include" >/dev/null 2>&1 || CPPFLAGS="$CPPFLAGS -I$with_xerces/include"
	LIBS="$LIBS -L$with_xerces/lib -R$with_xerces/lib -lxerces-c"
	AC_MSG_RESULT([$xerces_version])
else
	AC_MSG_ERROR([Xerces-C++ is required to build XQuery.  $with_xerces not a valid, supported Xerces tree (maybe it has not been compiled).  You should specify the path where Xerces is installed with --with-xerces.])
fi

])
