//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wintellect.Paraffin {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Constants {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Constants() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Wintellect.Paraffin.Constants", typeof(Constants).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one -alias switch at a time is supported..
        /// </summary>
        internal static string AliasMultipleSwitches {
            get {
                return ResourceManager.GetString("AliasMultipleSwitches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array must not be null or of zero length..
        /// </summary>
        internal static string ArrayMustBeValid {
            get {
                return ResourceManager.GetString("ArrayMustBeValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Autogenerated by Paraffin - Wintellect - John Robbins - john@wintellect.com.
        /// </summary>
        internal static string CommentProducer {
            get {
                return ResourceManager.GetString("CommentProducer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Manual changes to this file may cause incorrect behavior..
        /// </summary>
        internal static string CommentWarning {
            get {
                return ResourceManager.GetString("CommentWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The -directory switch must always be specified..
        /// </summary>
        internal static string DirectoryCannotBeEmpty {
            get {
                return ResourceManager.GetString("DirectoryCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The -directory specified path does not exist..
        /// </summary>
        internal static string DirectoryDoesNotExist {
            get {
                return ResourceManager.GetString("DirectoryDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one -directory switch at a time is supported..
        /// </summary>
        internal static string DirectoryMultipleSwitches {
            get {
                return ResourceManager.GetString("DirectoryMultipleSwitches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one -dirref switch at a time is supported..
        /// </summary>
        internal static string DirectoryRefMultipleSwitches {
            get {
                return ResourceManager.GetString("DirectoryRefMultipleSwitches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error on the &apos;{0}&apos; switch..
        /// </summary>
        internal static string ErrorSwitch {
            get {
                return ResourceManager.GetString("ErrorSwitch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension values cannot be empty..
        /// </summary>
        internal static string ExtensionCannotBeEmpty {
            get {
                return ResourceManager.GetString("ExtensionCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one increment switch at a time is supported..
        /// </summary>
        internal static string IncrementMultipleSwitches {
            get {
                return ResourceManager.GetString("IncrementMultipleSwitches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The increment value does not appear to be an integer..
        /// </summary>
        internal static string IncrementNoParse {
            get {
                return ResourceManager.GetString("IncrementNoParse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The increment value must be greater than zero..
        /// </summary>
        internal static string IncrementNotZero {
            get {
                return ResourceManager.GetString("IncrementNotZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A call into Windows failed unexpectedly..
        /// </summary>
        internal static string InteropCallFailed {
            get {
                return ResourceManager.GetString("InteropCallFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There appears to be multiple nodes in input .WXS file with the same file name in the same directory: {0}..
        /// </summary>
        internal static string InvalidFileNameCountFmt {
            get {
                return ResourceManager.GetString("InvalidFileNameCountFmt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid parameter was passed to the method..
        /// </summary>
        internal static string InvalidParameter {
            get {
                return ResourceManager.GetString("InvalidParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update and creation command line options are mutually excusive..
        /// </summary>
        internal static string MutuallyExclusiveOptions {
            get {
                return ResourceManager.GetString("MutuallyExclusiveOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one output or processing file can be specified..
        /// </summary>
        internal static string OutputAlreadySpecified {
            get {
                return ResourceManager.GetString("OutputAlreadySpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must specify the .WXS file to write to or process..
        /// </summary>
        internal static string OutputCannotBeEmpty {
            get {
                return ResourceManager.GetString("OutputCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The -unique value cannot be empty..
        /// </summary>
        internal static string UniqueCannotBeEmpty {
            get {
                return ResourceManager.GetString("UniqueCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one -unique switch at a time is supported..
        /// </summary>
        internal static string UniqueMultipleSwitches {
            get {
                return ResourceManager.GetString("UniqueMultipleSwitches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The -unique string value cannot be longer than 65 characters..
        /// </summary>
        internal static string UniqueTooLong {
            get {
                return ResourceManager.GetString("UniqueTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown command line option..
        /// </summary>
        internal static string UnknownCommandLineOption {
            get {
                return ResourceManager.GetString("UnknownCommandLineOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file to process does no appear to have been created with Paraffin. The comment node is missing..
        /// </summary>
        internal static string UnknownFileType {
            get {
                return ResourceManager.GetString("UnknownFileType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file to update does not exist..
        /// </summary>
        internal static string UpdateFileMustExist {
            get {
                return ResourceManager.GetString("UpdateFileMustExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Paraffin {0}
        ///(c) 2007-2008, John Robbins - john@wintellect.com
        ///A better Tallow for generating Windows Installer XML (WiX) 3.0 fragments. 
        ///
        ///Usage:
        /// Paraffin (-dir &lt;dir&gt; -custom &lt;value&gt; &lt;file&gt;
        ///            [-alias &lt;alias&gt; -ext &lt;ext&gt;* | -dirref &lt;DirectoryRef&gt; |
        ///             -direXclude &lt;exdir&gt;* | -inc # |  
        ///             -guids |-multiple | -norecurse | -Win64] ) |
        ///          (-update &lt;file&gt; [-ext &lt;ext&gt;*])
        ///           
        ///Required parameters to create a new fragment:
        ///    -dir &lt;dir&gt;             - The direc [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string UsageString {
            get {
                return ResourceManager.GetString("UsageString", resourceCulture);
            }
        }
    }
}
