# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "ubuntu12-i386"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../../sources", "/mapguide_sources"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file vagrant-mapguide-ubuntu-precise32.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision :puppet do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "site.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
  
  $script = <<SCRIPT
BUILD_COMPONENT=
check_build()
{
	error=$?
	if [ $error -ne 0 ]; then
		echo "[error]: ${BUILD_COMPONENT} - Error build failed ($error)"
		exit $error
	fi
}
check_test()
{
	error=$?
	if [ $error -ne 0 ]; then
		echo "[warning]: ${BUILD_COMPONENT} - Unit Tests failed ($error)"
		echo "[warning]: ${BUILD_COMPONENT} - Unit Tests failed ($error)" >> ~/unit_test_status.log
	fi
}
cd ~
echo [provision]: Home directory is `pwd`
echo [provision]: Checking directories
HAVE_FDO=0
HAVE_FDO_LIBS=0
HAVE_MAPGUIDE=0
MG_UNIT_TEST=0
FDO_UNIT_TEST=0
SCRIPT_ROOT=~/scripts
FDO_SRC_ROOT=~/fdo/branches
FDO_VER_MM=4.0
FDO_VER_FULL=${FDO_VER_MM}.0
MG_VER_MM=3.0
MG_VER_FULL=${MG_VER_MM}.0
FDO_SRC_DIR=4.0
FDO_SRC=$FDO_SRC_ROOT/$FDO_SRC_DIR
FDO_LIB_SRC=~/fdo_rdbms_thirdparty
MG_SRC_ROOT=~/mapguide/branches/3.0
MG_SRC=$MG_SRC_ROOT/MgDev
FDO_TARBALL=fdo-checkout-4.0.tar.gz
MG_TARBALL=mapguide-checkout-3.0.tar.gz
FDO_INST_PATH=/usr/local/fdo-${FDO_VER_FULL}
MG_INST_PATH=/usr/local/mapguideopensource-${MG_VER_FULL}
HAVE_FDO_SDK=0
FDO_SDK_PKG_PATH=~/fdosdk
FDO_SDK_TARBALL=
FDO_INST=/usr/local/fdo-${FDO_VER_FULL}

if [ -d $FDO_SRC ]; 
then
    HAVE_FDO=1
fi
if [ -d $FDO_LIB_SRC ];
then
    HAVE_FDO_LIBS=1
fi
if [ -d $MG_SRC ];
then
    HAVE_MAPGUIDE=1
fi
if [ -f /mapguide_sources/fdosdk_filename ] && [ -f /mapguide_sources/fdosdk_rev ] && [ -d /mapguide_sources/filelist ];
then
    FDO_SDK_TARBALL=`cat /mapguide_sources/fdosdk_filename`
    FDO_REV=`cat /mapguide_sources/fdosdk_rev`
    if [ -f /mapguide_sources/$FDO_SDK_TARBALL ];
    then
        sudo mkdir -p ${FDO_INST}
        sudo tar -zxf /mapguide_sources/$FDO_SDK_TARBALL -C ${FDO_INST}
        HAVE_FDO_SDK=1
        FDO_UNIT_TEST=0
        echo [provision]: Using FDO SDK. Not building from source. Not running FDO unit tests.
    fi
else
    echo [provision]: FDO SDK not found. Building FDO from source.
fi
if [ -f /usr/include/asm/atomic.h ];
then
    echo [provision]: atomic.h exists. Doing nothing
else
    echo [provision]: Copy atomic.h
    sudo mkdir -p /usr/include/asm
    sudo cp /mapguide_sources/atomic.h /usr/include/asm
fi
echo [provision]: Clean line endings
sudo dos2unix /vagrant/*.sh
sudo dos2unix /vagrant/*.pl
sudo dos2unix /vagrant/*.txt
echo [provision]: Copying shell scripts
mkdir -p $SCRIPT_ROOT
if [ $HAVE_FDO_SDK -eq 1 ];
then
    echo [provision]: Prepare package build area for FDO SDK
    mkdir -p $FDO_SDK_PKG_PATH
    cp -R /mapguide_sources/filelist $FDO_SDK_PKG_PATH
    cp -f /vagrant/dpkgfdo.sh $FDO_SDK_PKG_PATH
    cp -f /vagrant/dpkgfdocore.sh $FDO_SDK_PKG_PATH
    cp -f /vagrant/dpkgfdoprovider.sh $FDO_SDK_PKG_PATH
    cp -f /vagrant/revnum.pl $FDO_SDK_PKG_PATH
fi
cp -f /vagrant/*.sh $SCRIPT_ROOT
cp -f /vagrant/*.pl $SCRIPT_ROOT
cp -f /vagrant/*.txt $SCRIPT_ROOT
echo [provision]: Flip Ubuntu switch
cd $SCRIPT_ROOT
sed -i 's/UBUNTU=0/UBUNTU=1/g' build.sh
sed -i 's/UBUNTU=0/UBUNTU=1/g' build_fdo.sh
sed -i 's/FDO_PLATFORM=64/FDO_PLATFORM=32/g' build_fdo.sh
sed -i 's/FDO_CPU=x64/FDO_CPU=x86/g' build_fdo.sh
sed -i 's/FDO_BUILD_CPU=amd64/FDO_BUILD_CPU=i386/g' build_fdo.sh
sed -i 's/LIB_DIRNAME=lib64/LIB_DIRNAME=lib/g' build_fdo.sh
if [ $HAVE_FDO_SDK -eq 0 ];
then
    if [ $HAVE_FDO_LIBS -eq 0 ];
    then
        echo [provision]: Extracting FDO thirdparty libs
        tar -zxf /mapguide_sources/fdo_rdbms_thirdparty.tar.gz -C ~
    fi
    if [ $HAVE_FDO -eq 0 ];
    then
        echo [provision]: Extracting FDO working copy
        mkdir -p $FDO_SRC_ROOT
        tar -zxf /mapguide_sources/$FDO_TARBALL -C $FDO_SRC_ROOT
    fi
fi
if [ $HAVE_MAPGUIDE -eq 0 ];
then
    echo [provision]: Extracting MapGuide working copy
    mkdir -p $MG_SRC_ROOT
    tar -zxf /mapguide_sources/$MG_TARBALL -C $MG_SRC_ROOT
fi
if [ $HAVE_FDO_SDK -eq 0 ];
then
    if [ -d /mapguide_sources/patches/fdo ];
    then
        echo [provision]: Applying FDO source patches
        cp -R /mapguide_sources/patches/fdo/* $FDO_SRC
    fi
else
    echo [provision]: Using FDO SDK. No source patches to apply
fi
if [ -d /mapguide_sources/patches/mapguide ];
then
    echo [provision]: Applying MapGuide source patches
    cp -R /mapguide_sources/patches/mapguide/* $MG_SRC
fi
echo [provision]: Making sure swig is executable
chmod +x $MG_SRC/Oem/SWIGEx/Linux/swig
cd ~/scripts
if [ $HAVE_FDO_SDK -eq 0 ];
then
    BUILD_COMPONENT="FDO"
    sudo -E ./build_fdo.sh 2>&1 | tee ~/fdo_build.log
    check_build
    FDO_REV=`svn info $FDO_SRC | perl revnum.pl`
else
    echo [provision]: Using FDO SDK. Not building from source
    echo [provision]: Re-packaging FDO SDK r$FDO_REV as debs
    FDO_FILELIST=$FDO_SDK_PKG_PATH/filelist
    pushd $FDO_SDK_PKG_PATH
    ./dpkgfdo.sh i386 $FDO_REV 2>&1 | tee ~/dpkg_fdo.log
    popd
fi
BUILD_COMPONENT="MapGuide"
sudo -E ./build.sh 2>&1 | tee ~/mapguide_build.log
check_build
MG_REV=`svn info $MG_SRC | perl revnum.pl`
BUILD_COMPONENT="MapGuide deb packages"
./dpkgmapguide.sh i386 $MG_REV 2>&1 | tee ~/dpkg_mapguide.log
check_build
> ~/unit_test_status.log
if [ $FDO_UNIT_TEST -eq 1 ];
then
    echo [provision]: Unit test FDO
    BUILD_COMPONENT="Unit Test FDO Core"
    cd $SCRIPT_ROOT/fdo_build_area/Fdo/UnitTest
    sudo -E NLSPATH=${FDO_INST_PATH}/nls/%N ./UnitTest 2>&1 | tee ~/fdo_core_unit_test.log
    check_test
    BUILD_COMPONENT="Unit Test SHP Provider"
    cd $SCRIPT_ROOT/fdo_build_area/Providers/SHP/Src/UnitTest
    sudo rm providers.xml
    sudo -E NLSPATH=${FDO_INST_PATH}/nls/%N ./UnitTest 2>&1 | tee ~/fdo_shp_unit_test.log
    check_test
    BUILD_COMPONENT="Unit Test SDF Provider"
    cd $SCRIPT_ROOT/fdo_build_area/Providers/SDF/Src/UnitTest
    sudo rm providers.xml
    sudo -E NLSPATH=${FDO_INST_PATH}/nls/%N ./UnitTest 2>&1 | tee ~/fdo_sdf_unit_test.log
    check_test
    BUILD_COMPONENT="Unit Test SQLite Provider"
    cd $SCRIPT_ROOT/fdo_build_area/Providers/SQLite/Src/UnitTest
    sudo rm providers.xml
    sudo -E NLSPATH=${FDO_INST_PATH}/nls/%N ./UnitTest 2>&1 | tee ~/fdo_sqlite_unit_test.log
    check_test
    BUILD_COMPONENT="Unit Test GDAL Provider"
    cd $SCRIPT_ROOT/fdo_build_area/Providers/GDAL/Src/UnitTest
    sudo rm providers.xml
    sudo -E NLSPATH=${FDO_INST_PATH}/nls/%N ./UnitTest 2>&1 | tee ~/fdo_gdal_unit_test.log
    check_test
    BUILD_COMPONENT="Unit Test OGR Provider"
    cd $SCRIPT_ROOT/fdo_build_area/Providers/OGR/Src/UnitTest
    sudo rm providers.xml
    sudo -E NLSPATH=${FDO_INST_PATH}/nls/%N ./UnitTest 2>&1 | tee ~/fdo_ogr_unit_test.log
    check_test
    BUILD_COMPONENT="Unit Test WMS Provider"
    cd $SCRIPT_ROOT/fdo_build_area/Providers/WMS/Src/UnitTest
    sudo rm providers.xml
    sudo -E NLSPATH=${FDO_INST_PATH}/nls/%N ./UnitTest 2>&1 | tee ~/fdo_wms_unit_test.log
    check_test
fi
if [ $MG_UNIT_TEST -eq 1 ];
then
    echo [provision]: Unit test MapGuide
    BUILD_COMPONENT="Unit Test MapGuide Server"
    # HACK: Tile and Resource Service tests are known to freeze our VMs when driven by vagrant (why? who knows? 
    # All we know is that those tests involve threads)
    # So test everything *but* the above services. If required, this can be tested under a manually controlled
    # VM
    #
    # build the individual targets that would comprise "make check" sans execution of unittest.sh
    cd $SCRIPT_ROOT/mgdev/Server/src/UnitTesting
    sudo make libMgUnitTesting.la
    cd $SCRIPT_ROOT/mgdev/Server/src/Core
    sudo make unittest.sh
    # Run the test suites individually except for TileService for reasons already stated
    for comp in CoordinateSystem FeatureService Geometry KmlService LogManager MappingService MdfModel Misc Performance RenderingService ServerAdminService ServerManager ServiceManager SiteManager SiteService ProfilingService TransformMesh
    do
        sudo -E ./mgserver test $comp UnitTestResults_${comp}.xml 2>&1 | tee ~/mapguide_${comp}_unit_test.log
        check_test
        if [ -f UnitTestResults_${comp}.xml ]; then
            sudo mv UnitTestResults_${comp}.xml ~/UnitTestResults_${comp}.xml
        fi
    done
    cd $SCRIPT_ROOT/mgdev
    sudo -E ./run_tests.sh --prefix ${MG_INST_PATH} --with-php --with-java --logpath ~
fi
cd $SCRIPT_ROOT
sudo mkdir -p /vagrant/build
sudo mv -f ~/*.log /vagrant/build
if [ $HAVE_FDO_SDK -eq 0 ];
then
    sudo cp fdo_build_area/install/bin/*.deb /vagrant/build
    sudo cp ~/fdo_*_unit_test.log /vagrant/build
else
    sudo cp $FDO_SDK_PKG_PATH/bin/*.deb /vagrant/build
fi
sudo cp bin/*.deb /vagrant/build
sudo cp ~/UnitTestResults_*.xml /vagrant/build
sudo sed -i 's/URL_PART="ubuntu12"/URL_PART="ubuntu12_x86"/g' /vagrant/build/mginstallubuntu.sh
sudo cp /vagrant/mginstallubuntu.sh /vagrant/build/mginstallubuntu.sh
sudo cp /vagrant/mguninstallubuntu.sh /vagrant/build/mguninstallubuntu.sh
sudo sed -i 's/FDOBUILD=0/FDOBUILD='"$FDO_REV"'/g' /vagrant/build/mginstallubuntu.sh
sudo sed -i 's/MGBUILD=0/MGBUILD='"$MG_REV"'/g' /vagrant/build/mginstallubuntu.sh
echo [provision]: Build complete
SCRIPT
  
  config.vm.provision "shell",
    privileged: false,
    inline: $script
end
