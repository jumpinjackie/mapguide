<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>1</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>RELEASE_LABEL</name>
          <description></description>
          <defaultValue>Preview2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>WITH_ARCSDE</name>
          <description></description>
          <defaultValue>no</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MG_VER_MAJOR</name>
          <description></description>
          <defaultValue>3</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MG_VER_MINOR</name>
          <description></description>
          <defaultValue>0</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MG_VER_BUILD</name>
          <description></description>
          <defaultValue>0</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MG_BUILD_SRC</name>
          <description></description>
          <defaultValue>C:\working\sources\mg-trunk</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>FDO_SRC</name>
          <description></description>
          <defaultValue>C:\builds\fdo\4.0.0\x86\Fdo</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INSTANT_SETUP_SRC</name>
          <description></description>
          <defaultValue>C:\working\sources\MgInstantSetup</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>CLEAR_WORKING_AREA</name>
          <description></description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MG_STAMP_FILE_SOURCE</name>
          <description></description>
          <defaultValue>C:\working\sources\mapguide_trunk_revision.txt</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>JDK6 32-bit</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.BatchFile>
      <command>@echo off&#xd;
&#xd;
SET BUILD_ACTION=Setting Visual Studio env vars&#xd;
SET VCBEXTENSION=_vs12&#xd;
SET VC_COMPILER=vc110&#xd;
SET ACTIVENAMECHECK=&quot;Microsoft Visual Studio 11&quot;&#xd;
SET ACTIVEPATHCHECK=&quot;C:\Program Files\Microsoft Visual Studio 11.0\VC&quot;&#xd;
if exist %ACTIVEPATHCHECK% goto VSExist&#xd;
SET ACTIVEPATHCHECK=&quot;C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC&quot;&#xd;
if exist %ACTIVEPATHCHECK% goto VSExist&#xd;
goto error&#xd;
&#xd;
:VSExist&#xd;
call %ACTIVEPATHCHECK%\vcvarsall.bat x86&#xd;
&#xd;
REM Sigh! We can&apos;t seem to reference this from Jenkins&#xd;
SET MSBUILD_NET40=C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe&#xd;
&#xd;
SET MG_VER_MAJOR_MINOR=%MG_VER_MAJOR%.%MG_VER_MINOR%&#xd;
SET MG_VER_MAJOR_MINOR_BUILD=%MG_VER_MAJOR_MINOR%.%MG_VER_BUILD%&#xd;
SET MG_BUILD_OUTPUT_ROOT=%MG_BUILD_ARTIFACT_PATH%\mapguide&#xd;
SET MG_BUILD_OUTPUT=%MG_BUILD_OUTPUT_ROOT%\%MG_VER_MAJOR_MINOR_BUILD%\x86\release&#xd;
SET MG_BUILD_AREA=%MG_BUILD_AREA%\mapguide\%MG_VER_MAJOR_MINOR_BUILD%\x86&#xd;
SET REVNUM_FILE=%MG_TOOL_PATH%\revnum.pl&#xd;
SET MG_STAMP_FILE=%MG_BUILD_ARTIFACT_PATH%\last_mapguide_%MG_VER_MAJOR_MINOR_BUILD%_revision_x86.txt&#xd;
SET BUILD_ACTION=&#xd;
&#xd;
echo =================== Env Vars for MapGuide =============================&#xd;
echo MG_VER_MAJOR_MINOR         = %MG_VER_MAJOR_MINOR%&#xd;
echo MG_VER_MAJOR_MINOR_BUILD   = %MG_VER_MAJOR_MINOR_BUILD%&#xd;
echo MG_BUILD_OUTPUT_ROOT       = %MG_BUILD_OUTPUT_ROOT%&#xd;
echo MG_BUILD_OUTPUT            = %MG_BUILD_OUTPUT%&#xd;
echo MG_BUILD_AREA              = %MG_BUILD_AREA%&#xd;
echo REVNUM_FILE                = %REVNUM_FILE%&#xd;
echo MG_STAMP_FILE              = %MG_STAMP_FILE%&#xd;
echo INSTANT_SETUP_SRC          = %INSTANT_SETUP_SRC%&#xd;
echo JAVA_HOME                  = %JAVA_HOME%&#xd;
echo ANT_HOME                   = %ANT_HOME%&#xd;
echo =======================================================================&#xd;
&#xd;
echo [prepare]: Cleaning out build artifacts&#xd;
if exist %MG_BUILD_OUTPUT% rd /S /Q %MG_BUILD_OUTPUT%&#xd;
&#xd;
echo [prepare]: Noting SVN revision&#xd;
set /p MG_REVISION= &lt; &quot;%MG_STAMP_FILE_SOURCE%&quot;&#xd;
copy /Y &quot;%MG_STAMP_FILE_SOURCE%&quot; &quot;%MG_STAMP_FILE%&quot;&#xd;
&#xd;
if &quot;%CLEAR_WORKING_AREA%&quot;==&quot;false&quot; (&#xd;
    echo [prepare]: Skip cleaning build area&#xd;
    goto build_mapguide&#xd;
)&#xd;
&#xd;
echo [prepare]: Cleaning out build area&#xd;
if exist %MG_BUILD_AREA% rd /S /Q %MG_BUILD_AREA%&#xd;
echo [prepare]: Re-creating output directories&#xd;
if not exist %MG_BUILD_AREA%\Installer mkdir %MG_BUILD_AREA%\Installer&#xd;
if not exist %MG_BUILD_AREA%\MgDev mkdir %MG_BUILD_AREA%\MgDev&#xd;
if not exist %MG_BUILD_ARTIFACT_PATH%\mg-desktop mkdir %MG_BUILD_ARTIFACT_PATH%\mg-desktop&#xd;
&#xd;
echo [prepare]: Exporting SVN working copy to build area (Installer)&#xd;
SET BUILD_ACTION=Exporting SVN working copy to build area (Installer)&#xd;
svn export %MG_BUILD_SRC%\Installer %MG_BUILD_AREA%\Installer --force -q&#xd;
if &quot;%errorlevel%&quot;==&quot;1&quot; goto error&#xd;
&#xd;
echo [prepare]: Copying SVN working copy to build area (MgDev)&#xd;
SET BUILD_ACTION=Copying SVN working copy to build area (MgDev)&#xd;
svn export %MG_BUILD_SRC%\MgDev %MG_BUILD_AREA%\MgDev --force -q&#xd;
if &quot;%errorlevel%&quot;==&quot;1&quot; goto error&#xd;
&#xd;
echo [prepare]: Setup FDO in Oem&#xd;
cd %MG_BUILD_AREA%\MgDev\Oem\FDO&#xd;
xcopy /S /Y /I %FDO_SRC%\Inc Inc&#xd;
xcopy /S /Y /I %FDO_SRC%\Lib Lib&#xd;
xcopy /S /Y /I %FDO_SRC%\Bin Bin\Release&#xd;
xcopy /S /Y /I %FDO_SRC%\Bin\com\*.* Bin\Release\com&#xd;
REM For release we don&apos;t want pdbs and .net assemblies&#xd;
cd %MG_BUILD_AREA%\MgDev\Oem\FDO\Bin\Release&#xd;
del /Q OSGeo.FDO.*&#xd;
del /Q *.pdb&#xd;
&#xd;
:build_mapguide&#xd;
cd %MG_BUILD_AREA%\MgDev&#xd;
echo [build]: Stamp version numbers&#xd;
SET BUILD_ACTION=Stamp version numbers&#xd;
cscript updateversion.vbs /major:%MG_VER_MAJOR% /minor:%MG_VER_MINOR% /point:%MG_VER_BUILD% /build:%MG_REVISION%&#xd;
call stampassemblies.bat %MG_VER_MAJOR_MINOR_BUILD%.%MG_REVISION%&#xd;
if &quot;%errorlevel%&quot;==&quot;1&quot; goto error&#xd;
&#xd;
REM ========================================= MapGuide ====================================================&#xd;
&#xd;
cd %MG_BUILD_AREA%\MgDev&#xd;
echo [build]: Set env vars&#xd;
call setenvironment.bat&#xd;
&#xd;
echo [build]: build oem/server/web&#xd;
cd %MG_BUILD_AREA%\MgDev&#xd;
SET BUILD_ACTION=build oem/server/web&#xd;
call build.bat&#xd;
if &quot;%errorlevel%&quot;==&quot;1&quot; goto error&#xd;
&#xd;
echo [build]: install files to build artifact directory&#xd;
SET BUILD_ACTION=install files to build artifact directory&#xd;
call build.bat -a=install -o=%MG_BUILD_OUTPUT%&#xd;
if &quot;%errorlevel%&quot;==&quot;1&quot; goto error&#xd;
&#xd;
REM Move fusion-selfbuild tools out of staging area&#xd;
pushd %MG_BUILD_OUTPUT%\fusion-selfbuild&#xd;
move /Y fusion-%MG_VER_MAJOR_MINOR_BUILD%-buildtools.zip %MG_BUILD_OUTPUT_ROOT%&#xd;
popd&#xd;
pushd %MG_BUILD_OUTPUT%&#xd;
rd /S /Q fusion-selfbuild&#xd;
popd&#xd;
&#xd;
REM ========================================= mg-desktop ====================================================&#xd;
:build_mgdesktop&#xd;
REM HACK: mg-desktop batch files not aware of new output dir so set old one&#xd;
SET MG_OUTPUT=%MG_BUILD_AREA%\MgDev\Release&#xd;
pushd %MG_BUILD_AREA%\MgDev&#xd;
echo [build]: mg-desktop&#xd;
SET BUILD_ACTION=Build mg-desktop&#xd;
call build_desktop.bat x86&#xd;
if &quot;%errorlevel%&quot;==&quot;1&quot; goto error&#xd;
popd&#xd;
&#xd;
pushd %MG_BUILD_AREA%\MgDev\nuget&#xd;
echo [clean]: Nuget package temp files&#xd;
call package_clean.bat&#xd;
popd&#xd;
&#xd;
pushd %MG_BUILD_AREA%\MgDev&#xd;
echo [build]: Nuget packages&#xd;
call nuget_prepare.bat %MG_VER_MAJOR_MINOR_BUILD%.%MG_REVISION% x86&#xd;
SET BUILD_ACTION=Nuget packages&#xd;
call nuget_pack.bat x86&#xd;
if &quot;%errorlevel%&quot;==&quot;1&quot; goto error&#xd;
popd&#xd;
&#xd;
pushd %MG_BUILD_AREA%\MgDev\nuget&#xd;
echo [build]: Copy mg-desktop build artifacts (NuGet packages)&#xd;
set BUILD_ACTION=Copy mg-desktop build artifacts (NuGet packages)&#xd;
move *.nupkg %MG_BUILD_ARTIFACT_PATH%\mg-desktop&#xd;
if &quot;%errorlevel%&quot;==&quot;1&quot; goto error&#xd;
popd&#xd;
&#xd;
pushd %MG_BUILD_AREA%\MgDev\Release&#xd;
echo [build]: Copy mg-desktop build artifacts (zip dist)&#xd;
SET BUILD_ACTION=Copy mg-desktop build artifacts (zip dist)&#xd;
7z a -mx9 %MG_BUILD_ARTIFACT_PATH%\mg-desktop\mg-desktop-%MG_VER_MAJOR_MINOR_BUILD%.%MG_REVISION%-net40-vc11-x86.zip Desktop DesktopSamples&#xd;
if &quot;%errorlevel%&quot;==&quot;1&quot; goto error&#xd;
popd&#xd;
&#xd;
REM ========================================= Instant Setup =========================================================&#xd;
pushd %MG_BUILD_AREA%\Installer&#xd;
echo [build]: Prepare artifact directory&#xd;
SET BUILD_ACTION=Prepare artifact directory&#xd;
call build.bat -a=prepare -source=%MG_BUILD_OUTPUT%&#xd;
if &quot;%errorlevel%&quot;==&quot;1&quot; goto error&#xd;
popd&#xd;
&#xd;
if not exist %INSTANT_SETUP_SRC% goto checkout_instantsetup&#xd;
goto update_instantsetup&#xd;
:checkout_instantsetup&#xd;
echo [build]: svn checkout MgInstantSetup&#xd;
SET BUILD_ACTION=svn checkout MgInstantSetup&#xd;
svn co %INSTANT_SETUP_SVN_URL% %INSTANT_SETUP_SRC%&#xd;
if &quot;%errorlevel%&quot;==&quot;1&quot; goto error&#xd;
goto build_instantsetup&#xd;
&#xd;
:update_instantsetup&#xd;
REM We&apos;ll allow this to fail&#xd;
echo [build]: svn update MgInstantSetup&#xd;
pushd %INSTANT_SETUP_SRC%&#xd;
svn update&#xd;
popd&#xd;
&#xd;
:build_instantsetup&#xd;
echo [build]: MgInstantSetup&#xd;
pushd %INSTANT_SETUP_SRC%&#xd;
SET BUILD_ACTION=Building MgInstantSetup&#xd;
%MSBUILD_NET40% /p:Configuration=Release;Platform=&quot;Any CPU&quot; MgInstantSetup.sln&#xd;
if &quot;%errorlevel%&quot;==&quot;1&quot; goto error&#xd;
popd&#xd;
&#xd;
:copy_instantsetup_build_artifacts&#xd;
echo [build]: Copy MgInstantSetup build artifacts&#xd;
if not exist %MG_BUILD_OUTPUT%\Setup mkdir %MG_BUILD_OUTPUT%\Setup&#xd;
pushd %INSTANT_SETUP_SRC%\out\release&#xd;
copy /Y *.exe %MG_BUILD_OUTPUT%\Setup&#xd;
copy /Y *.pdb %MG_BUILD_OUTPUT%\Setup&#xd;
copy /Y *.dll %MG_BUILD_OUTPUT%\Setup&#xd;
copy /Y *.config %MG_BUILD_OUTPUT%\Setup&#xd;
popd&#xd;
&#xd;
:zip_mginstantsetup&#xd;
pushd %MG_BUILD_OUTPUT%&#xd;
7z a %MG_BUILD_OUTPUT_ROOT%\MapGuideOpenSource-%MG_VER_MAJOR_MINOR_BUILD%.%MG_REVISION%-InstantSetup-x86.exe -mmt -mx5 -sfx7z.sfx CS-Map Server Web Setup&#xd;
popd&#xd;
&#xd;
:zip_testpack&#xd;
pushd %MG_BUILD_OUTPUT%&#xd;
7z a %MG_BUILD_OUTPUT_ROOT%\MapGuideOpenSource-%MG_VER_MAJOR_MINOR_BUILD%.%MG_REVISION%-TestSuite-x86.exe -mmt -mx5 -sfx7z.sfx Test&#xd;
popd&#xd;
&#xd;
REM ========================================= MapGuide Installer ====================================================&#xd;
&#xd;
:build_installer&#xd;
pushd %MG_BUILD_AREA%\Installer&#xd;
echo [build]: Generate installer file listings&#xd;
SET BUILD_ACTION=Generate installer file listings&#xd;
call build.bat -a=generate -source=%MG_BUILD_OUTPUT%&#xd;
if &quot;%errorlevel%&quot;==&quot;1&quot; goto error&#xd;
&#xd;
echo [build]: Build the installer&#xd;
SET BUILD_ACTION=Build the installer&#xd;
call build.bat -source=%MG_BUILD_OUTPUT% -version=%MG_VER_MAJOR_MINOR_BUILD%.%MG_REVISION% -name=MapGuideOpenSource-%MG_VER_MAJOR_MINOR_BUILD%.%MG_REVISION%-%RELEASE_LABEL%-x86 -title=&quot;MapGuide Open Source %MG_VER_MAJOR_MINOR_BUILD% %RELEASE_LABEL%&quot;&#xd;
if &quot;%errorlevel%&quot;==&quot;1&quot; goto error&#xd;
&#xd;
move /Y Output\en-US\MapGuideOpenSource-%MG_VER_MAJOR_MINOR_BUILD%.%MG_REVISION%-%RELEASE_LABEL%-x86.exe %MG_BUILD_OUTPUT_ROOT%&#xd;
popd&#xd;
&#xd;
goto end&#xd;
&#xd;
:error&#xd;
echo An error occurred while building MapGuide: %BUILD_ACTION%&#xd;
exit /b 1&#xd;
:end&#xd;
exit /b 0</command>
    </hudson.tasks.BatchFile>
  </builders>
  <publishers>
    <hudson.tasks.BuildTrigger>
      <childProjects>Test MapGuide x86</childProjects>
      <threshold>
        <name>SUCCESS</name>
        <ordinal>0</ordinal>
        <color>BLUE</color>
        <completeBuild>true</completeBuild>
      </threshold>
    </hudson.tasks.BuildTrigger>
  </publishers>
  <buildWrappers/>
</project>